@using System.Net.Http.Json
@using System.Globalization
@inject HttpClient Http
@inject Microsoft.Extensions.Localization.IStringLocalizer<FinanceManager.Web.Components.Shared.AggregateBarChart> Localizer

<div class="@($"aggregate-chart-wrapper{(Compact? " compact" : string.Empty)}")" aria-busy="@_loading">
    @if (!string.IsNullOrWhiteSpace(Title))
    {
        <h4 style="margin:0 0 .5rem 0;">@Title</h4>
    }
    @if (!HideIntervalSelector)
    {
        <div class="interval-selector">
            <label class="lbl-int">@Localizer["LabelInterval"]:</label>
            <select @bind="_period" @bind:after="LoadAsync" aria-label="@Localizer["Aria_SelectInterval"]">
                <option value="Month">@Localizer["Interval_Month"]</option>
                <option value="Quarter">@Localizer["Interval_Quarter"]</option>
                <option value="HalfYear">@Localizer["Interval_HalfYear"]</option>
                <option value="Year">@Localizer["Interval_Year"]</option>
            </select>
        </div>
    }

    <div class="chart">
        @if (_loading && _data.Count == 0)
        {
            <div class="chart-skeleton" role="status" aria-live="polite" style="height:@(BarsHeightPx ?? (Compact?100:180))px;">
                @for (int i=0;i<10;i++)
                {
                    <div class="skeleton-bar" style="animation-delay:@(i*0.06)s"></div>
                }
                <div class="skeleton-labels">
                    @for (int i=0;i<10;i++)
                    {
                        <div class="skeleton-label"></div>
                    }
                </div>
                <span class="visually-hidden">@Localizer["Loading"]</span>
            </div>
        }
        else if (_data.Count == 0)
        {
            <div class="nodata">@Localizer["NoData"]</div>
        }
        else
        {
            var maxAbs = _data.Select(p => Math.Abs(p.Amount)).DefaultIfEmpty(0m).Max();
            var barsHeight = BarsHeightPx ?? (Compact ? 100 : 180);
            var halfHeight = (decimal)barsHeight / 2m;
            var scale = maxAbs == 0 ? 0 : halfHeight / maxAbs;

            <div class="bars-wrapper" style="height:@(barsHeight)px;">
                <div class="bar-row pos">
                    @foreach (var p in _data)
                    {
                        var h = p.Amount > 0 ? (int)Math.Round((double)(p.Amount * scale)) : 0;
                        <div class="bar bar-pos"
                             role="img"
                             aria-label="@BuildAria(p)"
                             title="@BuildTooltip(p)"
                             style="height:@(h)px;"></div>
                    }
                </div>
                <div class="zero-line"></div>
                <div class="bar-row neg">
                    @foreach (var p in _data)
                    {
                        var h = p.Amount < 0 ? (int)Math.Round((double)(-p.Amount * scale)) : 0;
                        <div class="bar bar-neg"
                             role="img"
                             aria-label="@BuildAria(p)"
                             title="@BuildTooltip(p)"
                             style="height:@(h)px;"></div>
                    }
                </div>
            </div>

            <div class="labels-row">
                @{ int idx=0; foreach (var p in _data) { bool show = ShouldShowLabel(idx, _data.Count); <div class="lbl @(show?string.Empty:"skip")" aria-hidden="@(show? "false":"true")">@FormatLabel(p.PeriodStart)</div>; idx++; } }
            </div>

            @if (_loading)
            {
                <div class="chart-loading-overlay" role="status" aria-live="polite">
                    <div class="spinner">
                        <div class="seg a"></div>
                        <div class="seg b"></div>
                        <div class="seg c"></div>
                        <div class="seg d"></div>
                    </div>
                    <span class="loading-text">@Localizer["Loading"]</span>
                </div>
            }
        }
    </div>
</div>

@code {
    [Parameter] public string Endpoint { get; set; } = string.Empty;
    [Parameter] public string? Title { get; set; }
    [Parameter] public string PositiveColor { get; set; } = "#2d6cdf";
    [Parameter] public string NegativeColor { get; set; } = "#c94";
    [Parameter] public string AxisColor { get; set; } = "#555";
    [Parameter] public int? Take { get; set; }
    [Parameter] public int? MaxYearsBack { get; set; }
    [Parameter] public bool HideIntervalSelector { get; set; }
    [Parameter] public string? InitialPeriod { get; set; }
    [Parameter] public bool AutoFit { get; set; } = true;
    [Parameter] public int MaxVisibleLabels { get; set; } = 18;
    [Parameter] public bool Compact { get; set; }
    [Parameter] public int? BarsHeightPx { get; set; }

    private string _period = "Month";
    private bool _loading;
    private bool _multipleYears;
    private readonly List<Point> _data = new();

    private sealed record Point(DateTime PeriodStart, decimal Amount);

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrWhiteSpace(InitialPeriod))
        {
            _period = InitialPeriod!;
        }
        if (!string.IsNullOrWhiteSpace(Endpoint) && _data.Count == 0)
        {
            await LoadAsync();
        }
    }

    private bool ShouldShowLabel(int index, int total)
    {
        if (!AutoFit) { return true; }
        if (total <= MaxVisibleLabels) { return true; }
        int step = (int)Math.Ceiling(total / (double)MaxVisibleLabels);
        return index % step == 0;
    }

    private async Task LoadAsync()
    {
        if (string.IsNullOrWhiteSpace(Endpoint)) { return; }
        _loading = true;
        StateHasChanged();
        try
        {
            var baseUrl = Endpoint.Contains('?') ? $"{Endpoint}&period={_period}" : $"{Endpoint}?period={_period}";
            if (Take.HasValue && Take.Value > 0) { baseUrl += $"&take={Take.Value}"; }
            if (MaxYearsBack.HasValue && MaxYearsBack.Value > 0) { baseUrl += $"&maxYearsBack={MaxYearsBack.Value}"; }
            var resp = await Http.GetAsync(baseUrl);
            if (resp.IsSuccessStatusCode)
            {
                var list = await resp.Content.ReadFromJsonAsync<List<TimeSeriesResponse>>() ?? new();
                _data.Clear();
                _data.AddRange(list.Select(x => new Point(x.PeriodStart, x.Amount)));
                _multipleYears = _data.Select(d => d.PeriodStart.Year).Distinct().Skip(1).Any();
            }
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private string FormatLabel(DateTime d)
    {
        // Culture-aware compact labeling
        var culture = CultureInfo.CurrentUICulture;
        switch (_period)
        {
            case "Month":
                // Use abbreviated month name; append year if multiple years present or first month of year when mixing
                var monthName = culture.DateTimeFormat.GetAbbreviatedMonthName(d.Month);
                if (_multipleYears || d.Month == 1)
                {
                    return string.Concat(monthName, " ", d.ToString("yy", culture));
                }
                return monthName;
            case "Quarter":
                var q = ((d.Month - 1) / 3) + 1;
                return _multipleYears ? $"Q{q} {d:yy}" : $"Q{q}";
            case "HalfYear":
                var h = d.Month <= 6 ? 1 : 2;
                return _multipleYears ? $"H{h} {d:yy}" : $"H{h}";
            case "Year":
                return d.ToString("yyyy", culture);
            default:
                return d.ToString("d", culture);
        }
    }

    private string BuildTooltip(Point p)
    {
        var culture = CultureInfo.CurrentUICulture;
        if (string.Equals(_period, "Quarter", StringComparison.OrdinalIgnoreCase))
        {
            var q = ((p.PeriodStart.Month - 1) / 3) + 1;
            return string.Format(culture, "{0:yyyy}-Q{1} ({2})", p.PeriodStart, q, p.Amount.ToString("N2", culture));
        }
        if (string.Equals(_period, "HalfYear", StringComparison.OrdinalIgnoreCase))
        {
            var h = p.PeriodStart.Month <= 6 ? 1 : 2;
            return string.Format(culture, "{0:yyyy}-H{1} ({2})", p.PeriodStart, h, p.Amount.ToString("N2", culture));
        }
        if (string.Equals(_period, "Year", StringComparison.OrdinalIgnoreCase))
        {
            return string.Format(culture, "{0:yyyy} ({1})", p.PeriodStart, p.Amount.ToString("N2", culture));
        }
        // Month
        var dateStr = p.PeriodStart.ToString("d", culture);
        return string.Format(culture, "{0} ({1})", dateStr, p.Amount.ToString("N2", culture));
    }

    private string BuildAria(Point p) => Localizer["AriaBar", p.PeriodStart.ToString("yyyy-MM-dd"), p.Amount];

    private sealed class TimeSeriesResponse { public DateTime PeriodStart { get; set; } public decimal Amount { get; set; } }
}

<style>
.aggregate-chart-wrapper select { min-width:95px; }
.interval-selector { display:flex; gap:.5rem; align-items:center; margin-bottom:.4rem; }
.interval-selector select { font-size:.75rem; }
.interval-selector .lbl-int { font-size:.75rem; opacity:.85; }

.chart {
    --bar-color:@PositiveColor;
    --bar-neg:@NegativeColor;
    --axis:@AxisColor;
    width:100%;
    box-sizing:border-box;
    border:1px solid var(--border);
    padding:.45rem .6rem;
    border-radius:.35rem;
    min-height:190px;
    position:relative;
    display:flex;
    flex-direction:column;
    overflow:hidden;
}

.aggregate-chart-wrapper.compact .chart{ min-height:0; padding:.35rem .5rem; }
.aggregate-chart-wrapper.compact .labels-row{ font-size:.55rem; margin-top:.15rem; }

.bars-wrapper { flex:1 1 auto; display:flex; flex-direction:column; height:180px; border-top:1px solid var(--axis); border-bottom:1px solid var(--axis); gap:0; min-width:0; }
.bar-row { flex:1 1 0; display:flex; align-items:flex-end; gap:.35rem; min-width:0; }
.bar-row.neg { align-items:flex-start; }
.bar { flex:1 1 0; background:var(--bar-color); border-radius:2px; min-width:2px; outline:none; transition:filter .15s; }
.bar-pos { background:var(--bar-color); }
.bar-neg { background:var(--bar-neg); }
.bar:hover { filter:brightness(1.12); }
.bar:focus-visible { box-shadow:0 0 0 2px #ffffff40, 0 0 0 4px #2d6cdf90; }
.zero-line { height:1px; background:var(--axis); opacity:.6; }
.labels-row { display:flex; gap:.35rem; font-size:.6rem; color:#aaa; margin-top:.25rem; min-width:0; }
.labels-row .lbl { flex:1 1 0; text-align:center; white-space:nowrap; overflow:hidden; text-overflow:ellipsis; min-width:0; }
.labels-row .lbl.skip { visibility:hidden; }
.nodata { opacity:.7; font-size:.8rem; }
.chart-loading-overlay { position:absolute; inset:0; background:rgba(18,18,20,.6); display:flex; flex-direction:column; align-items:center; justify-content:center; gap:.6rem; backdrop-filter:blur(2px); border-radius:.35rem; animation:fadeIn .15s ease; }
.spinner { width:34px; height:34px; position:relative; }
.spinner .seg { position:absolute; inset:0; border:3px solid transparent; border-top-color:var(--bar-color); border-radius:50%; animation:spin 1s linear infinite; }
.spinner .seg.b { animation-delay:.12s; }
.spinner .seg.c { animation-delay:.24s; }
.spinner .seg.d { animation-delay:.36s; }
.loading-text { font-size:.65rem; opacity:.75; letter-spacing:.05em; text-transform:uppercase; }
@@keyframes spin { 0% { transform:rotate(0deg); opacity:1; } 70% { opacity:.25; } 100% { transform:rotate(360deg); opacity:1; } }
@@keyframes fadeIn { from { opacity:0; } to { opacity:1; }
}
.chart-skeleton {
    display:flex;
    flex-direction:column;
    gap:.4rem;
    height:180px;
    justify-content:flex-end;
    position:relative;
}

.chart-skeleton .skeleton-bar {
    width:16px;
    background:linear-gradient(180deg,#2a3036 0%,#1b1f23 100%);
    border-radius:3px;
    height:60px;
    animation:pulse 1.1s ease-in-out infinite;
    opacity:.65;
    display:inline-block;
    margin-right:.35rem;
}

.chart-skeleton .skeleton-labels {
    display:flex;
    gap:.35rem;
    margin-top:.4rem;
}

.chart-skeleton .skeleton-label {
    width:16px;
    height:7px;
    background:#262b30;
    border-radius:2px;
    animation:pulse 1.4s ease-in-out infinite;
    opacity:.4;
}

.chart-skeleton > .skeleton-bar:last-child { margin-right:0; }

@@keyframes pulse {
    0% { filter:brightness(0.9); }
    50% { filter:brightness(1.25); }
    100% { filter:brightness(0.9); }
}

.visually-hidden {
    position:absolute;
    width:1px;
    height:1px;
    padding:0;
    margin:-1px;
    overflow:hidden;
    clip:rect(0 0 0 0);
    white-space:nowrap;
    border:0;
}
</style>
