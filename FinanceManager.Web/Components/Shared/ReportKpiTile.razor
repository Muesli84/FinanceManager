@using FinanceManager.Domain.Reports
@using FinanceManager.Application.Reports
@using FinanceManager.Shared.Dtos

<div class="report-kpi @(Clickable ? "clickable" : null)" @onclick="HandleClick">
    @if (DisplayMode == HomeKpiDisplayMode.TotalOnly)
    {
        <div class="kpi-amount-box kpi-kind-@KindClass">
            <svg class="kpi-bg-ico"><use href="@IconHref" /></svg>
            <div class="kpi-amount center">@Amount.ToString("N2")</div>
        </div>
    }
    else if (DisplayMode == HomeKpiDisplayMode.TotalWithComparisons)
    {
            var values = new List<(string Label, decimal Amount)>();
            if (Year.HasValue) { values.Add(("Year", Year.Value)); }
            if (Prev.HasValue) { values.Add(("Prev", Prev.Value)); }
            values.Add(("Now", Amount));
            var maxAbs = values.Select(v => Math.Abs(v.Amount)).DefaultIfEmpty(0m).Max();
            var scale = maxAbs == 0 ? 0 : 40m / maxAbs;
        
        <div class="mini-chart split">
            <div class="bars split">
                @foreach (var v in values)
                {
                    var posH = v.Amount > 0 ? (int)Math.Round((double)(v.Amount * scale)) : 0;
                    var negH = v.Amount < 0 ? (int)Math.Round((double)(-v.Amount * scale)) : 0;
                    <div class="bar-wrap split" title="@($"{v.Label}: {v.Amount:N2}")">
                        <div class="bar-top"><div class="bar-inner pos" style=@($"height:{posH}px")></div></div>
                        <div class="bar-bottom"><div class="bar-inner neg" style=@($"height:{negH}px")></div></div>
                    </div>
                }
            </div>
        </div>
    }
    else
    {
            var ordered = (Series ?? Array.Empty<Point>()).OrderBy(x => x.Date).ToList();
            var maxAbs = ordered.Select(x => Math.Abs(x.Amount)).DefaultIfEmpty(0m).Max();
            var scale = maxAbs == 0 ? 0 : 40m / maxAbs;
        <div class="mini-chart split">
            <div class="bars split">
                @foreach (var p in ordered)
                {
                    var posH = p.Amount > 0 ? (int)Math.Round((double)(p.Amount * scale)) : 0;
                    var negH = p.Amount < 0 ? (int)Math.Round((double)(-p.Amount * scale)) : 0;
                    <div class="bar-wrap split" title="@($"{p.Date:yyyy-MM-dd} {p.Amount:N2}")">
                        <div class="bar-top"><div class="bar-inner pos" style=@($"height:{posH}px")></div></div>
                        <div class="bar-bottom"><div class="bar-inner neg" style=@($"height:{negH}px")></div></div>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public HomeKpiDisplayMode DisplayMode { get; set; }
    [Parameter] public decimal Amount { get; set; }
    [Parameter] public decimal? Prev { get; set; }
    [Parameter] public decimal? Year { get; set; }
    [Parameter] public IReadOnlyList<Point>? Series { get; set; }
    [Parameter] public bool Clickable { get; set; }
    [Parameter] public EventCallback OnClick { get; set; }
    [Parameter] public int PrimaryKind { get; set; }

    public sealed record Point(DateTime Date, decimal Amount);

    private async Task HandleClick()
    {
        if (Clickable && OnClick.HasDelegate)
        {
            await OnClick.InvokeAsync();
        }
    }

    private string IconHref => $"/icons/sprite.svg#{ResolveIconId(PrimaryKind)}";
    private string KindClass => ResolveKindClass(PrimaryKind);

    private static string ResolveIconId(int kind)
    {
        return kind switch
        {
            0 => "postings",   // Bank ? postings (fallback)
            1 => "groups",     // Contact
            2 => "save",       // SavingsPlan
            3 => "postings",   // Security
            _ => "postings"
        };
    }

    private static string ResolveKindClass(int kind)
    {
        return kind switch
        {
            0 => "bank",
            1 => "contacts",
            2 => "savings",
            3 => "securities",
            _ => "postings"
        };
    }
}

<style>
.report-kpi { display:flex; flex:1; flex-direction:column; min-height:0; }
.report-kpi.clickable { cursor:pointer; }

/* TotalOnly: icon centered, number at bottom centered */
.kpi-amount-box{ position:relative; flex:1; display:flex; flex-direction:column; width:100%; height:100%; min-height:0; }
.kpi-amount.center { display:block; text-align:center; font-size:1.25rem; font-weight:700; margin-top:auto; margin-bottom:.4rem; position:relative; z-index:1; }
.kpi-bg-ico{ position:absolute; left:50%; top:50%; transform:translate(-50%,-50%); width:72px; height:72px; opacity:.08; pointer-events:none; z-index:0; fill:currentColor; stroke:currentColor; }
.kpi-kind-savings .kpi-bg-ico{ color:#2d9d4f; }
.kpi-kind-contacts .kpi-bg-ico{ color:#8fb0ff; }
.kpi-kind-securities .kpi-bg-ico{ color:#d4a72c; }
.kpi-kind-bank .kpi-bg-ico{ color:#6aa84f; }

/* Mini-Chart mit Baseline in der Mitte */
.mini-chart { border:1px solid var(--border); padding:.4rem .5rem; border-radius:.4rem; background:#141618; }
.mini-chart.split .bars.split { position:relative; display:flex; align-items:stretch; gap:.35rem; height:110px; }
.mini-chart.split .bars.split::after { content:""; position:absolute; left:0; right:0; top:50%; height:1px; background:rgba(200,200,200,.15); }
.bar-wrap.split { flex:1 1 0; display:flex; flex-direction:column; align-items:center; justify-content:stretch; }
.bar-top, .bar-bottom { height:50%; width:100%; display:flex; align-items:flex-end; justify-content:center; }
.bar-bottom { align-items:flex-start; }
.bar-inner { width:10px; border-radius:2px; background:#2d6cdf; }
.bar-inner.pos { background:#2d6cdf; }
.bar-inner.neg { background:#c94; }
</style>