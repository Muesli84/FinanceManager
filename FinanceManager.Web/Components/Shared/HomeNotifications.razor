@using System.Net.Http.Json
@inject HttpClient Http
@inject FinanceManager.Application.ICurrentUserService CurrentUser
@inject Microsoft.Extensions.Localization.IStringLocalizer<FinanceManager.Web.Components.Shared.HomeNotifications> L

@if (CurrentUser.IsAuthenticated && _items.Count > 0)
{
    <div class="notif-container" role="region" aria-label="@L["Notifications"]">
        <h4 class="notif-title">@L["Notifications"]</h4>
        @foreach (var n in _items)
        {
            var kind = GetKindClass(n.Type);
            <div class="notif-item @kind">
                <div class="notif-body">
                    <div class="notif-icon"><svg><use href="/icons/sprite.svg#info" /></svg></div>
                    <div class="notif-content">
                        @if (!string.IsNullOrWhiteSpace(n.Title))
                        {
                            <div class="notif-head">@n.Title</div>
                        }
                        <div class="notif-text">@n.Message</div>
                        <div class="notif-meta">@L["ScheduledOn"]: @n.ScheduledDateUtc.ToLocalTime().ToString("d")</div>
                    </div>
                </div>
                <button class="notif-dismiss" title="@L["Dismiss"]" @onclick="(() => DismissAsync(n.Id))">
                    <svg class="ico"><use href="/icons/sprite.svg#close" /></svg>
                </button>
            </div>
        }
    </div>
}

@code {
    private List<FinanceManager.Shared.Dtos.NotificationDto> _items = new();

    protected override async Task OnInitializedAsync()
    {
        if (CurrentUser.IsAuthenticated)
        {
            await ReloadAsync();
        }
    }

    private async Task ReloadAsync()
    {
        try
        {
            var list = await Http.GetFromJsonAsync<List<FinanceManager.Shared.Dtos.NotificationDto>>("/api/notifications");
            _items = (list ?? new()).Where(n => n.Target == 0 /* HomePage */).ToList();
        }
        catch { }
    }

    private async Task DismissAsync(Guid id)
    {
        try
        {
            var resp = await Http.PostAsync($"/api/notifications/{id}/dismiss", null);
            if (resp.IsSuccessStatusCode)
            {
                _items.RemoveAll(x => x.Id == id);
            }
        }
        catch { }
        StateHasChanged();
    }

    private static string GetKindClass(int type)
        => type switch
        {
            2 => "warn", // SystemAlert
            _ => "info"   // MonthlyReminder/EventDriven
        };
}

<style>
.notif-container{border:1px solid #334;background:#182028;border-radius:.6rem;margin:.5rem 0 1rem 0;padding:.5rem .6rem;}
.notif-title{margin:.1rem 0 .35rem 0;font-size:.9rem;opacity:.9}
.notif-item{position:relative;display:flex;align-items:stretch;justify-content:space-between;border:1px solid #2a323a;background:#0f1419;border-radius:.5rem;margin:.35rem 0;}
.notif-item.info{border-color:#29425f;background:#0f1419;}
.notif-item.warn{border-color:#5f3a29;background:#19120f;}
.notif-body{display:flex;gap:.6rem;padding:.55rem .7rem;}
.notif-icon svg{width:18px;height:18px;fill:#8fb0ff;margin-top:.2rem}
.notif-item.warn .notif-icon svg{fill:#d4a72c}
.notif-head{font-weight:600;margin-bottom:.15rem}
.notif-text{white-space:pre-wrap}
.notif-meta{opacity:.7;font-size:.75rem;margin-top:.25rem}
.notif-dismiss{align-self:center;margin:.3rem .35rem;background:transparent;border:0;cursor:pointer}
.notif-dismiss .ico{width:14px;height:14px;fill:#a66}
</style>
