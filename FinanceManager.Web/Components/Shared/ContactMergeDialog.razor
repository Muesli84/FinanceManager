@using System.ComponentModel.DataAnnotations
@using FinanceManager.Shared.Dtos
@inject HttpClient Http
@rendermode InteractiveServer

@if (Visible)
{
    <div class="modal-backdrop">
        <div class="modal">
            <div style="font-size:.7rem;opacity:.6;">(Merge Dialog geladen)</div>
            <h3>Kontakt verschmelzen</h3>
            <p>Wähle den Zielkontakt. Dieser bleibt bestehen; der aktuelle wird entfernt und seine Daten (Aliase, Verknüpfungen) werden übertragen.</p>

            <div class="field">
                <input type="text" @bind="filter" @bind:after="OnFilterChanged" placeholder="Filter..." />
            </div>

            <div class="result-list">
                @if (_loading)
                {
                    <div class="loading">Lade...</div>
                }
                else
                {
                    @foreach (var c in _filtered)
                    {
                        <div class="row @(c.Id == SelectedId ? "selected" : "")"
                             @onclick="() => Select(c.Id)">
                            <span>@c.Name</span>
                            <small>@c.Type</small>
                        </div>
                    }
                    @if (_filtered.Count == 0)
                    {
                        <div class="empty">Keine Treffer.</div>
                    }
                }
            </div>

            @if (!string.IsNullOrEmpty(Error))
            {
                <div class="error">@Error</div>
            }

            <div class="actions">
                <button type="button" class="icon-btn" @onclick="Confirm" disabled="@(SelectedId==Guid.Empty || Busy)">
                    Zusammenführen
                </button>
                <button type="button" class="icon-btn" @onclick="Cancel" disabled="@Busy">
                    Abbrechen
                </button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool Visible { get; set; }
    [Parameter] public Guid CurrentContactId { get; set; }
    [Parameter] public string CurrentContactType { get; set; } = string.Empty;
    [Parameter] public EventCallback<Guid> OnConfirm { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private List<ContactOption> _all = new();
    private List<ContactOption> _filtered = new();
    private string filter = string.Empty;
    private bool _loading;
    private bool Busy;
    private string? Error;
    private Guid SelectedId;

    protected override async Task OnParametersSetAsync()
    {
        if (Visible)
        {
            await EnsureLoadedAsync();
            ApplyFilter();
        }
    }

    private async Task EnsureLoadedAsync()
    {
        if (_all.Count > 0) { return; }
        _loading = true;
        try
        {
            // Große Menge: gefiltert nur nach Type falls Bank-Kontakt
            string typeConstraint = string.Equals(CurrentContactType, "Bank", StringComparison.OrdinalIgnoreCase)
                ? "&type=Bank&all=true"
                : "&all=true";

            var resp = await Http.GetAsync($"/api/contacts?skip=0&take=1{typeConstraint}");
            // take=1 wird durch all=true überschrieben -> Server setzt hartes Limit
            if (resp.IsSuccessStatusCode)
            {
                var list = await resp.Content.ReadFromJsonAsync<List<ContactDto>>() ?? new();
                _all = list
                    .Where(c => c.Id != CurrentContactId)
                    .Select(c => new ContactOption(c.Id, c.Name, c.Type.ToString()))
                    .OrderBy(c => c.Name)
                    .ToList();
            }
        }
        catch(Exception ex)
        {
            
        }
        finally
        {
            _loading = false;
        }
    }

    private void OnFilterChanged()
    {
        ApplyFilter();
    }

    private void ApplyFilter()
    {
        if (string.IsNullOrWhiteSpace(filter))
        {
            _filtered = _all;
        }
        else
        {
            _filtered = _all
                .Where(c => c.Name.Contains(filter, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        if (!_filtered.Any(c => c.Id == SelectedId))
        {
            SelectedId = Guid.Empty;
        }
    }

    private void Select(Guid id)
    {
        SelectedId = id;
    }

    private async Task Confirm()
    {
        if (SelectedId == Guid.Empty)
        {
            return;
        }
        Error = null;
        Busy = true;
        try
        {
            await OnConfirm.InvokeAsync(SelectedId);
        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }
        Busy = false;
    }

    private async Task Cancel()
    {
        await OnCancel.InvokeAsync();
    }

    private sealed record ContactOption(Guid Id, string Name, string Type);

}