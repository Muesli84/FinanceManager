@page "/contacts"
@using FinanceManager.Application.Contacts
@using FinanceManager.Shared.Dtos
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject HttpClient Http
@inject FinanceManager.Application.ICurrentUserService CurrentUser
@inject IJSRuntime JS
@inject Microsoft.Extensions.Localization.IStringLocalizer<FinanceManager.Web.Components.Pages.Contacts> Localizer
<PageTitle>@Localizer["PageTitle"]</PageTitle>

<div class="page-contacts-full">
    <h1>@Localizer["Title"]</h1>

    @if (!_loaded)
    {
        <p>@Localizer["Loading"]</p>
    }
    else if (!CurrentUser.IsAuthenticated)
    {
        <p>@Localizer["PleaseLogin"]</p>
    }
    else
    {
        <div class="action-bar" style="gap:.5rem;align-items:center;">
            <button @onclick="CreateNew" aria-label='@Localizer["BtnNew"]' title='@Localizer["BtnNew"]' class="icon-btn">
                <svg><use href="/icons/sprite.svg#plus" /></svg>
            </button>
            <input class="filter-input"
                   placeholder='@Localizer["FilterPlaceholder"]'
                   @bind="_filter"
                   @bind:after="OnFilterAfterChanged" />
        </div>

        <table class="fm-table contacts-table">
            <thead>
            <tr>
                <th>@Localizer["Th_Name"]</th>
                <th>@Localizer["Th_Group"]</th>
                <th>@Localizer["Th_Type"]</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var c in _contacts)
            {
                <tr style="cursor:pointer;" @onclick="() => OpenDetail(c.Id)">
                    <td>@c.Name</td>
                    <td>@(string.IsNullOrEmpty(c.CategoryName) ? "-" : c.CategoryName)</td>
                    <td>@c.Type</td>
                </tr>
            }
            @if (_contacts.Count == 0 && !_loadingMore)
            {
                <tr><td colspan="3" style="opacity:.6;">@Localizer["NoContacts"]</td></tr>
            }
            </tbody>
        </table>

        @if (_loadingMore)
        {
            <div style="opacity:.6; font-size:.8rem; margin-top:.5rem;">@Localizer["Loading"]</div>
        }

        @if (!_allLoaded)
        {
            <div @ref="_sentinel" class="infinite-sentinel" aria-hidden="true"></div>
        }
        else if (_contacts.Count > 0)
        {
            <div class="end-of-list">@Localizer["EndOfList"]</div>
        }
    }
</div>

@code {
    private List<ContactVm> _contacts = new();
    private bool _loaded;
    private bool _loadingMore;
    private bool _allLoaded;
    private const int PageSize = 50;

    private ElementReference _sentinel;
    private DotNetObjectReference<Contacts>? _selfRef;
    private bool _observerAttached;

    private string _filter = string.Empty;
    private CancellationTokenSource? _filterCts;

    // Kategorien
    private Dictionary<Guid, string> _categoryNames = new();

    protected override async Task OnInitializedAsync()
    {
        if (CurrentUser.IsAuthenticated)
        {
            await LoadCategoriesAsync();
            await LoadMoreAsync();
        }
        _loaded = true;
    }

    private async Task LoadCategoriesAsync()
    {
        // Kategorien einmalig laden
        var resp = await Http.GetAsync("/api/contact-categories");
        if (resp.IsSuccessStatusCode)
        {
            var list = await resp.Content.ReadFromJsonAsync<List<ContactCategoryDto>>() ?? new();
            _categoryNames = list.ToDictionary(c => c.Id, c => c.Name);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_observerAttached || !_loaded || !CurrentUser.IsAuthenticated || _allLoaded)
        {
            return;
        }
        if (_sentinel.Context is null)
        {
            return;
        }
        try
        {
            _selfRef ??= DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("fmInfinite.observe", _sentinel, _selfRef, null);
            _observerAttached = true;
        }
        catch (JSException)
        {
            await Task.Yield();
            StateHasChanged();
        }
    }

    [JSInvokable]
    public async Task LoadMoreFromJs()
    {
        await LoadMoreAsync();
        if (_allLoaded)
        {
            StateHasChanged();
        }
        else
        {
            await JS.InvokeVoidAsync("fmInfinite.refresh");
        }
    }

    private async Task LoadMoreAsync()
    {
        if (_loadingMore || _allLoaded)
        {
            return;
        }

        _loadingMore = true;

        var filterPart = string.IsNullOrWhiteSpace(_filter)
            ? string.Empty
            : $"&q={Uri.EscapeDataString(_filter)}";

        var resp = await Http.GetAsync($"/api/contacts?skip={_contacts.Count}&take={PageSize}{filterPart}");
        if (resp.IsSuccessStatusCode)
        {
            var more = await resp.Content.ReadFromJsonAsync<List<ContactDto>>() ?? new();
            if (more.Count < PageSize)
            {
                _allLoaded = true;
            }

            foreach (var dto in more)
            {
                _contacts.Add(new ContactVm
                {
                    Id = dto.Id,
                    Name = dto.Name,
                    Type = dto.Type.ToString(),
                    CategoryName = dto.CategoryId != null && _categoryNames.TryGetValue(dto.CategoryId.Value, out var catName)
                        ? catName
                        : string.Empty
                });
            }
        }

        _loadingMore = false;
        StateHasChanged();
    }

    private void CreateNew() => OpenDetail(null);
    private void OpenDetail(Guid? id)
    {
        var url = id == null ? "/contacts/new" : $"/contacts/{id}";
        Navigation.NavigateTo(url);
    }
    private void OpenDetail(Guid id) => Navigation.NavigateTo($"/contacts/{id}");

    private async void OnFilterAfterChanged()
    {
        _filterCts?.Cancel();
        var cts = new CancellationTokenSource();
        _filterCts = cts;
        try
        {
            await Task.Delay(300, cts.Token); // debounce
        }
        catch (TaskCanceledException)
        {
            return;
        }
        await ResetAndReloadAsync();
    }

    private async Task ResetAndReloadAsync()
    {
        _loadingMore = false;
        _allLoaded = false;
        _contacts.Clear();
        _observerAttached = false;
        await LoadMoreAsync();
    }

    private sealed class ContactVm
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Type { get; set; } = string.Empty;
        public string CategoryName { get; set; } = string.Empty;
    }

    private sealed class ContactCategoryDto
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }
}
