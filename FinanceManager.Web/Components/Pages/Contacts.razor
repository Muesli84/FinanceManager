@page "/contacts"
@rendermode InteractiveServer
@inject HttpClient Http
@inject NavigationManager Navigation
@inject FinanceManager.Application.ICurrentUserService CurrentUser
@inject IJSRuntime JS
@using FinanceManager.Web.Components.Shared
@inject Microsoft.Extensions.Localization.IStringLocalizer<FinanceManager.Web.Components.Pages.Contacts> Localizer
@using FinanceManager.Web.ViewModels
@inject IServiceProvider Services
<PageTitle>@Localizer["PageTitle"]</PageTitle>

<Ribbon TTabEnum="Contacts.TabId" Tabs="_tabs" ActiveTab="_activeTab" ActiveTabChanged="OnActiveTabChanged" />

<h1>@Localizer["Title"]</h1>

@if (!(_vm?.Loaded ?? false))
{
    <p>@Localizer["Loading"]</p>
}
else if (!_vm!.IsAuthenticated)
{
    <p>@Localizer["PleaseLogin"]</p>
}
else
{
    <div style="margin-bottom:.65rem;display:flex;gap:.6rem;flex-wrap:wrap;align-items:center;">
        <input class="filter-input"
               placeholder='@Localizer["FilterPlaceholder"]'
               @bind="_filter"
               @bind:after="OnFilterAfterChanged"
               style="min-width:260px;" />
    </div>

    <table class="fm-table contacts-table">
        <thead>
        <tr>
            <th>@Localizer["Th_Name"]</th>
            <th>@Localizer["Th_Group"]</th>
            <th>@Localizer["Th_Type"]</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var c in _vm.Contacts)
        {
            <tr style="cursor:pointer;" @onclick="() => OpenDetail(c.Id)">
                <td>@c.Name</td>
                <td>@(string.IsNullOrEmpty(c.CategoryName) ? "-" : c.CategoryName)</td>
                <td>@c.Type</td>
            </tr>
        }
        @if (_vm.Contacts.Count == 0 && !_vm.IsLoading)
        {
            <tr><td colspan="3" style="opacity:.6;">@Localizer["NoContacts"]</td></tr>
        }
        </tbody>
    </table>

    @if (_vm.IsLoading)
    {
        <div style="opacity:.6; font-size:.8rem; margin-top:.5rem;">@Localizer["Loading"]</div>
    }

    @if (!_vm.AllLoaded)
    {
        <div @ref="_sentinel" class="infinite-sentinel" aria-hidden="true"></div>
    }
    else if (_vm.Contacts.Count > 0)
    {
        <div class="end-of-list">@Localizer["EndOfList"]</div>
    }
}

@code {
    private enum TabId { Contacts }
    private List<Ribbon<TabId>.RibbonTab<TabId>> _tabs = new();
    private TabId _activeTab = TabId.Contacts;
    private Task OnActiveTabChanged(TabId id){ _activeTab = id; return Task.CompletedTask; }

    private ContactsViewModel? _vm;

    private ElementReference _sentinel;
    private DotNetObjectReference<Contacts>? _selfRef;
    private bool _observerAttached;

    private string _filter = string.Empty;
    private CancellationTokenSource? _filterCts;

    protected override async Task OnInitializedAsync()
    {
        if (_vm is not null)
        {
            _vm.StateChanged -= VmOnStateChanged;
            _vm.AuthenticationRequired -= VmOnAuthenticationRequired;
            await _vm.DisposeAsync();
        }
        _vm = ActivatorUtilities.CreateInstance<ContactsViewModel>(Services);
        _vm.StateChanged += VmOnStateChanged;
        _vm.AuthenticationRequired += VmOnAuthenticationRequired;

        await _vm.InitializeAsync();
        BuildRibbon();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_observerAttached || !(_vm?.Loaded ?? false) || !_vm!.IsAuthenticated || _vm.AllLoaded)
        {
            return;
        }
        if (_sentinel.Context is null)
        {
            return;
        }
        try
        {
            _selfRef ??= DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("fmInfinite.observe", _sentinel, _selfRef, null);
            _observerAttached = true;
        }
        catch (JSException)
        {
            await Task.Yield();
            StateHasChanged();
        }
    }

    [JSInvokable]
    public async Task LoadMoreFromJs()
    {
        if (_vm is null) { return; }
        await _vm.LoadMoreAsync();
        if (_vm.AllLoaded)
        {
            StateHasChanged();
        }
        else
        {
            await JS.InvokeVoidAsync("fmInfinite.refresh");
        }
    }

    private void VmOnAuthenticationRequired(object? sender, string? returnUrl)
    {
        var back = Navigation.ToBaseRelativePath(Navigation.Uri);
        var url = string.IsNullOrWhiteSpace(back) ? "/login" : $"/login?returnUrl={Uri.EscapeDataString(back)}";
        Navigation.NavigateTo(url, forceLoad: true);
    }

    private void VmOnStateChanged(object? sender, EventArgs e)
    {
        BuildRibbon();
        _ = InvokeAsync(StateHasChanged);
    }

    private void BuildRibbon()
    {
        var groupsDto = _vm?.GetRibbon(Localizer) ?? new List<UiRibbonGroup>();
        var groups = new List<Ribbon<TabId>.RibbonGroup>();
        foreach (var g in groupsDto)
        {
            var items = new List<Ribbon<TabId>.RibbonItem>();
            foreach (var it in g.Items)
            {
                var size = it.Size == UiRibbonItemSize.Large ? Ribbon<TabId>.RibbonItemSize.Large : Ribbon<TabId>.RibbonItemSize.Small;
                items.Add(new Ribbon<TabId>.RibbonItem
                {
                    Label = it.Label,
                    IconSvg = it.IconSvg,
                    Size = size,
                    Disabled = it.Disabled,
                    Callback = () => { HandleRibbonAction(it.Action); return Task.CompletedTask; }
                });
            }
            groups.Add(new Ribbon<TabId>.RibbonGroup { Title = g.Title, Items = items });
        }
        _tabs = new()
        {
            new Ribbon<TabId>.RibbonTab<TabId>
            {
                Id = TabId.Contacts,
                Title = Localizer["Ribbon_Tab_Contacts"],
                Groups = groups
            }
        };
        StateHasChanged();
    }

    private void HandleRibbonAction(string action)
    {
        switch (action)
        {
            case "New":
                CreateNew();
                break;
            case "Reload":
                _ = _vm?.ResetAndReloadAsync();
                break;
            case "ClearFilter":
                _filter = string.Empty;
                _ = _vm?.SetFilterAsync(_filter);
                break;
        }
    }

    private void CreateNew() => OpenDetail(null);
    private void OpenDetail(Guid? id)
    {
        var url = id == null ? "/contacts/new" : $"/contacts/{id}";
        Navigation.NavigateTo(url);
    }
    private void OpenDetail(Guid id) => Navigation.NavigateTo($"/contacts/{id}");

    private async void OnFilterAfterChanged()
    {
        _filterCts?.Cancel();
        var cts = new CancellationTokenSource();
        _filterCts = cts;
        try
        {
            await Task.Delay(300, cts.Token);
        }
        catch (TaskCanceledException)
        {
            return;
        }
        await (_vm?.SetFilterAsync(_filter) ?? Task.CompletedTask);
        BuildRibbon();
    }
}
