@page "/contacts"
@using FinanceManager.Application.Contacts
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject HttpClient Http
@inject FinanceManager.Application.ICurrentUserService CurrentUser
@inject IJSRuntime JS

<div class="page-contacts-full">
    <h1>Contacts</h1>

    @if (!_loaded)
    {
        <p>Loading...</p>
    }
    else if (!CurrentUser.IsAuthenticated)
    {
        <p>Please login.</p>
    }
    else
    {
        <div class="action-bar">
            <button @onclick="CreateNew" aria-label="New Contact" title="New Contact" class="icon-btn">
                <svg><use href="/icons/sprite.svg#plus" /></svg>
            </button>
        </div>

        <table class="fm-table contacts-table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Type</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var c in _contacts)
                {
                    <tr style="cursor:pointer;" @onclick="() => OpenDetail(c.Id)">
                        <td>@c.Name</td>
                        <td>@c.Type</td>
                    </tr>
                }
                @if (_contacts.Count == 0)
                {
                    <tr><td colspan="2" style="opacity:.6;">No contacts.</td></tr>
                }
            </tbody>
        </table>

        @if (!_allLoaded)
        {
            <div @ref="_sentinel" class="infinite-sentinel" aria-hidden="true"></div>
        }
        else
        {
            <div class="end-of-list">Ende</div>
        }
    }
</div>

@code {
    private List<ContactVm> _contacts = new();
    private bool _loaded;
    private bool _loadingMore;
    private bool _allLoaded;
    private const int PageSize = 50;

    private ElementReference _sentinel;
    private DotNetObjectReference<Contacts>? _selfRef;
    private bool _observerAttached;

    protected override async Task OnInitializedAsync()
    {
        if (CurrentUser.IsAuthenticated)
        {
            await LoadMoreAsync();
        }
        _loaded = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_observerAttached || !_loaded || !CurrentUser.IsAuthenticated || _allLoaded)
        {
            return;
        }

        try
        {
            _selfRef ??= DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("fmInfinite.observe", _sentinel, _selfRef, null);
            _observerAttached = true;
        }
        catch (JSException)
        {
            // W‰hrend Prerender: JS noch nicht verf¸gbar -> beim n‰chsten Render erneut versuchen
            // Optional erneutes Render anstoﬂen:
            await Task.Yield();
            StateHasChanged();
        }
    }

    [JSInvokable]
    public async Task LoadMoreFromJs()
    {
        await LoadMoreAsync();
        if (_allLoaded)
        {
            StateHasChanged();
        }
        else
        {
            await JS.InvokeVoidAsync("fmInfinite.refresh");
        }
    }

    private async Task LoadMoreAsync()
    {
        if (_loadingMore || _allLoaded)
        {
            return;
        }

        _loadingMore = true;
        var resp = await Http.GetAsync($"/api/contacts?skip={_contacts.Count}&take={PageSize}");
        if (resp.IsSuccessStatusCode)
        {
            var more = await resp.Content.ReadFromJsonAsync<List<ContactDto>>() ?? new();
            if (more.Count < PageSize)
            {
                _allLoaded = true;
            }

            _contacts.AddRange(more.Select(dto => new ContactVm
            {
                Id = dto.Id,
                Name = dto.Name,
                Type = dto.Type.ToString()
            }));
        }

        _loadingMore = false;
    }

    private void CreateNew() => OpenDetail(null);
    private void OpenDetail(Guid? id)
    {
        var url = id == null ? "/contacts/new" : $"/contacts/{id}";
        Navigation.NavigateTo(url);
    }
    private void OpenDetail(Guid id) => Navigation.NavigateTo($"/contacts/{id}");

    private sealed class ContactVm
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Type { get; set; } = string.Empty;
    }
}
