@page "/savings-plan-categories/new"
@page "/savings-plan-categories/{Id:guid}"
@rendermode InteractiveServer
@using FinanceManager.Shared.Dtos
@inject NavigationManager Navigation
@inject IServiceProvider Services
@using FinanceManager.Web.Components.Shared
@using FinanceManager.Web.ViewModels
@using Microsoft.Extensions.DependencyInjection
@inject Microsoft.Extensions.Localization.IStringLocalizer<FinanceManager.Web.Components.Pages.SavingsPlanCategoryDetail> Localizer
<PageTitle>@Localizer["PageTitle"]</PageTitle>

<Ribbon TTabEnum="SavingsPlanCategoryDetail.TabId" Tabs="_tabs" ActiveTab="_activeTab" ActiveTabChanged="OnActiveTabChanged" />

<h3>@((_vm?.IsEdit ?? false) ? Localizer["TitleEdit"] : Localizer["TitleNew"])</h3>

<EditForm Model="_vm!.Model" OnValidSubmit="SaveAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        <label>@Localizer["LabelName"]</label>
        <InputText @bind-Value="_vm!.Model.Name" />
        <ValidationMessage For="()=>_vm!.Model.Name" />
    </div>
    @if (!string.IsNullOrWhiteSpace(_vm?.Error))
    {
        <div class="error" style="margin-top:.5rem;">@_vm!.Error</div>
    }
</EditForm>

@code {
    [Parameter] public Guid? Id { get; set; }
    private SavingsPlanCategoryDetailViewModel? _vm;

    // Ribbon state
    private enum TabId { SavingsPlanCategory }
    private List<Ribbon<TabId>.RibbonTab<TabId>> _tabs = new();
    private TabId _activeTab = TabId.SavingsPlanCategory;
    private Task OnActiveTabChanged(TabId id){ _activeTab = id; return Task.CompletedTask; }

    private void RebuildRibbon()
     {
        var groupsDto = _vm?.GetRibbon(Localizer) ?? new List<UiRibbonGroup>();
        var groups = new List<Ribbon<TabId>.RibbonGroup>();
        foreach (var g in groupsDto)
        {
            var items = new List<Ribbon<TabId>.RibbonItem>();
            foreach (var it in g.Items)
            {
                var size = it.Size == UiRibbonItemSize.Large ? Ribbon<TabId>.RibbonItemSize.Large : Ribbon<TabId>.RibbonItemSize.Small;
                items.Add(new Ribbon<TabId>.RibbonItem
                {
                    Label = it.Label,
                    IconSvg = it.IconSvg,
                    Size = size,
                    Disabled = it.Disabled,
                    Callback = () => { HandleRibbonAction(it.Action); return Task.CompletedTask; }
                });
            }
            groups.Add(new Ribbon<TabId>.RibbonGroup { Title = g.Title, Items = items });
        }
        _tabs = new()
        {
            new Ribbon<TabId>.RibbonTab<TabId>
            {
                Id = TabId.SavingsPlanCategory,
                Title = Localizer["PageTitle"],
                Groups = groups
            }
        };
        StateHasChanged();
     }

    protected override async Task OnParametersSetAsync()
    {
        if (_vm is null)
        {
            _vm = ActivatorUtilities.CreateInstance<SavingsPlanCategoryDetailViewModel>(Services);
            _vm.StateChanged += (_, __) => { RebuildRibbon(); _ = InvokeAsync(StateHasChanged); };
        }
        await _vm.InitializeAsync(Id);
        RebuildRibbon();
    }

    private async Task SaveAsync()
    {
        var ok = await _vm!.SaveAsync();
        if (ok)
        {
            Navigation.NavigateTo("/savings-plan-categories", true);
        }
        RebuildRibbon();
    }

    private async Task DeleteAsync()
    {
        var ok = await _vm!.DeleteAsync();
        if (ok)
        {
            Navigation.NavigateTo("/savings-plan-categories", true);
        }
        RebuildRibbon();
    }

    private void Back() => Navigation.NavigateTo("/savings-plan-categories");
    
    private void HandleRibbonAction(string action)
    {
        switch (action)
        {
            case "Back":
                Back();
                break;
            case "Save":
                _ = SaveAsync();
                break;
            case "Delete":
                _ = DeleteAsync();
                break;
        }
    }
}