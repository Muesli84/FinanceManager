@page "/reports/dashboard"
@rendermode InteractiveServer
@using System.Net.Http.Json
@using System.Web
@using FinanceManager.Domain
@using FinanceManager.Domain.Reports
@inject NavigationManager Nav
@inject HttpClient Http
@inject IServiceProvider Services
@inject Microsoft.Extensions.Localization.IStringLocalizer<FinanceManager.Web.Components.Pages.ReportDashboard> Localizer
@using FinanceManager.Web.Components.Shared
@using Microsoft.AspNetCore.Components
@using FinanceManager.Web.ViewModels

<PageTitle>@((_vm?.ActiveFavoriteId.HasValue ?? false) && !string.IsNullOrWhiteSpace(_vm?.FavoriteName) ? _vm!.FavoriteName : Localizer["PageTitle"])</PageTitle>

<Ribbon TTabEnum="ReportDashboard.TabId"
        Tabs="_tabs"
        ActiveTab="_activeTab"
        ActiveTabChanged="OnActiveTabChanged" />

<h2 style="margin-top:0;">@(string.IsNullOrWhiteSpace(_vm?.FavoriteName) ? Localizer["Heading"] : _vm!.FavoriteName.Trim())</h2>

@if(!_loaded)
{
    <p>@Localizer["Loading"]</p>
}
else
{
    @if(_editMode)
    {
        <div class="filters-panel">
            <div class="filter-group wide">
                <div class="group-title">@Localizer["FilterGroup_Data"]</div>
                <div class="row">
                    <label>@Localizer["Label_PostingKindMulti"]</label>
                    <div class="multi-kind-list">
                        @foreach(var kind in _postingKindValues)
                        {
                            var v = (int)kind;
                            var checkedAttr = _selectedKinds.Contains(v);
                            var label = Localizer[$"PostingKind_{kind}"];
                            <label class="mk-item"><input type="checkbox" value="@v" checked="@checkedAttr" @onchange="e => OnToggleKind(v, e.Value is bool b && b)" /> @label</label>
                        }
                    </div>
                </div>
                <div class="row">
                    <label>@Localizer["Label_Interval"]</label>
                    <select @bind="_interval" @bind:after="StateHasChanged">
                        @foreach (var iv in Enum.GetValues<ReportInterval>())
                        {
                            var label = Localizer[$"Interval_{iv}"];
                            <option value="@iv">@label</option>
                        }
                    </select>
                </div>
                <div class="row inline month-row">
                    <label>@Localizer["Label_AnalysisMonth"]</label>
                    <button type="button" class="icon-btn small" title="@Localizer["Button_PrevMonth"]" @onclick="PrevMonth"><svg><use href="/icons/sprite.svg#chevron-left"/></svg></button>
                    <input type="month" value="@_analysisMonthString" @onchange="OnAnalysisMonthChange" />
                    <button type="button" class="icon-btn small" title="@Localizer["Button_NextMonth"]" @onclick="NextMonth"><svg><use href="/icons/sprite.svg#chevron-right"/></svg></button>
                </div>
                <div class="row inline">
                    <label class="chk"><input type="checkbox" @bind="_includeCategory" @bind:after="OnIncludeCategoryChanged" /> @Localizer["Label_IncludeCategory"]</label>
                    <label class="take-label">@Localizer["Label_Take"] <input type="number" min="1" max="120" @bind="_take" class="take-input" /></label>
                </div>
            </div>
            <div class="filter-group">
                <div class="group-title">@Localizer["FilterGroup_Comparisons"]</div>
                <div class="row chk"><label><input type="checkbox" @bind="_comparePrevious" disabled="@(_interval == ReportInterval.AllHistory)" /> @Localizer["Label_ComparePrev"]</label></div>
                <div class="row chk"><label><input type="checkbox" @bind="_compareYear" disabled="@(_interval == ReportInterval.AllHistory)" /> @Localizer["Label_CompareYear"]</label></div>
            </div>
            <div class="filter-group">
                <div class="group-title">@Localizer["FilterGroup_Chart"]</div>
                <div class="row chk"><label><input type="checkbox" @bind="_showChart" disabled="@(_interval == ReportInterval.AllHistory)" /> @Localizer["Label_ShowChart"]</label></div>
            </div>
        </div>
    }

    <div class="result-box">
        @if(_vm?.IsBusy == true)
        {
            <div class="query-overlay">@Localizer["Loading"]</div>
        }
        @if(!(_vm?.IsBusy ?? false) && (_vm?.Points.Count ?? 0) == 0)
        {
            <div class="empty-info">@Localizer["NoData"]</div>
        }
        else if((_vm?.Points.Count ?? 0) > 0)
        {
            @if(_showChart && _interval != ReportInterval.AllHistory)
            {
                <div class="mini-chart" aria-label="@Localizer["Aria_Chart"]">
                    @{ var byPeriod = _vm!.GetChartByPeriod();
                       var max = byPeriod.Select(x=>Math.Abs(x.Sum)).DefaultIfEmpty(0m).Max();
                       var scale = max==0?0:70m/max; }
                    <div class="bars">
                        @foreach(var bp in byPeriod)
                        {
                            var h = bp.Sum>0 ? (int)Math.Round((double)(bp.Sum*scale)) : (int)Math.Round((double)(-bp.Sum*scale));
                            <div class="bar-wrap" title="@bp.PeriodStart.ToString("yyyy-MM-dd") @bp.Sum">
                                <div class="bar-inner @(bp.Sum>=0?"pos":"neg")" style="height:@(h)px"></div>
                            </div>
                        }
                    </div>
                </div>
            }
            <table class="fm-table report-table expandable">
                <thead>
                    <tr>
                        <th style="width:24px;"></th>
                        <th>@Localizer["Th_Group"]</th>
                        @if(ShowCategoryColumn){<th>@Localizer["Th_Category"]</th>}
                        @if(ShowPreviousColumns){<th class="th-prev" style="text-align:right;">@PreviousHeaderLabel</th><th class="th-prev" style="text-align:right;">@Localizer["Th_DeltaPrev"]</th>}
                        @if(_compareYear){<th class="th-year" style="text-align:right;">@YearHeaderLabel</th><th class="th-year" style="text-align:right;">@Localizer["Th_DeltaYear"]</th>}
                        <th class="th-current" style="text-align:right;">@Localizer["Th_Amount"]</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var top in _vm!.GetTopLevelRows())
                    {
                        var rowClass = ReportDashboardViewModel.IsNegative(top) ? "neg" : string.Empty;
                        var hasChildren = _vm!.HasChildren(top.GroupKey);
                        var expanded = hasChildren && _vm!.IsExpanded(top.GroupKey);
                        <tr class="@rowClass @(top.GroupKey.StartsWith("Type:")?"type-row": (top.GroupKey.StartsWith("Category:")?"category-row":"entity-row"))">
                            <td>
                                @if(hasChildren)
                                {
                                    <button type="button" class="toggle-btn" @onclick="(()=>_vm!.ToggleExpanded(top.GroupKey))" title="@(expanded?Localizer["Collapse"]:Localizer["Expand"])" aria-expanded="@expanded">
                                        <svg class="ico"><use href="/icons/sprite.svg#@(expanded?"chevron-down":"chevron-right")" /></svg>
                                    </button>
                                }
                            </td>
                            <td>@GetDisplayName(top)</td>
                            @if(ShowCategoryColumn){<td>@(string.IsNullOrWhiteSpace(top.CategoryName)?"-":top.CategoryName)</td>}
                            @if(ShowPreviousColumns){<td class="amt-prev" style="text-align:right;">@(top.PreviousAmount.HasValue? top.PreviousAmount.Value.ToString("N2") : "-")</td><td class="delta amt-prev" style="text-align:right;">@FormatDelta(top.Amount, top.PreviousAmount)</td>}
                            @if(_compareYear){<td class="amt-year" style="text-align:right;">@(top.YearAgoAmount.HasValue? top.YearAgoAmount.Value.ToString("N2") : "-")</td><td class="delta amt-year" style="text-align:right;">@FormatDelta(top.Amount, top.YearAgoAmount)</td>}
                            <td class="amt-current" style="text-align:right;">@top.Amount.ToString("N2")</td>
                        </tr>
                        @if(hasChildren && expanded)
                        {
                            foreach(var child in _vm!.GetChildRows(top.GroupKey))
                            {
                                var childCls = ReportDashboardViewModel.IsNegative(child) ? "neg" : string.Empty;
                                var childHasChildren = _vm!.HasChildren(child.GroupKey);
                                var childExpanded = childHasChildren && _vm!.IsExpanded(child.GroupKey);
                                <tr class="child-row @childCls @(child.GroupKey.StartsWith("Category:")?"category-row":"entity-row")">
                                    <td>
                                        @if(childHasChildren)
                                        {
                                            <button type="button" class="toggle-btn" @onclick="(()=>_vm!.ToggleExpanded(child.GroupKey))" title="@(childExpanded?Localizer["Collapse"]:Localizer["Expand"])" aria-expanded="@childExpanded">
                                                <svg class="ico"><use href="/icons/sprite.svg#@(childExpanded?"chevron-down":"chevron-right")" /></svg>
                                            </button>
                                        }
                                    </td>
                                    <td class="child-label">@GetDisplayName(child)</td>
                                    @if(ShowCategoryColumn){<td>@(string.IsNullOrWhiteSpace(child.CategoryName)?"-":child.CategoryName)</td>}
                                    @if(ShowPreviousColumns){<td class="amt-prev" style="text-align:right;">@(child.PreviousAmount.HasValue? child.PreviousAmount.Value.ToString("N2") : "-")</td><td class="delta amt-prev" style="text-align:right;">@FormatDelta(child.Amount, child.PreviousAmount)</td>}
                                    @if(_compareYear){<td class="amt-year" style="text-align:right;">@(child.YearAgoAmount.HasValue? child.YearAgoAmount.Value.ToString("N2") : "-")</td><td class="delta amt-year" style="text-align:right;">@FormatDelta(child.Amount, child.YearAgoAmount)</td>}
                                    <td class="amt-current" style="text-align:right;">@child.Amount.ToString("N2")</td>
                                </tr>
                                @if(childHasChildren && childExpanded)
                                {
                                    foreach(var grand in _vm!.GetChildRows(child.GroupKey))
                                    {
                                        var gCls = ReportDashboardViewModel.IsNegative(grand) ? "neg" : string.Empty;
                                        <tr class="child-row entity-row @gCls">
                                            <td></td>
                                            <td class="child-label">@GetDisplayName(grand)</td>
                                            @if(ShowCategoryColumn){<td></td>}
                                            @if(ShowPreviousColumns){<td class="amt-prev" style="text-align:right;">@(grand.PreviousAmount.HasValue? grand.PreviousAmount.Value.ToString("N2") : "-")</td><td class="delta amt-prev" style="text-align:right;">@FormatDelta(grand.Amount, grand.PreviousAmount)</td>}
                                            @if(_compareYear){<td class="amt-year" style="text-align:right;">@(grand.YearAgoAmount.HasValue? grand.YearAgoAmount.Value.ToString("N2") : "-")</td><td class="delta amt-year" style="text-align:right;">@FormatDelta(grand.Amount, grand.YearAgoAmount)</td>}
                                            <td class="amt-current" style="text-align:right;">@grand.Amount.ToString("N2")</td>
                                        </tr>
                                    }
                                }
                            }
                        }
                    }
                    @if(_vm!.GetTopLevelRows().Any())
                    {
                        var totals = _vm!.GetTotals();
                         <tr class="total-row">
                            <td></td>
                            <td>@Localizer["Total_Label"]</td>
                            @if(_vm!.ShowCategoryColumn){<td></td>}
                            @if(_vm!.ShowPreviousColumns){<td class="amt-prev" style="text-align:right;">@(totals.Prev.HasValue ? totals.Prev.Value.ToString("N2") : "-")</td><td class="delta amt-prev" style="text-align:right;">@(totals.Prev.HasValue ? FormatDelta(totals.Amount, totals.Prev) : "-")</td>}
                            @if(_compareYear){<td class="amt-year" style="text-align:right;">@(totals.Year.HasValue ? totals.Year.Value.ToString("N2") : "-")</td><td class="delta amt-year" style="text-align:right;">@(totals.Year.HasValue ? FormatDelta(totals.Amount, totals.Year) : "-")</td>}
                            <td class="amt-current" style="text-align:right;">@totals.Amount.ToString("N2")</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
}

@if(_vm?.ShowFavoriteDialog == true)
{
    <div class="modal-overlay" @onclick="(()=> _vm!.CloseFavoriteDialog())">
        <div class="modal" @onclick:stopPropagation="true">
            <h3>@((_vm?.FavoriteDialogIsUpdate ?? false) ? Localizer["Dialog_Fav_Title_Update"] : Localizer["Dialog_Fav_Title_New"])</h3>
            <div class="form-row">
                <label>@Localizer["Dialog_Fav_Name"]</label>
                <input type="text" @bind="_vm!.FavoriteName" />
            </div>
            @if(!string.IsNullOrWhiteSpace(_vm?.FavoriteError))
            {
                <div class="error-msg">@Localizer[_vm!.FavoriteError!]</div>
            }
            <div class="dialog-actions">
                <button class="btn" @onclick="(()=> SubmitFavoriteDialogAsync())" disabled="@string.IsNullOrWhiteSpace(_vm!.FavoriteName)">@Localizer["Dialog_Save"]</button>
                <button class="btn secondary" @onclick="(()=> _vm!.CloseFavoriteDialog())">@Localizer["Dialog_Cancel"]</button>
            </div>
        </div>
    </div>
}

@if(_vm?.ShowFilterDialog == true)
{
    <div class="modal-overlay" @onclick="(()=> _vm!.CloseFilterDialog())">
        <div class="modal" style="min-width:540px;" @onclick:stopPropagation="true">
            <h3>@Localizer["FilterDialog_Title"]</h3>
            @if (_vm!.FilterOptionsLoading)
            {
                <div class="small-loading">@Localizer["Loading"]</div>
            }
            else if (!_vm!.FilterOptionsByKind.Any(kvp => kvp.Value.Count > 0))
            {
                <div class="small-empty">@Localizer["NoData"]</div>
            }
            else
            {
                @if (IsMulti)
                {
                    <div class="tabs-bar" role="tablist">
                        @foreach (var k in _selectedKinds)
                        {
                            var kind = (PostingKind)k;
                            var isActive = k == _vm!.GetActiveFilterTabKind();
                            var cls = isActive ? "tab-btn active" : "tab-btn";
                            <button type="button" class="@cls" role="tab" aria-selected="@isActive" @onclick="(()=> { _vm!.ActiveFilterTabKind = k; StateHasChanged(); })">@Localizer[$"PostingKind_{kind}"]</button>
                        }
                    </div>
                }
                <div class="scroll-box option-list">
                    @foreach (var opt in _vm!.GetOptionsForKind(_vm!.GetActiveFilterTabKind()))
                    {
                        var currentKind = (PostingKind)_vm!.GetActiveFilterTabKind();
                        var sel = _vm!.IsOptionSelectedTemp((int)currentKind, opt.Id);
                        <label class="mk-item line"><input type="checkbox" checked="@sel" @onchange="e => _vm!.ToggleTempForKind((int)currentKind, opt.Id, e.Value is bool b && b)" /> @opt.Name</label>
                    }
                    @if (_vm!.GetOptionsForKind(_vm!.GetActiveFilterTabKind()).Count == 0)
                    {
                        <div class="small-empty">@Localizer["NoData"]</div>
                    }
                </div>
            }
            <div class="dialog-actions">
                <button class="btn" @onclick="(()=> _vm!.ApplyTempAndReloadAsync(_analysisMonth))" disabled="@(_vm!.FilterOptionsLoading)">@Localizer["FilterDialog_Apply"]</button>
                <button class="btn secondary" @onclick="(()=> _vm!.CloseFilterDialog())">@Localizer["FilterDialog_Cancel"]</button>
                <button class="btn secondary" @onclick="(()=> _vm!.ClearTempFilters())" disabled="@(_vm!.GetSelectedTempFiltersCount()==0)">@Localizer["Button_ClearFilters"]</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter, SupplyParameterFromQuery] public Guid? FavoriteId { get; set; }
    [Parameter, SupplyParameterFromQuery] public bool? Edit { get; set; }

    private enum TabId { Dashboard }
    private List<Ribbon<TabId>.RibbonTab<TabId>> _tabs = new();
    private TabId _activeTab = TabId.Dashboard;
    private Task OnActiveTabChanged(TabId t){ _activeTab = t; return Task.CompletedTask; }

    private ReportDashboardViewModel? _vm;

    // State
    private bool _loaded;
    private bool _editMode;

    private List<int> _selectedKinds = new(){ (int)PostingKind.Bank }; // multi selection
    private ReportInterval _interval = ReportInterval.Month;
    private bool _includeCategory;
    private bool _comparePrevious;
    private bool _compareYear;
    private bool _showChart = true;
    private int _take = 24;

    private readonly PostingKind[] _postingKindValues = new[]{ PostingKind.Bank, PostingKind.Contact, PostingKind.SavingsPlan, PostingKind.Security };

    private bool IsMulti => _selectedKinds.Count > 1;
    private int PrimaryKind => _selectedKinds.First();
    private bool IsCategorySupported(int kind) => kind == (int)PostingKind.Contact || kind == (int)PostingKind.SavingsPlan || kind == (int)PostingKind.Security;
    private bool IsCategoryGroupingSingle => !IsMulti && _includeCategory && IsCategorySupported(PrimaryKind);
    private bool ShowCategoryColumn => _includeCategory && !IsCategoryGroupingSingle;
    private bool ShowPreviousColumns => _comparePrevious && _interval is not ReportInterval.Year and not ReportInterval.Ytd;
    private string PreviousHeaderLabel => Localizer["Th_Prev"];
    private string YearHeaderLabel => Localizer["Th_YearAgo"];

    // Analysis month handling
    private DateTime _analysisMonth = new DateTime(DateTime.UtcNow.Year, DateTime.UtcNow.Month, 1);
    private string _analysisMonthString => _analysisMonth.ToString("yyyy-MM");
    private void OnAnalysisMonthChange(ChangeEventArgs e)
    {
        var s = e?.Value?.ToString();
        if (!string.IsNullOrWhiteSpace(s) && DateTime.TryParse(s + "-01", out var d))
        {
            _analysisMonth = new DateTime(d.Year, d.Month, 1);
            _ = LoadAsync();
        }
    }
    private void PrevMonth()
    {
        _analysisMonth = _analysisMonth.AddMonths(-1);
        _ = LoadAsync();
    }
    private void NextMonth()
    {
        _analysisMonth = _analysisMonth.AddMonths(1);
        _ = LoadAsync();
    }

    // Top-level filter UI state handled by ViewModel

    // Dialog temp buffers handled by ViewModel

    // Selected filters are managed in the ViewModel

    // Analysis totals
    private bool ShowTotalRow => _vm!.GetTopLevelRows().Any();
    // moved totals helpers into ViewModel

    private string GetDisplayName(ReportDashboardViewModel.PointDto p)
    {
        if (p.GroupKey.StartsWith("Type:"))
        {
            var part = p.GroupKey.Split(':')[1];
            return Localizer[$"PostingKind_{part}"];
        }
        if (p.GroupKey.StartsWith("Category:") && p.GroupKey.EndsWith(":_none"))
        {
            return Localizer["Category_Uncategorized"];    
        }
        return p.GroupName;
    }

    private static bool IsNegativeRow(ReportDashboardViewModel.PointDto p)
    {
        if (p.Amount < 0m)
        {
            return true;
        }
        if (p.Amount == 0m)
        {
            var hasPrev = p.PreviousAmount.HasValue;
            var hasYear = p.YearAgoAmount.HasValue;
            if (hasPrev || hasYear)
            {
                var prevNeg = hasPrev && p.PreviousAmount!.Value < 0m;
                var yearNeg = hasYear && p.YearAgoAmount!.Value < 0m;
                // mark negative when all available comparison baselines are negative
                if ((!hasPrev || prevNeg) && (!hasYear || yearNeg))
                {
                    return true;
                }
            }
        }
        return false;
    }

    private string FormatDelta(decimal current, decimal? baseline)
    {
        if (!baseline.HasValue) { return "-"; }
        if (baseline.Value == 0m) { return "∞"; }
        var diff = current - baseline.Value;
        var pct = diff / baseline.Value * 100m;
        return string.Format("{0} ({1:+0.0;-0.0;0.0}%)", diff.ToString("N2"), pct);
    }

    private void RebuildRibbon()
    {
        var groupsDto = _vm?.GetRibbon(Localizer) ?? new List<UiRibbonGroup>();
        var groups = new List<Ribbon<TabId>.RibbonGroup>();
        foreach (var g in groupsDto)
        {
            var items = new List<Ribbon<TabId>.RibbonItem>();
            foreach (var it in g.Items)
            {
                var size = it.Size == UiRibbonItemSize.Large
                    ? Ribbon<TabId>.RibbonItemSize.Large
                    : Ribbon<TabId>.RibbonItemSize.Small;

                items.Add(new Ribbon<TabId>.RibbonItem
                {
                    Label = it.Label,
                    IconSvg = it.IconSvg,
                    Size = size,
                    Disabled = it.Disabled,
                    Callback = () => { HandleRibbonAction(it.Action); return Task.CompletedTask; }
                });
            }
            groups.Add(new Ribbon<TabId>.RibbonGroup { Title = g.Title, Items = items });
        }

        _tabs = new()
        {
            new Ribbon<TabId>.RibbonTab<TabId>
            {
                Id = TabId.Dashboard,
                Title = Localizer["Ribbon_Tab"],
                Groups = groups
            }
        };
        StateHasChanged();
    }

    private void HandleRibbonAction(string action)
    {
        switch (action)
        {
            case "Back":
                Nav.NavigateTo("/reports");
                break;
            case "ToggleEdit":
                ToggleEditMode();
                break;
            case "Save":
                OnSaveRequested();
                break;
            case "SaveAs":
                _vm!.OpenFavoriteDialog(false, Localizer["Default_FavoriteName"]);
                break;
            case "DeleteFavorite":
                if(_vm!.ActiveFavoriteId.HasValue){ _ = DeleteFavoriteAsync(_vm.ActiveFavoriteId.Value); }
                break;
            case "Reload":
                _ = LoadAsync();
                break;
            case "FiltersOpen":
                _vm!.OpenFilterDialog();
                break;
            case "FiltersClear":
                ClearFilters();
                break;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _vm = ActivatorUtilities.CreateInstance<ReportDashboardViewModel>(Services);
        _vm.StateChanged += (_, __) => { RebuildRibbon(); InvokeAsync(StateHasChanged); };
        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!_loaded)
        {
            _loaded = true;
        }

        _vm!.EditMode = Edit.GetValueOrDefault(false);

        if (FavoriteId.HasValue)
        {
            await LoadAndApplyFavoriteAsync(FavoriteId.Value);
        }
        RebuildRibbon();
        await _vm!.LoadFilterOptionsAsync();
        if ((_vm?.Points.Count ?? 0) == 0)
        {
            await LoadAsync();
        }
    }

    private async Task LoadAsync()
    {
        if (_vm?.IsBusy == true) { return; }
        if (_selectedKinds.Count == 0) { return; }
        StateHasChanged();
        try
        {
            // Sync component state into ViewModel
            _vm!.SelectedKinds = _selectedKinds.ToList();
            _vm.Interval = (int)_interval;
            _vm.IncludeCategory = _includeCategory;
            _vm.ComparePrevious = _comparePrevious;
            _vm.CompareYear = _compareYear;
            _vm.ShowChart = _showChart;
            _vm.Take = _take;

            await _vm.ReloadAsync(_analysisMonth, default);

            if (!IsCategoryGroupingSingle && !IsMulti)
            {
                _vm.Expanded.Clear();
            }
        }
        catch (Exception)
        {
            // error will be shown through VM operations when saving/updating favorites
        }
        finally
        {
            RebuildRibbon();
            StateHasChanged();
        }
    }

    private void ToggleEditMode()
    {
        _editMode = !_editMode;
        RebuildRibbon();
        var uri = new Uri(Nav.Uri);
        var baseUrl = uri.GetLeftPart(UriPartial.Path);
        var favPart = _vm!.ActiveFavoriteId.HasValue ? $"favoriteId={_vm.ActiveFavoriteId.Value}&" : string.Empty;
        Nav.NavigateTo($"{baseUrl}?{favPart}edit={_editMode}", forceLoad: false);
    }

    private void OnSaveRequested()
    {
        if (_vm!.ActiveFavoriteId.HasValue)
        {
            _vm!.OpenFavoriteDialog(true);
        }
        else
        {
            _vm!.OpenFavoriteDialog(false, Localizer["Default_FavoriteName"]);
        }
    }

    private void OnIncludeCategoryChanged()
    {
        ClearFilters();
        _ = _vm!.LoadFilterOptionsAsync();
        _ = LoadAsync();
    }

    private void OnToggleKind(int value, bool isChecked)
    {
        var beforePrimary = PrimaryKind;
        if (isChecked)
        {
            if (!_selectedKinds.Contains(value)) { _selectedKinds.Add(value); }
        }
        else
        {
            _selectedKinds.Remove(value);
            if (_selectedKinds.Count == 0)
            {
                _selectedKinds.Add((int)PostingKind.Bank);
            }
        }
        _selectedKinds = _selectedKinds.Distinct().ToList();
        if (beforePrimary != PrimaryKind || IsMulti)
        {
            ClearFilters();
            _ = _vm!.LoadFilterOptionsAsync();
        }
        _ = LoadAsync();
    }

    private async Task SubmitFavoriteDialogAsync()
    {
        var res = await _vm!.SubmitFavoriteDialogAsync(Localizer["Default_FavoriteName"], PrimaryKind, _includeCategory, (int)_interval, _take, _comparePrevious, _compareYear, _showChart, true, IsMulti ? _selectedKinds : null, BuildFilters());
        if (res is not null)
        {
            _vm!.ActiveFavoriteId = res.Id;
            _vm!.FavoriteName = res.Name;
            RebuildRibbon();
            var uri = new Uri(Nav.Uri);
            var baseUrl = uri.GetLeftPart(UriPartial.Path);
            Nav.NavigateTo($"{baseUrl}?favoriteId={_vm!.ActiveFavoriteId}&edit=false", forceLoad: false);
        }
    }

    private async Task DeleteFavoriteAsync(Guid id)
    {
        var ok = await _vm!.DeleteFavoriteAsync(id, default);
        if (ok)
        {
            _vm!.ActiveFavoriteId = null;
            _vm!.FavoriteName = string.Empty;
            RebuildRibbon();
            Nav.NavigateTo("/reports");
        }
    }

    private async Task LoadAndApplyFavoriteAsync(Guid id)
    {
        try
        {
            var fav = await Http.GetFromJsonAsync<ReportDashboardViewModel.FavoriteDto>($"/api/report-favorites/{id}");
            if (fav is not null)
            {
                ApplyFavorite(fav);
            }
        }
        catch (Exception)
        {
            // ignore; favorite load failure message is handled elsewhere
        }
    }

    private void ApplyFavorite(ReportDashboardViewModel.FavoriteDto fav)
    {
        _vm!.ActiveFavoriteId = fav.Id;
        _vm!.FavoriteName = fav.Name;
        _selectedKinds = fav.PostingKinds?.Count > 0 ? fav.PostingKinds.Select(x=>x).ToList() : new List<int>{ fav.PostingKind };
        _includeCategory = fav.IncludeCategory;
        _interval = (ReportInterval)fav.Interval;
        _take = fav.Take;
        _comparePrevious = fav.ComparePrevious;
        _compareYear = fav.CompareYear;
        _showChart = fav.ShowChart;
        _vm!.SelectedAccounts.Clear(); foreach (var id in fav.Filters?.AccountIds ?? Array.Empty<Guid>()) { _vm.SelectedAccounts.Add(id); }
        _vm!.SelectedContacts.Clear(); foreach (var id in fav.Filters?.ContactIds ?? Array.Empty<Guid>()) { _vm.SelectedContacts.Add(id); }
        _vm!.SelectedSavingsPlans.Clear(); foreach (var id in fav.Filters?.SavingsPlanIds ?? Array.Empty<Guid>()) { _vm.SelectedSavingsPlans.Add(id); }
        _vm!.SelectedSecurities.Clear(); foreach (var id in fav.Filters?.SecurityIds ?? Array.Empty<Guid>()) { _vm.SelectedSecurities.Add(id); }
        _vm!.SelectedContactCategories.Clear(); foreach (var id in fav.Filters?.ContactCategoryIds ?? Array.Empty<Guid>()) { _vm.SelectedContactCategories.Add(id); }
        _vm!.SelectedSavingsCategories.Clear(); foreach (var id in fav.Filters?.SavingsPlanCategoryIds ?? Array.Empty<Guid>()) { _vm.SelectedSavingsCategories.Add(id); }
        _vm!.SelectedSecurityCategories.Clear(); foreach (var id in fav.Filters?.SecurityCategoryIds ?? Array.Empty<Guid>()) { _vm.SelectedSecurityCategories.Add(id); }
        _ = _vm!.LoadFilterOptionsAsync();
        RebuildRibbon();
        _ = LoadAsync();
    }

    private void ClearFilters()
    {
        _vm!.ClearFilters();
         _ = LoadAsync();
    }

    private ReportDashboardViewModel.FiltersPayload? BuildFilters()
    {
        return _vm!.BuildFiltersPayload();
    }
}
