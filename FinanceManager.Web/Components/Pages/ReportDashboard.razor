@page "/reports/dashboard"
@rendermode InteractiveServer
@using System.Net.Http.Json
@using FinanceManager.Domain
@using FinanceManager.Domain.Reports
@inject HttpClient Http
@inject NavigationManager Nav
@inject Microsoft.Extensions.Localization.IStringLocalizer<FinanceManager.Web.Components.Pages.ReportDashboard> Localizer
@using FinanceManager.Web.Components.Shared

<PageTitle>@Localizer["PageTitle"]</PageTitle>

<Ribbon TTabEnum="ReportDashboard.TabId"
        Tabs="_tabs"
        ActiveTab="_activeTab"
        ActiveTabChanged="OnActiveTabChanged" />

<h2 style="margin-top:0;">@Localizer["Heading"]</h2>

@if(!_loaded)
{
    <p>@Localizer["Loading"]</p>
}
else
{
    <div class="filters-panel">
        <div class="filter-group wide">
            <div class="group-title">@Localizer["FilterGroup_Data"]</div>
            <div class="row">
                <label>@Localizer["Label_PostingKind"]</label>
                <select @bind="_postingKind" @bind:after="StateHasChanged">
                    @foreach(var kv in _postingKindOptions)
                    {
                        <option value="@kv.Value">@kv.Key</option>
                    }
                </select>
            </div>
            <div class="row">
                <label>@Localizer["Label_Interval"]</label>
                <select @bind="_interval" @bind:after="StateHasChanged">
                    @foreach (var iv in Enum.GetValues<ReportInterval>())
                    {
                        <option value="@iv">@iv</option>
                    }
                </select>
            </div>
            <div class="row inline">
                <label class="chk"><input type="checkbox" @bind="_includeCategory" /> @Localizer["Label_IncludeCategory"]</label>
                <label class="take-label">@Localizer["Label_Take"] <input type="number" min="1" max="120" @bind="_take" class="take-input" /></label>
            </div>
        </div>
        <div class="filter-group">
            <div class="group-title">@Localizer["FilterGroup_Comparisons"]</div>
            <div class="row chk"><label><input type="checkbox" @bind="_comparePrevious" /> @Localizer["Label_ComparePrev"]</label></div>
            <div class="row chk"><label><input type="checkbox" @bind="_compareYear" /> @Localizer["Label_CompareYear"]</label></div>
        </div>
        <div class="filter-group">
            <div class="group-title">@Localizer["FilterGroup_Chart"]</div>
            <div class="row chk"><label><input type="checkbox" @bind="_showChart" /> @Localizer["Label_ShowChart"]</label></div>
        </div>
    </div>

    <div class="content-split">
        <div class="favorites-box">
            <h4>@Localizer["Title_Favorites"]</h4>
            @if(_favoriteLoading)
            {
                <div class="small-loading">@Localizer["Loading"]</div>
            }
            else if(_favorites.Count == 0)
            {
                <div class="small-empty">@Localizer["NoFavorites"]</div>
            }
            else
            {
                <ul class="fav-list">
                    @foreach(var f in _favorites)
                    {
                        <li class="@(f.Id == _activeFavoriteId ? "active" : string.Empty)">
                            <button type="button" @onclick="(()=>ApplyFavorite(f))" class="fav-btn" title="@Localizer["Tooltip_Apply"]">@f.Name</button>
                            <button type="button" class="icon-btn small" title="@Localizer["Tooltip_Delete"]" @onclick="(()=>DeleteFavoriteAsync(f.Id))"><svg><use href="/icons/sprite.svg#clear"/></svg></button>
                        </li>
                    }
                </ul>
            }
            @if(!string.IsNullOrWhiteSpace(_favoriteError))
            {
                <div class="error-msg">@_favoriteError</div>
            }
        </div>
        <div class="result-box">
            @if(_queryBusy)
            {
                <div class="query-overlay">@Localizer["Loading"]</div>
            }
            @if(!_queryBusy && _points.Count == 0)
            {
                <div class="empty-info">@Localizer["NoData"]</div>
            }
            else if(_points.Count > 0)
            {
                @if(_showChart)
                {
                    <div class="mini-chart" aria-label="@Localizer["Aria_Chart"]">
                        @{ var byPeriod = _points.GroupBy(p=>p.PeriodStart).Select(g=> new { g.Key, Sum = g.Where(x=>x.ParentGroupKey==null).Sum(x=>x.Amount) }).OrderBy(x=>x.Key).ToList();
                           var max = byPeriod.Select(x=>Math.Abs(x.Sum)).DefaultIfEmpty(0m).Max();
                           var scale = max==0?0:70m/max; }
                        <div class="bars">
                            @foreach(var bp in byPeriod)
                            {
                                var h = bp.Sum>0 ? (int)Math.Round((double)(bp.Sum*scale)) : (int)Math.Round((double)(-bp.Sum*scale));
                                <div class="bar-wrap" title="@bp.Key.ToString("yyyy-MM-dd") @bp.Sum">
                                    <div class="bar-inner @(bp.Sum>=0?"pos":"neg")" style="height:@(h)px"></div>
                                </div>
                            }
                        </div>
                    </div>
                }
                <table class="fm-table report-table expandable">
                    <thead>
                        <tr>
                            <th style="width:24px;"></th>
                            <th>@Localizer["Th_Group"]</th>
                            @if(ShowCategoryColumn){<th>@Localizer["Th_Category"]</th>}
                            @if(ShowPreviousColumns){<th class="th-prev" style="text-align:right;">@PreviousHeaderLabel</th><th class="th-prev" style="text-align:right;">@Localizer["Th_DeltaPrev"]</th>}
                            @if(_compareYear){<th class="th-year" style="text-align:right;">@YearHeaderLabel</th><th class="th-year" style="text-align:right;">@Localizer["Th_DeltaYear"]</th>}
                            <th class="th-current" style="text-align:right;">@Localizer["Th_Amount"]</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var cat in TopLevelRows)
                        {
                            var isCategory = IsCategoryGrouping && cat.GroupKey.StartsWith("Category:");
                            var expanded = isCategory && _expanded.TryGetValue(cat.GroupKey, out var ex) && ex;
                            var rowClass = cat.Amount < 0 ? "neg" : string.Empty;
                            <tr class="@rowClass @(isCategory?"category-row":"entity-row")">
                                <td>
                                    @if(isCategory)
                                    {
                                        <button type="button" class="toggle-btn" @onclick="(()=>Toggle(cat.GroupKey))" title="@(expanded?Localizer["Collapse"]:Localizer["Expand"])" aria-expanded="@expanded">
                                            <svg class="ico"><use href="/icons/sprite.svg#@(expanded?"chevron-down":"chevron-right")" /></svg>
                                        </button>
                                    }
                                </td>
                                <td>@cat.GroupName</td>
                                @if(ShowCategoryColumn){<td>@(string.IsNullOrWhiteSpace(cat.CategoryName)?"-":cat.CategoryName)</td>}
                                @if(ShowPreviousColumns){<td class="amt-prev" style="text-align:right;">@(cat.PreviousAmount.HasValue? cat.PreviousAmount.Value.ToString("N2") : "-")</td><td class="delta amt-prev" style="text-align:right;">@FormatDelta(cat.Amount, cat.PreviousAmount)</td>}
                                @if(_compareYear){<td class="amt-year" style="text-align:right;">@(cat.YearAgoAmount.HasValue? cat.YearAgoAmount.Value.ToString("N2") : "-")</td><td class="delta amt-year" style="text-align:right;">@FormatDelta(cat.Amount, cat.YearAgoAmount)</td>}
                                <td class="amt-current" style="text-align:right;">@cat.Amount.ToString("N2")</td>
                            </tr>
                            @if(isCategory && expanded)
                            {
                                foreach(var child in ChildRows(cat.GroupKey))
                                {
                                    var childCls = child.Amount < 0 ? "neg" : string.Empty;
                                    <tr class="child-row @childCls">
                                        <td></td>
                                        <td class="child-label">@child.GroupName</td>
                                        @if(ShowCategoryColumn){<td></td>}
                                        @if(ShowPreviousColumns){<td class="amt-prev" style="text-align:right;">@(child.PreviousAmount.HasValue? child.PreviousAmount.Value.ToString("N2") : "-")</td><td class="delta amt-prev" style="text-align:right;">@FormatDelta(child.Amount, child.PreviousAmount)</td>}
                                        @if(_compareYear){<td class="amt-year" style="text-align:right;">@(child.YearAgoAmount.HasValue? child.YearAgoAmount.Value.ToString("N2") : "-")</td><td class="delta amt-year" style="text-align:right;">@FormatDelta(child.Amount, child.YearAgoAmount)</td>}
                                        <td class="amt-current" style="text-align:right;">@child.Amount.ToString("N2")</td>
                                    </tr>
                                }
                            }
                        }
                        @if(ShowTotalRow)
                        {
                            var totals = TotalRow;
                            <tr class="total-row">
                                <td></td>
                                <td>@Localizer["Total_Label"]</td>
                                @if(ShowCategoryColumn){<td></td>}
                                @if(ShowPreviousColumns){<td class="amt-prev" style="text-align:right;">@(totals.Prev.HasValue ? totals.Prev.Value.ToString("N2") : "-")</td><td class="delta amt-prev" style="text-align:right;">@(totals.Prev.HasValue ? FormatDelta(totals.Amount, totals.Prev) : "-")</td>}
                                @if(_compareYear){<td class="amt-year" style="text-align:right;">@(totals.Year.HasValue ? totals.Year.Value.ToString("N2") : "-")</td><td class="delta amt-year" style="text-align:right;">@(totals.Year.HasValue ? FormatDelta(totals.Amount, totals.Year) : "-")</td>}
                                <td class="amt-current" style="text-align:right;">@totals.Amount.ToString("N2")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
}

@if(_showFavDialog)
{
    <div class="modal-overlay" @onclick="CloseFavoriteDialog">
        <div class="modal" @onclick:stopPropagation="true">
            <h3>@(_favDialogIsUpdate ? Localizer["Dialog_Fav_Title_Update"] : Localizer["Dialog_Fav_Title_New"])</h3>
            <div class="form-row">
                <label>@Localizer["Dialog_Fav_Name"]</label>
                <input type="text" @bind="_favoriteName" />
            </div>
            @if(!string.IsNullOrWhiteSpace(_favoriteError))
            {
                <div class="error-msg">@_favoriteError</div>
            }
            <div class="dialog-actions">
                <button class="btn" @onclick="SubmitFavoriteDialog" disabled="@string.IsNullOrWhiteSpace(_favoriteName)">@Localizer["Dialog_Save"]</button>
                <button class="btn secondary" @onclick="CloseFavoriteDialog">@Localizer["Dialog_Cancel"]</button>
            </div>
        </div>
    </div>
}

@code {
    // Ribbon
    private enum TabId { Dashboard }
    private List<Ribbon<TabId>.RibbonTab<TabId>> _tabs = new();
    private TabId _activeTab = TabId.Dashboard;
    private Task OnActiveTabChanged(TabId t){ _activeTab = t; return Task.CompletedTask; }

    private void BuildRibbon()
    {
        var favGroup = new Ribbon<TabId>.RibbonGroup
        {
            Title = Localizer["Ribbon_Favorites"],
            Items = new()
            {
                new Ribbon<TabId>.RibbonItem{ Label=Localizer["Ribbon_ReloadFav"], IconSvg="<svg><use href='/icons/sprite.svg#refresh'/></svg>", Callback= ()=> { _=LoadFavoritesAsync(); return Task.CompletedTask;} },
                new Ribbon<TabId>.RibbonItem{ Label=Localizer["Ribbon_SaveFav"], IconSvg="<svg><use href='/icons/sprite.svg#save'/></svg>", Callback= ()=> { OpenFavoriteDialog(false); return Task.CompletedTask;} },
                new Ribbon<TabId>.RibbonItem{ Label=Localizer["Ribbon_UpdateFav"], IconSvg="<svg><use href='/icons/sprite.svg#save'/></svg>", Disabled=!_canUpdateFavorite, Callback= ()=> { OpenFavoriteDialog(true); return Task.CompletedTask;} }
            }
        };
        var dataGroup = new Ribbon<TabId>.RibbonGroup
        {
            Title = Localizer["Ribbon_ReportData"],
            Items = new()
            {
                new Ribbon<TabId>.RibbonItem{ Label=Localizer["Ribbon_ReloadData"], IconSvg="<svg><use href='/icons/sprite.svg#play'/></svg>", Size=Ribbon<TabId>.RibbonItemSize.Large, Callback=()=> { _=LoadAsync(); return Task.CompletedTask; } }
            }
        };
        _tabs = new(){ new Ribbon<TabId>.RibbonTab<TabId>{ Id=TabId.Dashboard, Title=Localizer["Ribbon_Tab"], Groups = new(){ favGroup, dataGroup } } };
    }

    // State
    private bool _loaded;
    private bool _queryBusy;
    private int _postingKind = (int)PostingKind.Bank;
    private ReportInterval _interval = ReportInterval.Month;
    private bool _includeCategory;
    private bool _comparePrevious;
    private bool _compareYear;
    private bool _showChart = true;
    private int _take = 24;
    private string _favoriteName = string.Empty;
    private Guid? _activeFavoriteId;
    private bool _favoriteLoading;
    private string? _favoriteError;

    private readonly Dictionary<string,int> _postingKindOptions = new(){ {"Bank", (int)PostingKind.Bank }, {"Contact", (int)PostingKind.Contact}, {"SavingsPlan", (int)PostingKind.SavingsPlan}, {"Security", (int)PostingKind.Security} };

    // Expansion state: category GroupKey -> expanded
    private readonly Dictionary<string,bool> _expanded = new();

    // Result model
    private List<PointDto> _points = new();
    private List<PointDto> _latestPerGroup = new(); // kept for possible quick summary usage

    private bool IsCategoryGrouping => _includeCategory && (_postingKind == (int)PostingKind.Contact || _postingKind == (int)PostingKind.SavingsPlan || _postingKind == (int)PostingKind.Security);
    private bool ShowCategoryColumn => _includeCategory && !IsCategoryGrouping; // unchanged logic

    private bool ShowPreviousColumns => _comparePrevious && _interval is not ReportInterval.Year and not ReportInterval.Ytd;
    private string PreviousHeaderLabel => _interval switch
    {
        ReportInterval.Month => Localizer["Th_Prev"],
        ReportInterval.Quarter => Localizer["Th_Prev"],
        ReportInterval.HalfYear => Localizer["Th_Prev"],
        ReportInterval.Year => Localizer["Th_Prev"], // hidden anyway
        ReportInterval.Ytd => Localizer["Th_Prev"], // hidden anyway
        _ => Localizer["Th_Prev"]
    };
    private string YearHeaderLabel => _interval switch
    {
        ReportInterval.Ytd => Localizer["Th_YearAgo"],
        _ => Localizer["Th_YearAgo"]
    };

    private IEnumerable<PointDto> TopLevelRows => IsCategoryGrouping 
        ? _points.Where(p => p.ParentGroupKey == null && p.GroupKey.StartsWith("Category:"))
                 .GroupBy(p => p.GroupKey)
                 .Select(g => g.OrderBy(x => x.PeriodStart).Last())
                 .OrderByDescending(p => p.Amount)
        : _latestPerGroup;
    private IEnumerable<PointDto> ChildRows(string parentKey) => IsCategoryGrouping
        ? _points.Where(p => p.ParentGroupKey == parentKey)
                 .GroupBy(p => p.GroupKey)
                 .Select(g => g.OrderBy(x => x.PeriodStart).Last())
                 .OrderByDescending(p => p.Amount)
        : Enumerable.Empty<PointDto>();

    protected override async Task OnInitializedAsync()
    {
        _loaded = true;
        await LoadFavoritesAsync();
        BuildRibbon();
    }

    private async Task LoadAsync()
    {
        if(_queryBusy) { return; }
        _queryBusy = true; _favoriteError = null; StateHasChanged();
        try
        {
            var req = new QueryRequest(_postingKind, _interval, _take, _includeCategory, _comparePrevious, _compareYear);
            var resp = await Http.PostAsJsonAsync("/api/report-aggregates", req);
            if (resp.IsSuccessStatusCode)
            {
                var result = await resp.Content.ReadFromJsonAsync<AggregationResponse>() ?? new AggregationResponse(_interval, new(), false, false);
                _points = result.Points.OrderBy(p => p.GroupKey).ThenBy(p => p.PeriodStart).ToList();
                _latestPerGroup = _points.GroupBy(p => p.GroupKey).Select(g => g.OrderBy(x => x.PeriodStart).Last()).OrderByDescending(p => p.Amount).ToList();
                if (!IsCategoryGrouping)
                {
                    _expanded.Clear();
                }
            }
        }
        catch (Exception ex)
        {
            _favoriteError = ex.Message;
        }
        finally
        {
            _queryBusy = false;
            BuildRibbon();
            StateHasChanged();
        }
    }

    private void Toggle(string key)
    {
        if (_expanded.ContainsKey(key))
        {
            _expanded[key] = !_expanded[key];
        }
        else
        {
            _expanded[key] = true;
        }
    }

    private string FormatDelta(decimal current, decimal? baseline)
    {
        if (!baseline.HasValue) { return "-"; }
        if (baseline.Value == 0m) { return "∞"; }
        var diff = current - baseline.Value;
        var pct = diff / baseline.Value * 100m;
        return string.Format("{0} ({1:+0.0;-0.0;0.0}%)", diff.ToString("N2"), pct);
    }

    // Favorites
    private readonly List<FavoriteDto> _favorites = new();
    private bool _canSaveFavorite => !string.IsNullOrWhiteSpace(_favoriteName) && !_favorites.Any(f => f.Name.Equals(_favoriteName, StringComparison.OrdinalIgnoreCase));
    private bool _canUpdateFavorite => _activeFavoriteId.HasValue;

    private async Task LoadFavoritesAsync()
    {
        _favoriteLoading = true; StateHasChanged();
        try
        {
            var list = await Http.GetFromJsonAsync<List<FavoriteDto>>("/api/report-favorites") ?? new();
            _favorites.Clear();
            _favorites.AddRange(list.OrderBy(f => f.Name));
        }
        finally
        {
            _favoriteLoading = false; BuildRibbon(); StateHasChanged();
        }
    }

    private async Task SaveFavoriteAsync()
    {
        if (!_canSaveFavorite) { return; }
        var payload = new FavCreate
        {
            Name = _favoriteName.Trim(),
            PostingKind = _postingKind,
            IncludeCategory = _includeCategory,
            Interval = _interval,
            ComparePrevious = _comparePrevious,
            CompareYear = _compareYear,
            ShowChart = _showChart,
            Expandable = true
        };
        var resp = await Http.PostAsJsonAsync("/api/report-favorites", payload);
        if (resp.IsSuccessStatusCode)
        {
            await LoadFavoritesAsync();
        }
        else
        {
            _favoriteError = await resp.Content.ReadAsStringAsync();
        }
        StateHasChanged();
    }

    private async Task UpdateFavoriteAsync()
    {
        if (!_activeFavoriteId.HasValue) { return; }
        var payload = new FavCreate
        {
            Name = _favoriteName.Trim(),
            PostingKind = _postingKind,
            IncludeCategory = _includeCategory,
            Interval = _interval,
            ComparePrevious = _comparePrevious,
            CompareYear = _compareYear,
            ShowChart = _showChart,
            Expandable = true
        };
        var resp = await Http.PutAsJsonAsync($"/api/report-favorites/{_activeFavoriteId}", payload);
        if (resp.IsSuccessStatusCode)
        {
            await LoadFavoritesAsync();
        }
        else
        {
            _favoriteError = await resp.Content.ReadAsStringAsync();
        }
        StateHasChanged();
    }

    private async Task DeleteFavoriteAsync(Guid id)
    {
        var resp = await Http.DeleteAsync($"/api/report-favorites/{id}");
        if (resp.IsSuccessStatusCode)
        {
            if (_activeFavoriteId == id) { _activeFavoriteId = null; }
            await LoadFavoritesAsync();
            StateHasChanged();
        }
    }

    private void ApplyFavorite(FavoriteDto fav)
    {
        _activeFavoriteId = fav.Id;
        _favoriteName = fav.Name;
        _postingKind = fav.PostingKind;
        _includeCategory = fav.IncludeCategory;
        _interval = fav.Interval;
        _comparePrevious = fav.ComparePrevious;
        _compareYear = fav.CompareYear;
        _showChart = fav.ShowChart;
        BuildRibbon();
        _ = LoadAsync();
    }

    private bool _showFavDialog;
    private bool _favDialogIsUpdate;
    private void OpenFavoriteDialog(bool update)
    {
        _favDialogIsUpdate = update;
        if (!update) { _favoriteName = string.Empty; }
        _favoriteError = null;
        _showFavDialog = true;
        StateHasChanged();
    }
    private void CloseFavoriteDialog() => _showFavDialog = false;
    private void SubmitFavoriteDialog()
    {
        if (_favDialogIsUpdate) { _ = UpdateFavoriteAsync(); }
        else { _ = SaveFavoriteAsync(); }
        _showFavDialog = false;
    }

    // DTOs / Records
    private sealed record QueryRequest(int PostingKind, ReportInterval Interval, int Take, bool IncludeCategory, bool ComparePrevious, bool CompareYear);
    private sealed record AggregationResponse(ReportInterval Interval, List<PointDto> Points, bool ComparedPrevious, bool ComparedYear);
    private sealed record PointDto(DateTime PeriodStart, string GroupKey, string GroupName, string? CategoryName, decimal Amount, string? ParentGroupKey, decimal? PreviousAmount, decimal? YearAgoAmount);
    private sealed record FavoriteDto(Guid Id, string Name, int PostingKind, bool IncludeCategory, ReportInterval Interval, bool ComparePrevious, bool CompareYear, bool ShowChart, bool Expandable, DateTime CreatedUtc, DateTime? ModifiedUtc);
    private sealed class FavCreate
    {
        public string Name { get; set; } = string.Empty;
        public int PostingKind { get; set; }
        public bool IncludeCategory { get; set; }
        public ReportInterval Interval { get; set; }
        public bool ComparePrevious { get; set; }
        public bool CompareYear { get; set; }
        public bool ShowChart { get; set; }
        public bool Expandable { get; set; }
    }

    private bool ShowTotalRow => (_latestPerGroup.Count > 0) || (IsCategoryGrouping && TopLevelRows.Any());
    private (decimal Amount, decimal? Prev, decimal? Year) TotalRow
    {
        get
        {
            IEnumerable<PointDto> rows = IsCategoryGrouping ? TopLevelRows : _latestPerGroup;
            var list = rows.ToList();
            var amount = list.Sum(r => r.Amount);
            decimal? prev = ShowPreviousColumns ? list.Where(r => r.PreviousAmount.HasValue).Sum(r => r.PreviousAmount!.Value) : null;
            decimal? year = _compareYear ? list.Where(r => r.YearAgoAmount.HasValue).Sum(r => r.YearAgoAmount!.Value) : null;
            return (amount, prev, year);
        }
    }
}

<style>
.filters-panel { display:grid; grid-template-columns:repeat(auto-fit,minmax(260px,1fr)); gap:1rem; width:100%; margin-bottom:.9rem; }
.filter-group { display:flex; flex-direction:column; gap:.55rem; padding:.7rem .75rem .75rem; background:#1b1f24; border:1px solid #2a3138; border-radius:.55rem; }
.filter-group.wide { grid-column:span 2; }
@@media (max-width:900px){ .filter-group.wide { grid-column:span 1; } }
.filter-group .group-title { font-size:.6rem; text-transform:uppercase; letter-spacing:.05em; opacity:.65; }
.filter-group .row { display:flex; flex-direction:column; gap:.3rem; }
.filter-group .row.inline { flex-direction:row; align-items:center; gap:1.2rem; flex-wrap:wrap; }
.take-label { display:flex; align-items:center; gap:.4rem; font-size:.65rem; text-transform:uppercase; letter-spacing:.05em; opacity:.75; }
.take-input { width:80px; }
.chk { font-size:.7rem; }
.btn.full { width:100%; }
.modal-overlay { position:fixed; inset:0; background:rgba(0,0,0,.55); display:flex; align-items:center; justify-content:center; z-index:50; }
.modal { background:#1f2429; border:1px solid #30363d; padding:1rem 1.2rem 1.1rem; border-radius:.5rem; min-width:300px; display:flex; flex-direction:column; gap:.75rem; }
.modal h3 { margin:.1rem 0 .2rem; font-size:.95rem; }
.modal .form-row { display:flex; flex-direction:column; gap:.25rem; }
.dialog-actions { display:flex; gap:.6rem; justify-content:flex-end; }
.filters-panel input[type=text], .filters-panel select, .filters-panel input[type=number]{ background:#202428; border:1px solid #333; color:#eee; padding:.25rem .4rem; border-radius:.25rem; font-size:.7rem; }
.filters-panel input[type=checkbox]{ margin-right:.35rem; }
.content-split { display:flex; gap:1rem; align-items:stretch; }
.favorites-box { width:220px; flex:0 0 auto; border:1px solid var(--border); padding:.6rem .6rem .8rem; border-radius:.4rem; background:#141618; display:flex; flex-direction:column; }
.favorites-box h4 { margin:.1rem 0 .4rem 0; font-size:.85rem; }
.fav-list { list-style:none; margin:0 0 .5rem 0; padding:0; display:flex; flex-direction:column; gap:.25rem; max-height:300px; overflow:auto; }
.fav-list li { display:flex; gap:.3rem; align-items:center; }
.fav-list li.active .fav-btn { background:#2d6cdf; }
.fav-btn { flex:1 1 auto; text-align:left; background:#22272b; border:1px solid #333; padding:.25rem .4rem; color:#eee; border-radius:.25rem; cursor:pointer; font-size:.65rem; }
.fav-btn:hover { background:#2a3036; }
.icon-btn.small { width:22px; height:22px; display:flex; align-items:center; justify-content:center; background:#262b30; border:1px solid #333; border-radius:.25rem; cursor:pointer; padding:0; }
.icon-btn.small svg { width:14px; height:14px; }
.btn.small { font-size:.65rem; padding:.35rem .5rem; }
.btn { background:#2d6cdf; color:#fff; border:0; padding:.45rem .7rem; border-radius:.3rem; cursor:pointer; font-size:.7rem; }
.btn:disabled { opacity:.5; cursor:not-allowed; }
.result-box { flex:1 1 auto; position:relative; display:flex; flex-direction:column; gap:.75rem; }
.query-overlay { position:absolute; inset:0; background:rgba(10,10,12,.55); display:flex; align-items:center; justify-content:center; font-size:.8rem; backdrop-filter:blur(2px); border-radius:.4rem; z-index:5; }
.report-table { width:100%; font-size:.7rem; border-collapse:collapse; }
.report-table thead th.th-prev { background:#1e2430; color:#8fb0ff; }
.report-table thead th.th-year { background:#261f33; color:#c4a8ff; }
.report-table thead th.th-current { background:#2a3322; color:#cfe7b5; }
.report-table tbody td.amt-prev { color:#7f94ad; font-style:italic; }
.report-table tbody td.amt-year { color:#b79ce8; }
.report-table tbody td.amt-current { font-weight:600; background:#1d242a; }
.report-table tbody tr.neg { color:#c94; }
.report-table tbody td.delta { font-size:.6rem; opacity:.8; }
.report-table tr.category-row { background:#16212a; }
.report-table tr.child-row { background:#101519; }
.report-table tr.child-row .child-label { padding-left:1.2rem; position:relative; }
.report-table tr.child-row .child-label:before { content:""; position:absolute; left:.3rem; top:50%; width:.5rem; height:1px; background:#2d6cdf; }
.toggle-btn { background:transparent; border:0; cursor:pointer; padding:.15rem; display:flex; align-items:center; }
.toggle-btn .ico { width:14px; height:14px; fill:#8fb0ff; }
.empty-info { font-size:.7rem; opacity:.6; }
.error-msg { color:#e66; font-size:.65rem; margin-top:.4rem; }
.small-empty, .small-loading { font-size:.65rem; opacity:.7; margin-bottom:.4rem; }
.mini-chart { border:1px solid var(--border); padding:.4rem .5rem; border-radius:.4rem; background:#141618; }
.mini-chart .bars { display:flex; align-items:flex-end; gap:.25rem; height:90px; }
.mini-chart .bar-wrap { flex:1 1 0; display:flex; align-items:flex-end; justify-content:center; }
.mini-chart .bar-inner { width:8px; border-radius:2px; background:#2d6cdf; }
.mini-chart .bar-inner.neg { background:#c94; }
.total-row { border-top:1px solid #333; background:#1b2226; font-weight:600; }
.total-row td { padding-top:.35rem; }
</style>
