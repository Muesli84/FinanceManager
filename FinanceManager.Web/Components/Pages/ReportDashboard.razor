@page "/reports/dashboard"
@rendermode InteractiveServer
@using System.Net.Http.Json
@using System.Web
@using FinanceManager.Domain
@using FinanceManager.Domain.Reports
@inject HttpClient Http
@inject NavigationManager Nav
@inject Microsoft.Extensions.Localization.IStringLocalizer<FinanceManager.Web.Components.Pages.ReportDashboard> Localizer
@using FinanceManager.Web.Components.Shared
@using Microsoft.AspNetCore.Components

<PageTitle>@(_activeFavoriteId.HasValue && !string.IsNullOrWhiteSpace(_favoriteName) ? _favoriteName : Localizer["PageTitle"])</PageTitle>

<Ribbon TTabEnum="ReportDashboard.TabId"
        Tabs="_tabs"
        ActiveTab="_activeTab"
        ActiveTabChanged="OnActiveTabChanged" />

<h2 style="margin-top:0;">@(string.IsNullOrWhiteSpace(_favoriteName) ? Localizer["Heading"] : _favoriteName.Trim())</h2>

@if(!_loaded)
{
    <p>@Localizer["Loading"]</p>
}
else
{
    @if(_editMode)
    {
        <div class="filters-panel">
            <div class="filter-group wide">
                <div class="group-title">@Localizer["FilterGroup_Data"]</div>
                <div class="row">
                    <label>@Localizer["Label_PostingKindMulti"]</label>
                    <div class="multi-kind-list">
                        @foreach(var kind in _postingKindValues)
                        {
                            var v = (int)kind;
                            var checkedAttr = _selectedKinds.Contains(v);
                            var label = Localizer[$"PostingKind_{kind}"];
                            <label class="mk-item"><input type="checkbox" value="@v" checked="@checkedAttr" @onchange="e => OnToggleKind(v, e.Value is bool b && b)" /> @label</label>
                        }
                    </div>
                </div>
                <div class="row">
                    <label>@Localizer["Label_Interval"]</label>
                    <select @bind="_interval" @bind:after="StateHasChanged">
                        @foreach (var iv in Enum.GetValues<ReportInterval>())
                        {
                            var label = Localizer[$"Interval_{iv}"];
                            <option value="@iv">@label</option>
                        }
                    </select>
                </div>
                <div class="row inline month-row">
                    <label>@Localizer["Label_AnalysisMonth"]</label>
                    <button type="button" class="icon-btn small" title="@Localizer["Button_PrevMonth"]" @onclick="PrevMonth"><svg><use href="/icons/sprite.svg#chevron-left"/></svg></button>
                    <input type="month" value="@_analysisMonthString" @onchange="OnAnalysisMonthChange" />
                    <button type="button" class="icon-btn small" title="@Localizer["Button_NextMonth"]" @onclick="NextMonth"><svg><use href="/icons/sprite.svg#chevron-right"/></svg></button>
                </div>
                <div class="row inline">
                    <label class="chk"><input type="checkbox" @bind="_includeCategory" @bind:after="OnIncludeCategoryChanged" /> @Localizer["Label_IncludeCategory"]</label>
                    <label class="take-label">@Localizer["Label_Take"] <input type="number" min="1" max="120" @bind="_take" class="take-input" /></label>
                </div>
            </div>
            <div class="filter-group">
                <div class="group-title">@Localizer["FilterGroup_Comparisons"]</div>
                <div class="row chk"><label><input type="checkbox" @bind="_comparePrevious" /> @Localizer["Label_ComparePrev"]</label></div>
                <div class="row chk"><label><input type="checkbox" @bind="_compareYear" /> @Localizer["Label_CompareYear"]</label></div>
            </div>
            <div class="filter-group">
                <div class="group-title">@Localizer["FilterGroup_Chart"]</div>
                <div class="row chk"><label><input type="checkbox" @bind="_showChart" /> @Localizer["Label_ShowChart"]</label></div>
            </div>
        </div>
    }

    <div class="result-box">
        @if(_queryBusy)
        {
            <div class="query-overlay">@Localizer["Loading"]</div>
        }
        @if(!_queryBusy && _points.Count == 0)
        {
            <div class="empty-info">@Localizer["NoData"]</div>
        }
        else if(_points.Count > 0)
        {
            @if(_showChart)
            {
                <div class="mini-chart" aria-label="@Localizer["Aria_Chart"]">
                    @{ var byPeriod = _points.Where(p=>p.ParentGroupKey==null || p.GroupKey.StartsWith("Type:")).GroupBy(p=>p.PeriodStart).Select(g=> new { g.Key, Sum = g.Where(x=>x.ParentGroupKey==null || x.GroupKey.StartsWith("Type:")).Sum(x=>x.Amount) }).OrderBy(x=>x.Key).ToList();
                       var max = byPeriod.Select(x=>Math.Abs(x.Sum)).DefaultIfEmpty(0m).Max();
                       var scale = max==0?0:70m/max; }
                    <div class="bars">
                        @foreach(var bp in byPeriod)
                        {
                            var h = bp.Sum>0 ? (int)Math.Round((double)(bp.Sum*scale)) : (int)Math.Round((double)(-bp.Sum*scale));
                            <div class="bar-wrap" title="@bp.Key.ToString("yyyy-MM-dd") @bp.Sum">
                                <div class="bar-inner @(bp.Sum>=0?"pos":"neg")" style="height:@(h)px"></div>
                            </div>
                        }
                    </div>
                </div>
            }
            <table class="fm-table report-table expandable">
                <thead>
                    <tr>
                        <th style="width:24px;"></th>
                        <th>@Localizer["Th_Group"]</th>
                        @if(ShowCategoryColumn){<th>@Localizer["Th_Category"]</th>}
                        @if(ShowPreviousColumns){<th class="th-prev" style="text-align:right;">@PreviousHeaderLabel</th><th class="th-prev" style="text-align:right;">@Localizer["Th_DeltaPrev"]</th>}
                        @if(_compareYear){<th class="th-year" style="text-align:right;">@YearHeaderLabel</th><th class="th-year" style="text-align:right;">@Localizer["Th_DeltaYear"]</th>}
                        <th class="th-current" style="text-align:right;">@Localizer["Th_Amount"]</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var top in TopLevelRows)
                    {
                        var rowClass = IsNegativeRow(top) ? "neg" : string.Empty;
                        var hasChildren = HasChildren(top.GroupKey);
                        var expanded = hasChildren && _expanded.TryGetValue(top.GroupKey, out var exTop) && exTop;
                        <tr class="@rowClass @(top.GroupKey.StartsWith("Type:")?"type-row": (top.GroupKey.StartsWith("Category:")?"category-row":"entity-row"))">
                            <td>
                                @if(hasChildren)
                                {
                                    <button type="button" class="toggle-btn" @onclick="(()=>Toggle(top.GroupKey))" title="@(expanded?Localizer["Collapse"]:Localizer["Expand"])" aria-expanded="@expanded">
                                        <svg class="ico"><use href="/icons/sprite.svg#@(expanded?"chevron-down":"chevron-right")" /></svg>
                                    </button>
                                }
                            </td>
                            <td>@GetDisplayName(top)</td>
                            @if(ShowCategoryColumn){<td>@(string.IsNullOrWhiteSpace(top.CategoryName)?"-":top.CategoryName)</td>}
                            @if(ShowPreviousColumns){<td class="amt-prev" style="text-align:right;">@(top.PreviousAmount.HasValue? top.PreviousAmount.Value.ToString("N2") : "-")</td><td class="delta amt-prev" style="text-align:right;">@FormatDelta(top.Amount, top.PreviousAmount)</td>}
                            @if(_compareYear){<td class="amt-year" style="text-align:right;">@(top.YearAgoAmount.HasValue? top.YearAgoAmount.Value.ToString("N2") : "-")</td><td class="delta amt-year" style="text-align:right;">@FormatDelta(top.Amount, top.YearAgoAmount)</td>}
                            <td class="amt-current" style="text-align:right;">@top.Amount.ToString("N2")</td>
                        </tr>
                        @if(hasChildren && expanded)
                        {
                            foreach(var child in ChildRows(top.GroupKey))
                            {
                                var childCls = IsNegativeRow(child) ? "neg" : string.Empty;
                                var childHasChildren = HasChildren(child.GroupKey);
                                var childExpanded = childHasChildren && _expanded.TryGetValue(child.GroupKey, out var exCh) && exCh;
                                <tr class="child-row @childCls @(child.GroupKey.StartsWith("Category:")?"category-row":"entity-row")">
                                    <td>
                                        @if(childHasChildren)
                                        {
                                            <button type="button" class="toggle-btn" @onclick="(()=>Toggle(child.GroupKey))" title="@(childExpanded?Localizer["Collapse"]:Localizer["Expand"])" aria-expanded="@childExpanded">
                                                <svg class="ico"><use href="/icons/sprite.svg#@(childExpanded?"chevron-down":"chevron-right")" /></svg>
                                            </button>
                                        }
                                    </td>
                                    <td class="child-label">@GetDisplayName(child)</td>
                                    @if(ShowCategoryColumn){<td>@(string.IsNullOrWhiteSpace(child.CategoryName)?"-":child.CategoryName)</td>}
                                    @if(ShowPreviousColumns){<td class="amt-prev" style="text-align:right;">@(child.PreviousAmount.HasValue? child.PreviousAmount.Value.ToString("N2") : "-")</td><td class="delta amt-prev" style="text-align:right;">@FormatDelta(child.Amount, child.PreviousAmount)</td>}
                                    @if(_compareYear){<td class="amt-year" style="text-align:right;">@(child.YearAgoAmount.HasValue? child.YearAgoAmount.Value.ToString("N2") : "-")</td><td class="delta amt-year" style="text-align:right;">@FormatDelta(child.Amount, child.YearAgoAmount)</td>}
                                    <td class="amt-current" style="text-align:right;">@child.Amount.ToString("N2")</td>
                                </tr>
                                @if(childHasChildren && childExpanded)
                                {
                                    foreach(var grand in ChildRows(child.GroupKey))
                                    {
                                        var gCls = IsNegativeRow(grand) ? "neg" : string.Empty;
                                        <tr class="child-row entity-row @gCls">
                                            <td></td>
                                            <td class="child-label">@GetDisplayName(grand)</td>
                                            @if(ShowCategoryColumn){<td></td>}
                                            @if(ShowPreviousColumns){<td class="amt-prev" style="text-align:right;">@(grand.PreviousAmount.HasValue? grand.PreviousAmount.Value.ToString("N2") : "-")</td><td class="delta amt-prev" style="text-align:right;">@FormatDelta(grand.Amount, grand.PreviousAmount)</td>}
                                            @if(_compareYear){<td class="amt-year" style="text-align:right;">@(grand.YearAgoAmount.HasValue? grand.YearAgoAmount.Value.ToString("N2") : "-")</td><td class="delta amt-year" style="text-align:right;">@FormatDelta(grand.Amount, grand.YearAgoAmount)</td>}
                                            <td class="amt-current" style="text-align:right;">@grand.Amount.ToString("N2")</td>
                                        </tr>
                                    }
                                }
                            }
                        }
                    }
                    @if(ShowTotalRow)
                    {
                        var totals = TotalRow;
                        <tr class="total-row">
                            <td></td>
                            <td>@Localizer["Total_Label"]</td>
                            @if(ShowCategoryColumn){<td></td>}
                            @if(ShowPreviousColumns){<td class="amt-prev" style="text-align:right;">@(totals.Prev.HasValue ? totals.Prev.Value.ToString("N2") : "-")</td><td class="delta amt-prev" style="text-align:right;">@(totals.Prev.HasValue ? FormatDelta(totals.Amount, totals.Prev) : "-")</td>}
                            @if(_compareYear){<td class="amt-year" style="text-align:right;">@(totals.Year.HasValue ? totals.Year.Value.ToString("N2") : "-")</td><td class="delta amt-year" style="text-align:right;">@(totals.Year.HasValue ? FormatDelta(totals.Amount, totals.Year) : "-")</td>}
                            <td class="amt-current" style="text-align:right;">@totals.Amount.ToString("N2")</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
}

@if(_showFavDialog)
{
    <div class="modal-overlay" @onclick="CloseFavoriteDialog">
        <div class="modal" @onclick:stopPropagation="true">
            <h3>@(_favDialogIsUpdate ? Localizer["Dialog_Fav_Title_Update"] : Localizer["Dialog_Fav_Title_New"])</h3>
            <div class="form-row">
                <label>@Localizer["Dialog_Fav_Name"]</label>
                <input type="text" @bind="_favoriteName" />
            </div>
            @if(!string.IsNullOrWhiteSpace(_favoriteError))
            {
                <div class="error-msg">@_favoriteError</div>
            }
            <div class="dialog-actions">
                <button class="btn" @onclick="SubmitFavoriteDialog" disabled="@string.IsNullOrWhiteSpace(_favoriteName)">@Localizer["Dialog_Save"]</button>
                <button class="btn secondary" @onclick="CloseFavoriteDialog">@Localizer["Dialog_Cancel"]</button>
            </div>
        </div>
    </div>
}

@if(_showFilterDialog)
{
    <div class="modal-overlay" @onclick="CloseFilterDialog">
        <div class="modal" style="min-width:540px;" @onclick:stopPropagation="true">
            <h3>@Localizer["FilterDialog_Title"]</h3>
            @if (_filterOptionsLoading)
            {
                <div class="small-loading">@Localizer["Loading"]</div>
            }
            else if (!_filterOptionsByKind.Any(kvp => kvp.Value.Count > 0))
            {
                <div class="small-empty">@Localizer["NoData"]</div>
            }
            else
            {
                @if (IsMulti)
                {
                    <div class="tabs-bar" role="tablist">
                        @foreach (var k in _selectedKinds)
                        {
                            var kind = (PostingKind)k;
                            var isActive = k == GetActiveFilterTabKind();
                            var cls = isActive ? "tab-btn active" : "tab-btn";
                            <button type="button" class="@cls" role="tab" aria-selected="@isActive" @onclick="(()=> { _activeFilterTabKind = k; StateHasChanged(); })">@Localizer[$"PostingKind_{kind}"]</button>
                        }
                    </div>
                }
                <div class="scroll-box option-list">
                    @foreach (var opt in GetOptionsForKind(GetActiveFilterTabKind()))
                    {
                        var currentKind = (PostingKind)GetActiveFilterTabKind();
                        var sel = IsOptionSelectedTemp(currentKind, opt.Id);
                        <label class="mk-item line"><input type="checkbox" checked="@sel" @onchange="e => ToggleTempForKind(currentKind, opt.Id, e.Value is bool b && b)" /> @opt.Name</label>
                    }
                    @if (GetOptionsForKind(GetActiveFilterTabKind()).Count == 0)
                    {
                        <div class="small-empty">@Localizer["NoData"]</div>
                    }
                </div>
            }
            <div class="dialog-actions">
                <button class="btn" @onclick="ApplyFilterDialog" disabled="@(_filterOptionsLoading)">@Localizer["FilterDialog_Apply"]</button>
                <button class="btn secondary" @onclick="CloseFilterDialog">@Localizer["FilterDialog_Cancel"]</button>
                <button class="btn secondary" @onclick="(()=> { ClearTempFilters(); StateHasChanged(); })" disabled="@(SelectedTempFiltersCount()==0)">@Localizer["Button_ClearFilters"]</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter, SupplyParameterFromQuery] public Guid? FavoriteId { get; set; }
    [Parameter, SupplyParameterFromQuery] public bool? Edit { get; set; }

    private enum TabId { Dashboard }
    private List<Ribbon<TabId>.RibbonTab<TabId>> _tabs = new();
    private TabId _activeTab = TabId.Dashboard;
    private Task OnActiveTabChanged(TabId t){ _activeTab = t; return Task.CompletedTask; }

    private void BuildRibbon()
    {
        var navGroup = new Ribbon<TabId>.RibbonGroup
        {
            Title = Localizer["Ribbon_Navigation"],
            Items = new()
            {
                new Ribbon<TabId>.RibbonItem{ Label=Localizer["Ribbon_BackToOverview"], IconSvg="<svg><use href='/icons/sprite.svg#back'/></svg>", Size=Ribbon<TabId>.RibbonItemSize.Large, Callback= ()=> { Nav.NavigateTo("/reports"); return Task.CompletedTask; } }
            }
        };
        var actions = new Ribbon<TabId>.RibbonGroup
        {
            Title = Localizer["Ribbon_ReportActions"],
            Items = new()
            {
                new Ribbon<TabId>.RibbonItem{ Label=_editMode? Localizer["Ribbon_View"]: Localizer["Ribbon_Edit"], IconSvg=_editMode? "<svg><use href='/icons/sprite.svg#eye'/></svg>":"<svg><use href='/icons/sprite.svg#edit'/></svg>", Size=Ribbon<TabId>.RibbonItemSize.Large, Callback= ()=> { ToggleEditMode(); return Task.CompletedTask; } },
                new Ribbon<TabId>.RibbonItem{ Label=Localizer["Ribbon_Save"], IconSvg="<svg><use href='/icons/sprite.svg#save'/></svg>", Disabled=!_editMode, Callback= ()=> { OnSaveRequested(); return Task.CompletedTask; } },
                new Ribbon<TabId>.RibbonItem{ Label=Localizer["Ribbon_SaveAs"], IconSvg="<svg><use href='/icons/sprite.svg#save-as'/></svg>", Disabled=!_editMode, Callback= ()=> { OpenFavoriteDialog(false); return Task.CompletedTask; } },
                new Ribbon<TabId>.RibbonItem{ Label=Localizer["Ribbon_ReloadData"], IconSvg="<svg><use href='/icons/sprite.svg#refresh'/></svg>", Callback = ()=> { _=LoadAsync(); return Task.CompletedTask; } }
            }
        };
        var filters = new Ribbon<TabId>.RibbonGroup
        {
            Title = Localizer["Ribbon_Filter"],
            Items = new()
            {
                new Ribbon<TabId>.RibbonItem{ Label=Localizer["Ribbon_OpenFilters"], IconSvg="<svg><use href='/icons/sprite.svg#filters'/></svg>", Disabled=_filterOptionsLoading || !_editMode,  Size=Ribbon<TabId>.RibbonItemSize.Small, Callback= ()=> { OpenFilterDialog(); return Task.CompletedTask; } },
                new Ribbon<TabId>.RibbonItem{ Label=Localizer["Ribbon_ClearFilters"], IconSvg="<svg><use href='/icons/sprite.svg#clear'/></svg>", Disabled= SelectedFiltersCount()==0, Size=Ribbon<TabId>.RibbonItemSize.Small, Callback= ()=> { ClearFilters(); return Task.CompletedTask; } },
            }
        };
        _tabs = new() { new Ribbon<TabId>.RibbonTab<TabId> { Id = TabId.Dashboard, Title = Localizer["Ribbon_Tab"], Groups = new() { navGroup, actions, filters } } };
    }

    // State
    private bool _loaded;
    private bool _queryBusy;
    private bool _editMode;
    private bool _showFilterDialog;

    private List<int> _selectedKinds = new(){ (int)PostingKind.Bank }; // multi selection
    private ReportInterval _interval = ReportInterval.Month;
    private bool _includeCategory;
    private bool _comparePrevious;
    private bool _compareYear;
    private bool _showChart = true;
    private int _take = 24;
    private string _favoriteName = string.Empty;
    private Guid? _activeFavoriteId;
    private string? _favoriteError;

    private readonly PostingKind[] _postingKindValues = new[]{ PostingKind.Bank, PostingKind.Contact, PostingKind.SavingsPlan, PostingKind.Security };

    private readonly Dictionary<string,bool> _expanded = new();

    private List<PointDto> _points = new();
    private List<PointDto> _latestPerGroup = new();
    private int? _activeFilterTabKind; // active tab (kind) in filter dialog

    private bool IsMulti => _selectedKinds.Count > 1;
    private int PrimaryKind => _selectedKinds.First();
    private bool IsCategorySupported(int kind) => kind == (int)PostingKind.Contact || kind == (int)PostingKind.SavingsPlan || kind == (int)PostingKind.Security;
    private bool IsCategoryGroupingSingle => !IsMulti && _includeCategory && IsCategorySupported(PrimaryKind);
    private bool ShowCategoryColumn => _includeCategory && !IsCategoryGroupingSingle;
    private bool ShowPreviousColumns => _comparePrevious && _interval is not ReportInterval.Year and not ReportInterval.Ytd;
    private string PreviousHeaderLabel => Localizer["Th_Prev"];
    private string YearHeaderLabel => Localizer["Th_YearAgo"];

    // Analysis month handling
    private DateTime _analysisMonth = new DateTime(DateTime.UtcNow.Year, DateTime.UtcNow.Month, 1);
    private string _analysisMonthString => _analysisMonth.ToString("yyyy-MM");
    private void OnAnalysisMonthChange(ChangeEventArgs e)
    {
        var s = e?.Value?.ToString();
        if (!string.IsNullOrWhiteSpace(s) && DateTime.TryParse(s + "-01", out var d))
        {
            _analysisMonth = new DateTime(d.Year, d.Month, 1);
            _ = LoadAsync();
        }
    }
    private void PrevMonth()
    {
        _analysisMonth = _analysisMonth.AddMonths(-1);
        _ = LoadAsync();
    }
    private void NextMonth()
    {
        _analysisMonth = _analysisMonth.AddMonths(1);
        _ = LoadAsync();
    }

    // Top-level filter UI state (overlay)
    private bool _filterOptionsLoading;
    private Dictionary<int, List<SimpleOption>> _filterOptionsByKind = new();
    // Selected filters (entity level)
    private HashSet<Guid> _selAccounts = new();
    private HashSet<Guid> _selContacts = new();
    private HashSet<Guid> _selSavings = new();
    private HashSet<Guid> _selSecurities = new();
    // Selected filters (category level)
    private HashSet<Guid> _selContactCats = new();
    private HashSet<Guid> _selSavingsCats = new();
    private HashSet<Guid> _selSecurityCats = new();

    // Dialog temp buffers
    private HashSet<Guid> _tempAccounts = new();
    private HashSet<Guid> _tempContacts = new();
    private HashSet<Guid> _tempSavings = new();
    private HashSet<Guid> _tempSecurities = new();
    private HashSet<Guid> _tempContactCats = new();
    private HashSet<Guid> _tempSavingsCats = new();
    private HashSet<Guid> _tempSecurityCats = new();

    private sealed class SimpleOption
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }

    private async Task LoadFilterOptionsAsync()
    {
        _filterOptionsLoading = true; _filterOptionsByKind.Clear();
        try
        {
            foreach (var k in _selectedKinds)
            {
                var kind = (PostingKind)k;
                var list = new List<SimpleOption>();
                if (_includeCategory && IsCategorySupported(k))
                {
                    if (kind == PostingKind.Contact)
                    {
                        var resp = await Http.GetAsync("/api/contact-categories");
                        if (resp.IsSuccessStatusCode)
                        {
                            var cats = await resp.Content.ReadFromJsonAsync<List<ContactCategoryDto>>() ?? new();
                            list = cats.Select(c => new SimpleOption { Id = c.Id, Name = c.Name }).ToList();
                        }
                    }
                    else if (kind == PostingKind.SavingsPlan)
                    {
                        var resp = await Http.GetAsync("/api/savings-plan-categories");
                        if (resp.IsSuccessStatusCode)
                        {
                            var cats = await resp.Content.ReadFromJsonAsync<List<SavingsPlanCategoryDto>>() ?? new();
                            list = cats.Select(c => new SimpleOption { Id = c.Id, Name = c.Name }).ToList();
                        }
                    }
                    else if (kind == PostingKind.Security)
                    {
                        var resp = await Http.GetAsync("/api/security-categories");
                        if (resp.IsSuccessStatusCode)
                        {
                            var cats = await resp.Content.ReadFromJsonAsync<List<SecurityCategoryDto>>() ?? new();
                            list = cats.Select(c => new SimpleOption { Id = c.Id, Name = c.Name }).ToList();
                        }
                    }
                }
                else
                {
                    if (kind == PostingKind.Bank)
                    {
                        var resp = await Http.GetAsync("/api/accounts?skip=0&take=1000");
                        if (resp.IsSuccessStatusCode)
                        {
                            var acc = await resp.Content.ReadFromJsonAsync<List<AccountDto>>() ?? new();
                            list = acc.Select(a => new SimpleOption { Id = a.Id, Name = a.Name }).ToList();
                        }
                    }
                    else if (kind == PostingKind.Contact)
                    {
                        var resp = await Http.GetAsync("/api/contacts?all=true");
                        if (resp.IsSuccessStatusCode)
                        {
                            var con = await resp.Content.ReadFromJsonAsync<List<ContactDto>>() ?? new();
                            list = con.Select(c => new SimpleOption { Id = c.Id, Name = c.Name }).ToList();
                        }
                    }
                    else if (kind == PostingKind.SavingsPlan)
                    {
                        var resp = await Http.GetAsync("/api/savings-plans?onlyActive=false");
                        if (resp.IsSuccessStatusCode)
                        {
                            var sav = await resp.Content.ReadFromJsonAsync<List<SavingsPlanDto>>() ?? new();
                            list = sav.Select(p => new SimpleOption { Id = p.Id, Name = p.Name }).ToList();
                        }
                    }
                    else if (kind == PostingKind.Security)
                    {
                        var resp = await Http.GetAsync("/api/securities?onlyActive=false");
                        if (resp.IsSuccessStatusCode)
                        {
                            var sec = await resp.Content.ReadFromJsonAsync<List<SecurityDto>>() ?? new();
                            list = sec.Select(s => new SimpleOption { Id = s.Id, Name = s.Name }).ToList();
                        }
                    }
                }
                _filterOptionsByKind[k] = list;
            }
        }
        finally
        {
            _filterOptionsLoading = false;
            StateHasChanged();
        }
    }

    private void ClearFilters()
    {
        _selAccounts.Clear();
        _selContacts.Clear();
        _selSavings.Clear();
        _selSecurities.Clear();
        _selContactCats.Clear();
        _selSavingsCats.Clear();
        _selSecurityCats.Clear();
        _ = LoadAsync();
    }

    private void OpenFilterDialog()
    {
        // copy current selections into temp
        _tempAccounts = new HashSet<Guid>(_selAccounts);
        _tempContacts = new HashSet<Guid>(_selContacts);
        _tempSavings = new HashSet<Guid>(_selSavings);
        _tempSecurities = new HashSet<Guid>(_selSecurities);
        _tempContactCats = new HashSet<Guid>(_selContactCats);
        _tempSavingsCats = new HashSet<Guid>(_selSavingsCats);
        _tempSecurityCats = new HashSet<Guid>(_selSecurityCats);

        _showFilterDialog = true;
        _activeFilterTabKind = _selectedKinds.FirstOrDefault();
        _ = LoadFilterOptionsAsync();
        StateHasChanged();
    }

    private void CloseFilterDialog() => _showFilterDialog = false;

    private bool IsOptionSelectedTemp(PostingKind kind, Guid id)
    {
        if (_includeCategory && IsCategorySupported((int)kind))
        {
            return kind switch
            {
                PostingKind.Contact => _tempContactCats.Contains(id),
                PostingKind.SavingsPlan => _tempSavingsCats.Contains(id),
                PostingKind.Security => _tempSecurityCats.Contains(id),
                _ => false
            };
        }
        else
        {
            return kind switch
            {
                PostingKind.Bank => _tempAccounts.Contains(id),
                PostingKind.Contact => _tempContacts.Contains(id),
                PostingKind.SavingsPlan => _tempSavings.Contains(id),
                PostingKind.Security => _tempSecurities.Contains(id),
                _ => false
            };
        }
    }

    private void ToggleTempForKind(PostingKind kind, Guid id, bool isChecked)
    {
        HashSet<Guid> set = _includeCategory && IsCategorySupported((int)kind)
            ? kind switch
            {
                PostingKind.Contact => _tempContactCats,
                PostingKind.SavingsPlan => _tempSavingsCats,
                PostingKind.Security => _tempSecurityCats,
                _ => _tempAccounts
            }
            : kind switch
            {
                PostingKind.Bank => _tempAccounts,
                PostingKind.Contact => _tempContacts,
                PostingKind.SavingsPlan => _tempSavings,
                PostingKind.Security => _tempSecurities,
                _ => _tempAccounts
            };
        if (isChecked) { set.Add(id); } else { set.Remove(id); }
    }

    private int SelectedFiltersCount()
    {
        if (IsMulti)
        {
            var entityCount = _selAccounts.Count + _selContacts.Count + _selSavings.Count + _selSecurities.Count;
            var catCount = _selContactCats.Count + _selSavingsCats.Count + _selSecurityCats.Count;
            // In category mode, only categories are applied for supported kinds; bank uses entity
            return _includeCategory ? (catCount + _selAccounts.Count) : entityCount;
        }
        else
        {
            var kind = (PostingKind)PrimaryKind;
            if (_includeCategory && IsCategorySupported(PrimaryKind))
            {
                return kind switch
                {
                    PostingKind.Contact => _selContactCats.Count,
                    PostingKind.SavingsPlan => _selSavingsCats.Count,
                    PostingKind.Security => _selSecurityCats.Count,
                    _ => 0
                };
            }
            else
            {
                return kind switch
                {
                    PostingKind.Bank => _selAccounts.Count,
                    PostingKind.Contact => _selContacts.Count,
                    PostingKind.SavingsPlan => _selSavings.Count,
                    PostingKind.Security => _selSecurities.Count,
                    _ => 0
                };
            }
        }
    }

    private int SelectedTempFiltersCount()
    {
        if (IsMulti)
        {
            var entityCount = _tempAccounts.Count + _tempContacts.Count + _tempSavings.Count + _tempSecurities.Count;
            var catCount = _tempContactCats.Count + _tempSavingsCats.Count + _tempSecurityCats.Count;
            return _includeCategory ? (catCount + _tempAccounts.Count) : entityCount;
        }
        else
        {
            var kind = (PostingKind)PrimaryKind;
            if (_includeCategory && IsCategorySupported(PrimaryKind))
            {
                return kind switch
                {
                    PostingKind.Contact => _tempContactCats.Count,
                    PostingKind.SavingsPlan => _tempSavingsCats.Count,
                    PostingKind.Security => _tempSecurityCats.Count,
                    _ => 0
                };
            }
            else
            {
                return kind switch
                {
                    PostingKind.Bank => _tempAccounts.Count,
                    PostingKind.Contact => _tempContacts.Count,
                    PostingKind.SavingsPlan => _tempSavings.Count,
                    PostingKind.Security => _tempSecurities.Count,
                    _ => 0
                };
            }
        }
    }

    private void ClearTempFilters()
    {
        _tempAccounts.Clear();
        _tempContacts.Clear();
        _tempSavings.Clear();
        _tempSecurities.Clear();
        _tempContactCats.Clear();
        _tempSavingsCats.Clear();
        _tempSecurityCats.Clear();
    }

    private async Task ApplyFilterDialog()
    {
        _selAccounts = new HashSet<Guid>(_tempAccounts);
        _selContacts = new HashSet<Guid>(_tempContacts);
        _selSavings = new HashSet<Guid>(_tempSavings);
        _selSecurities = new HashSet<Guid>(_tempSecurities);
        _selContactCats = new HashSet<Guid>(_tempContactCats);
        _selSavingsCats = new HashSet<Guid>(_tempSavingsCats);
        _selSecurityCats = new HashSet<Guid>(_tempSecurityCats);
        _showFilterDialog = false;
        await LoadAsync();
    }

    private IEnumerable<PointDto> TopLevelRows
    {
        get
        {
            if (IsMulti)
            {
                return _points.Where(p => p.GroupKey.StartsWith("Type:"))
                    .GroupBy(p => p.GroupKey)
                    .Select(g => g.OrderBy(x => x.PeriodStart).Last())
                    .OrderBy(p => IsNegativeRow(p))
                    .ThenByDescending(p => p.Amount)
                    .ToList();
            }
            if (IsCategoryGroupingSingle)
            {
                return _points.Where(p => p.ParentGroupKey == null && p.GroupKey.StartsWith("Category:"))
                    .GroupBy(p => p.GroupKey)
                    .Select(g => g.OrderBy(x => x.PeriodStart).Last())
                    .OrderBy(p => IsNegativeRow(p))
                    .ThenByDescending(p => p.Amount);
            }
            return _latestPerGroup
                .OrderBy(p => IsNegativeRow(p))
                .ThenByDescending(p => p.Amount);
        }
    }

    private IEnumerable<PointDto> ChildRows(string parentKey)
    {
        if (parentKey.StartsWith("Type:"))
        {
            // Determine posting kind from the parent key
            var kindName = parentKey.Substring("Type:".Length);
            var hasKind = Enum.TryParse<PostingKind>(kindName, out var kind);

            // Category mode only applies to kinds that support categories
            var useCategoryChildren = _includeCategory && hasKind && IsCategorySupported((int)kind);

            if (useCategoryChildren)
            {
                // Category children
                return _points.Where(p => p.ParentGroupKey == parentKey && p.GroupKey.StartsWith("Category:"))
                    .GroupBy(p => p.GroupKey)
                    .Select(g => g.OrderBy(x => x.PeriodStart).Last())
                    .OrderBy(p => IsNegativeRow(p))
                    .ThenByDescending(p => p.Amount);
            }

            // Entity children; prefer linked by ParentGroupKey, but also include fallback when linkage is missing
            IEnumerable<PointDto> candidates = _points.Where(p => p.ParentGroupKey == parentKey && !p.GroupKey.StartsWith("Category:"));
            if (!candidates.Any() && hasKind)
            {
                // Fallback: derive by GroupKey prefix when service did not set ParentGroupKey
                // Account -> "Account:", Contact -> "Contact:", SavingsPlan -> "SavingsPlan:", Security -> "Security:"
                var prefix = kind switch
                {
                    PostingKind.Bank => "Account:",
                    PostingKind.Contact => "Contact:",
                    PostingKind.SavingsPlan => "SavingsPlan:",
                    PostingKind.Security => "Security:",
                    _ => string.Empty
                };
                if (!string.IsNullOrEmpty(prefix))
                {
                    candidates = _points.Where(p => p.ParentGroupKey == null && p.GroupKey.StartsWith(prefix));
                }
            }

            return candidates
                .GroupBy(p => p.GroupKey)
                .Select(g => g.OrderBy(x => x.PeriodStart).Last())
                .OrderBy(p => IsNegativeRow(p))
                .ThenByDescending(p => p.Amount);
        }
        if (parentKey.StartsWith("Category:"))
        {
            return _points.Where(p => p.ParentGroupKey == parentKey)
                .GroupBy(p => p.GroupKey)
                .Select(g => g.OrderBy(x => x.PeriodStart).Last())
                .OrderBy(p => IsNegativeRow(p))
                .ThenByDescending(p => p.Amount);
        }
        return Enumerable.Empty<PointDto>();
    }

    private bool HasChildren(string key) => ChildRows(key).Any();

    protected override async Task OnParametersSetAsync()
    {
        if (!_loaded)
        {
            _loaded = true;
        }

        _editMode = Edit.GetValueOrDefault(false);

        if (FavoriteId.HasValue)
        {
            await LoadAndApplyFavoriteAsync(FavoriteId.Value);
        }
        BuildRibbon();
        await LoadFilterOptionsAsync();
        if (_points.Count == 0)
        {
            await LoadAsync();
        }
    }

    private async Task LoadAndApplyFavoriteAsync(Guid id)
    {
        try
        {
            var fav = await Http.GetFromJsonAsync<FavoriteDto>($"/api/report-favorites/{id}");
            if (fav is not null)
            {
                ApplyFavorite(fav);
            }
        }
        catch (Exception ex)
        {
            _favoriteError = ex.Message;
        }
    }

    private async Task LoadAsync()
    {
        if(_queryBusy) { return; }
        if (_selectedKinds.Count == 0) { return; }
        _queryBusy = true; _favoriteError = null; StateHasChanged();
        try
        {
            var filters = BuildFilters();
            var req = new QueryRequest(PrimaryKind, _interval, _take, _includeCategory, _comparePrevious, _compareYear, IsMulti ? _selectedKinds : null, _analysisMonth, filters);
            var resp = await Http.PostAsJsonAsync("/api/report-aggregates", req);
            if (resp.IsSuccessStatusCode)
            {
                var result = await resp.Content.ReadFromJsonAsync<AggregationResponse>() ?? new AggregationResponse(_interval, new(), false, false);
                _points = result.Points.OrderBy(p => p.GroupKey).ThenBy(p => p.PeriodStart).ToList();
                _latestPerGroup = _points.Where(p => !p.GroupKey.StartsWith("Type:") && !p.GroupKey.StartsWith("Category:") && p.ParentGroupKey == null)
                    .GroupBy(p => p.GroupKey)
                    .Select(g => g.OrderBy(x => x.PeriodStart).Last())
                    .OrderBy(p => IsNegativeRow(p))
                    .ThenByDescending(p => p.Amount)
                    .ToList();
                if (!IsCategoryGroupingSingle && !IsMulti)
                {
                    _expanded.Clear();
                }
            }
        }
        catch (Exception ex)
        {
            _favoriteError = ex.Message;
        }
        finally
        {
            _queryBusy = false;
            BuildRibbon();
            StateHasChanged();
        }
    }

    private FiltersRequest? BuildFilters()
    {
        // Build allow-lists based on current selection and mode
        if (SelectedFiltersCount() == 0)
        {
            return null;
        }
        if (_includeCategory)
        {
            return new FiltersRequest(
                _selAccounts.ToList(),
                null,
                null,
                null,
                _selContactCats.ToList(),
                _selSavingsCats.ToList(),
                _selSecurityCats.ToList());
        }
        else
        {
            return new FiltersRequest(
                _selAccounts.ToList(),
                _selContacts.ToList(),
                _selSavings.ToList(),
                _selSecurities.ToList(),
                null,
                null,
                null);
        }
    }

    private void Toggle(string key)
    {
        if (_expanded.ContainsKey(key))
        {
            _expanded[key] = !_expanded[key];
        }
        else
        {
            _expanded[key] = true;
        }
    }

    private void OnToggleKind(int value, bool isChecked)
    {
        var beforePrimary = PrimaryKind;
        if (isChecked)
        {
            if (!_selectedKinds.Contains(value)) { _selectedKinds.Add(value); }
        }
        else
        {
            _selectedKinds.Remove(value);
            if (_selectedKinds.Count == 0)
            {
                _selectedKinds.Add((int)PostingKind.Bank);
            }
        }
        _selectedKinds = _selectedKinds.Distinct().ToList();
        // Reset filters when primary kind changes or multi-mode toggled
        if (beforePrimary != PrimaryKind || IsMulti)
        {
            ClearFilters();
            _ = LoadFilterOptionsAsync();
        }
        _ = LoadAsync();
    }

    private void OnIncludeCategoryChanged()
    {
        // switching between entity/category modes: clear selections to avoid mixing
        ClearFilters();
        _ = LoadFilterOptionsAsync();
        _ = LoadAsync();
    }

    // Active tab kind for filter dialog (stores PostingKind as int) - field declared above with other state

    private string GetDisplayName(PointDto p)
    {
        if (p.GroupKey.StartsWith("Type:"))
        {
            var part = p.GroupKey.Split(':')[1];
            return Localizer[$"PostingKind_{part}"];
        }
        if (p.GroupKey.StartsWith("Category:") && p.GroupKey.EndsWith(":_none"))
        {
            return Localizer["Category_Uncategorized"];    
        }
        return p.GroupName;
    }

    private static bool IsNegativeRow(PointDto p)
    {
        if (p.Amount < 0m)
        {
            return true;
        }
        if (p.Amount == 0m)
        {
            var hasPrev = p.PreviousAmount.HasValue;
            var hasYear = p.YearAgoAmount.HasValue;
            if (hasPrev || hasYear)
            {
                var prevNeg = hasPrev && p.PreviousAmount!.Value < 0m;
                var yearNeg = hasYear && p.YearAgoAmount!.Value < 0m;
                // mark negative when all available comparison baselines are negative
                if ((!hasPrev || prevNeg) && (!hasYear || yearNeg))
                {
                    return true;
                }
            }
        }
        return false;
    }

    private string FormatDelta(decimal current, decimal? baseline)
    {
        if (!baseline.HasValue) { return "-"; }
        if (baseline.Value == 0m) { return "∞"; }
        var diff = current - baseline.Value;
        var pct = diff / baseline.Value * 100m;
        return string.Format("{0} ({1:+0.0;-0.0;0.0}%)", diff.ToString("N2"), pct);
    }

    private async Task SaveFavoriteAsync()
    {
        var payload = new FavCreate
        {
            Name = string.IsNullOrWhiteSpace(_favoriteName) ? Localizer["Default_FavoriteName"] : _favoriteName.Trim(),
            PostingKind = PrimaryKind,
            IncludeCategory = _includeCategory,
            Interval = _interval,
            ComparePrevious = _comparePrevious,
            CompareYear = _compareYear,
            ShowChart = _showChart,
            Expandable = true,
            PostingKinds = IsMulti ? _selectedKinds.ToArray() : null,
            Filters = ToFavFilters(BuildFilters())
        };
        var resp = await Http.PostAsJsonAsync("/api/report-favorites", payload);
        if (resp.IsSuccessStatusCode)
        {
            var dto = await resp.Content.ReadFromJsonAsync<FavoriteDto>();
            if (dto is not null)
            {
                _activeFavoriteId = dto.Id;
                _favoriteName = dto.Name;
                BuildRibbon();
                var uri = new Uri(Nav.Uri);
                var baseUrl = uri.GetLeftPart(UriPartial.Path);
                Nav.NavigateTo($"{baseUrl}?favoriteId={_activeFavoriteId}&edit=false", forceLoad: false);
            }
        }
        else
        {
            _favoriteError = await resp.Content.ReadAsStringAsync();
        }
        StateHasChanged();
    }

    private async Task UpdateFavoriteAsync()
    {
        if (!_activeFavoriteId.HasValue) { return; }
        var payload = new FavCreate
        {
            Name = _favoriteName.Trim(),
            PostingKind = PrimaryKind,
            IncludeCategory = _includeCategory,
            Interval = _interval,
            ComparePrevious = _comparePrevious,
            CompareYear = _compareYear,
            ShowChart = _showChart,
            Expandable = true,
            PostingKinds = IsMulti ? _selectedKinds.ToArray() : null,
            Filters = ToFavFilters(BuildFilters())
        };
        var resp = await Http.PutAsJsonAsync($"/api/report-favorites/{_activeFavoriteId}", payload);
        if (resp.IsSuccessStatusCode)
        {
            var dto = await resp.Content.ReadFromJsonAsync<FavoriteDto>();
            if (dto is not null)
            {
                _favoriteName = dto.Name;
            }
        }
        else
        {
            _favoriteError = await resp.Content.ReadAsStringAsync();
        }
        StateHasChanged();
    }

    private async Task DeleteFavoriteAsync(Guid id)
    {
        var resp = await Http.DeleteAsync($"/api/report-favorites/{id}");
        if (resp.IsSuccessStatusCode)
        {
            _activeFavoriteId = null;
            _favoriteName = string.Empty;
            BuildRibbon();
            Nav.NavigateTo("/reports");
        }
    }

    private void ApplyFavorite(FavoriteDto fav)
    {
        _activeFavoriteId = fav.Id;
        _favoriteName = fav.Name;
        _selectedKinds = fav.PostingKinds?.Count > 0 ? fav.PostingKinds.Select(x=>x).ToList() : new List<int>{ fav.PostingKind };
        _includeCategory = fav.IncludeCategory;
        _interval = fav.Interval;
        _comparePrevious = fav.ComparePrevious;
        _compareYear = fav.CompareYear;
        _showChart = fav.ShowChart;
        // apply saved filters (all dimensions)
        _selAccounts = new HashSet<Guid>(fav.Filters?.AccountIds ?? Array.Empty<Guid>());
        _selContacts = new HashSet<Guid>(fav.Filters?.ContactIds ?? Array.Empty<Guid>());
        _selSavings = new HashSet<Guid>(fav.Filters?.SavingsPlanIds ?? Array.Empty<Guid>());
        _selSecurities = new HashSet<Guid>(fav.Filters?.SecurityIds ?? Array.Empty<Guid>());
        _selContactCats = new HashSet<Guid>(fav.Filters?.ContactCategoryIds ?? Array.Empty<Guid>());
        _selSavingsCats = new HashSet<Guid>(fav.Filters?.SavingsPlanCategoryIds ?? Array.Empty<Guid>());
        _selSecurityCats = new HashSet<Guid>(fav.Filters?.SecurityCategoryIds ?? Array.Empty<Guid>());
        _ = LoadFilterOptionsAsync();
        BuildRibbon();
        _ = LoadAsync();
    }

    private bool _showFavDialog;
    private bool _favDialogIsUpdate;
    private void OpenFavoriteDialog(bool update)
    {
        _favDialogIsUpdate = update;
        if (!update) { _favoriteName = string.Empty; }
        _favoriteError = null;
        _showFavDialog = true;
        StateHasChanged();
    }
    private void CloseFavoriteDialog() => _showFavDialog = false;
    private void SubmitFavoriteDialog()
    {
        if (_favDialogIsUpdate && _activeFavoriteId.HasValue) { _ = UpdateFavoriteAsync(); }
        else { _ = SaveFavoriteAsync(); }
        _showFavDialog = false;
    }

    private void ToggleEditMode()
    {
        _editMode = !_editMode;
        BuildRibbon();
        var uri = new Uri(Nav.Uri);
        var baseUrl = uri.GetLeftPart(UriPartial.Path);
        var favPart = _activeFavoriteId.HasValue ? $"favoriteId={_activeFavoriteId.Value}&" : string.Empty;
        Nav.NavigateTo($"{baseUrl}?{favPart}edit={_editMode}", forceLoad: false);
    }

    private void OnSaveRequested()
    {
        if (_activeFavoriteId.HasValue)
        {
            _ = UpdateFavoriteAsync();
            ToggleEditMode();
        }
        else
        {
            OpenFavoriteDialog(false);
        }
    }

    // Helpers for filter dialog tabs/options
    private int GetActiveFilterTabKind()
    {
        if (_activeFilterTabKind.HasValue && _selectedKinds.Contains(_activeFilterTabKind.Value))
        {
            return _activeFilterTabKind.Value;
        }
        return _selectedKinds.First();
    }

    private List<SimpleOption> GetOptionsForKind(int k)
    {
        return _filterOptionsByKind.TryGetValue(k, out var list) ? list : new List<SimpleOption>();
    }

    private sealed record QueryRequest(int PostingKind, ReportInterval Interval, int Take, bool IncludeCategory, bool ComparePrevious, bool CompareYear, IReadOnlyCollection<int>? PostingKinds, DateTime? AnalysisDate, FiltersRequest? Filters);
    private sealed record FiltersRequest(IReadOnlyCollection<Guid>? AccountIds, IReadOnlyCollection<Guid>? ContactIds, IReadOnlyCollection<Guid>? SavingsPlanIds, IReadOnlyCollection<Guid>? SecurityIds, IReadOnlyCollection<Guid>? ContactCategoryIds, IReadOnlyCollection<Guid>? SavingsPlanCategoryIds, IReadOnlyCollection<Guid>? SecurityCategoryIds);
    private sealed record AggregationResponse(ReportInterval Interval, List<PointDto> Points, bool ComparedPrevious, bool ComparedYear);
    private sealed record PointDto(DateTime PeriodStart, string GroupKey, string GroupName, string? CategoryName, decimal Amount, string? ParentGroupKey, decimal? PreviousAmount, decimal? YearAgoAmount);
    private sealed record FavoriteDto(Guid Id, string Name, int PostingKind, bool IncludeCategory, ReportInterval Interval, bool ComparePrevious, bool CompareYear, bool ShowChart, bool Expandable, DateTime CreatedUtc, DateTime? ModifiedUtc, IReadOnlyCollection<int> PostingKinds, FavFiltersDto? Filters);

    private sealed class FavCreate
    {
        public string Name { get; set; } = string.Empty;
        public int PostingKind { get; set; }
        public bool IncludeCategory { get; set; }
        public ReportInterval Interval { get; set; }
        public bool ComparePrevious { get; set; }
        public bool CompareYear { get; set; }
        public bool ShowChart { get; set; }
        public bool Expandable { get; set; }
        public IReadOnlyCollection<int>? PostingKinds { get; set; }
        public FavFiltersDto? Filters { get; set; }
    }

    private sealed class FavFiltersDto
    {
        public IReadOnlyCollection<Guid>? AccountIds { get; set; }
        public IReadOnlyCollection<Guid>? ContactIds { get; set; }
        public IReadOnlyCollection<Guid>? SavingsPlanIds { get; set; }
        public IReadOnlyCollection<Guid>? SecurityIds { get; set; }
        public IReadOnlyCollection<Guid>? ContactCategoryIds { get; set; }
        public IReadOnlyCollection<Guid>? SavingsPlanCategoryIds { get; set; }
        public IReadOnlyCollection<Guid>? SecurityCategoryIds { get; set; }
    }

    private static FavFiltersDto? ToFavFilters(FiltersRequest? f)
         => f == null ? null : new FavFiltersDto
         {
             AccountIds = f.AccountIds,
             ContactIds = f.ContactIds,
             SavingsPlanIds = f.SavingsPlanIds,
             SecurityIds = f.SecurityIds,
             ContactCategoryIds = f.ContactCategoryIds,
             SavingsPlanCategoryIds = f.SavingsPlanCategoryIds,
             SecurityCategoryIds = f.SecurityCategoryIds
         };
 
     // Lightweight DTOs used in filter option loading
    private sealed class AccountDto { public Guid Id { get; set; } public string Name { get; set; } = string.Empty; }
    private sealed class ContactDto { public Guid Id { get; set; } public string Name { get; set; } = string.Empty; }
    private sealed class SavingsPlanDto { public Guid Id { get; set; } public string Name { get; set; } = string.Empty; }
    private sealed class SecurityDto { public Guid Id { get; set; } public string Name { get; set; } = string.Empty; }
    private sealed class ContactCategoryDto { public Guid Id { get; set; } public string Name { get; set; } = string.Empty; }
    private sealed class SavingsPlanCategoryDto { public Guid Id { get; set; } public string Name { get; set; } = string.Empty; }
    private sealed class SecurityCategoryDto { public Guid Id { get; set; } public string Name { get; set; } = string.Empty; }

    private bool ShowTotalRow => TopLevelRows.Any();
    private (decimal Amount, decimal? Prev, decimal? Year) TotalRow
    {
        get
        {
            var rows = TopLevelRows.ToList();
            var amount = rows.Sum(r => r.Amount);
            decimal? prev = ShowPreviousColumns ? rows.Where(r => r.PreviousAmount.HasValue).Sum(r => r.PreviousAmount!.Value) : null;
            decimal? year = _compareYear ? rows.Where(r => r.YearAgoAmount.HasValue).Sum(r => r.YearAgoAmount!.Value) : null;
            return (amount, prev, year);
        }
    }
}
<style>
.filters-panel { display:grid; grid-template-columns:repeat(auto-fit,minmax(260px,1fr)); gap:1rem; width:100%; margin-bottom:.9rem; }
.filter-group { display:flex; flex-direction:column; gap:.55rem; padding:.7rem .75rem .75rem; background:#1b1f24; border:1px solid #2a3138; border-radius:.55rem; }
.filter-group.wide { grid-column:span 2; }
@@media (max-width:900px){ .filter-group.wide { grid-column:span 1; } }
.filter-group .group-title { font-size:.6rem; text-transform:uppercase; letter-spacing:.05em; opacity:.65; }
.filter-group .row { display:flex; flex-direction:column; gap:.3rem; }
.filter-group .row.inline { flex-direction:row; align-items:center; gap:.5rem; flex-wrap:wrap; }
.filter-group .row.month-row { flex-direction:row; align-items:center; gap:.5rem; flex-wrap:nowrap; }
.take-label { display:flex; align-items:center; gap:.4rem; font-size:.65rem; text-transform:uppercase; letter-spacing:.05em; opacity:.75; }
.take-input { width:80px; }
.chk { font-size:.7rem; }
.multi-kind-list { display:flex; flex-wrap:wrap; gap:.5rem; }
.multi-kind-list.dialog { background:#1e2328; padding:.4rem .5rem; border:1px solid #2b3137; border-radius:.3rem; }
.mk-item { font-size:.65rem; display:flex; align-items:center; gap:.25rem; background:#20262b; padding:.2rem .45rem; border-radius:.3rem; border:1px solid #2c333a; }
.btn.full { width:100%; }
.modal-overlay { position:fixed; inset:0; background:rgba(0,0,0,.55); display:flex; align-items:center; justify-content:center; z-index:50; }
.modal { background:#1f2429; border:1px solid #30363d; padding:1rem 1.2rem 1.1rem; border-radius:.5rem; min-width:340px; display:flex; flex-direction:column; gap:.75rem; }
.modal { max-height:80vh; overflow:hidden; }
.modal h3 { margin:.1rem 0 .2rem; font-size:.95rem; }
.modal .form-row { display:flex; flex-direction:column; gap:.25rem; }
.dialog-actions { display:flex; gap:.6rem; justify-content:flex-end; }
.filters-panel input[type=text], .filters-panel select, .filters-panel input[type=number]{ background:#202428; border:1px solid #333; color:#eee; padding:.25rem .4rem; border-radius:.25rem; font-size:.7rem; }
.filters-panel input[type=checkbox]{ margin-right:.35rem; }
.result-box { position:relative; display:flex; flex-direction:column; gap:.75rem; }
.query-overlay { position:absolute; inset:0; background:rgba(10,10,12,.55); display:flex; align-items:center; justify-content:center; font-size:.8rem; backdrop-filter:blur(2px); border-radius:.4rem; z-index:5; }
.report-table { width:100%; font-size:.7rem; border-collapse:collapse; }
.report-table thead th.th-prev { background:#1e2430; color:#8fb0ff; }
.report-table thead th.th-year { background:#261f33; color:#c4a8ff; }
.report-table thead th.th-current { background:#2a3322; color:#cfe7b5; }
.report-table tbody td.amt-prev { color:#7f94ad; font-style:italic; }
.report-table tbody td.amt-year { color:#b79ce8; }
.report-table tbody td.amt-current { font-weight:600; background:#1d242a; }
.report-table tbody tr.neg { color:#c94; }
.report-table tbody td.delta { font-size:.6rem; opacity:.8; }
.report-table tr.type-row { background:#1d2328; font-weight:600; }
.report-table tr.category-row { background:#16212a; }
.report-table tr.child-row { background:#101519; }
.report-table tr.child-row .child-label { padding-left:1.2rem; position:relative; }
.report-table tr.child-row .child-label:before { content:""; position:absolute; left:.3rem; top:50%; width:.5rem; height:1px; background:#2d6cdf; }
.toggle-btn { background:transparent; border:0; cursor:pointer; padding:.15rem; display:flex; align-items:center; }
.toggle-btn .ico { width:14px; height:14px; fill:#8fb0ff; }
.empty-info { font-size:.7rem; opacity:.6; }
.error-msg { color:#e66; font-size:.65rem; margin-top:.4rem; }
.small-empty, .small-loading { font-size:.65rem; opacity:.7; margin-bottom:.4rem; }
.mini-chart { border:1px solid var(--border); padding:.4rem .5rem; border-radius:.4rem; background:#141618; }
.mini-chart .bars { display:flex; align-items:flex-end; gap:.25rem; height:90px; }
.mini-chart .bar-wrap { flex:1 1 0; display:flex; align-items:flex-end; justify-content:center; }
.mini-chart .bar-inner { width:8px; border-radius:2px; background:#2d6cdf; }
.mini-chart .bar-inner.neg { background:#c94; }
.total-row { border-top:1px solid #333; background:#1b2226; font-weight:600; }
.total-row td { padding-top:.35rem; }

/* Tabs + Scrollbox for filter dialog */
.tabs-bar { display:flex; gap:.35rem; border-bottom:1px solid #2b3137; margin:.25rem 0 .5rem; }
.tab-btn { background:#20262b; color:#ddd; border:1px solid #2b3137; border-bottom:0; padding:.3rem .55rem; font-size:.7rem; border-top-left-radius:.3rem; border-top-right-radius:.3rem; cursor:pointer; }
.tab-btn.active { background:#242b31; color:#fff; font-weight:600; }
.scroll-box { max-height:50vh; overflow-y:auto; border:1px solid #2b3137; border-radius:.3rem; background:#1e2328; padding:.4rem .5rem; }
.option-list { display:flex; flex-direction:column; gap:.35rem; align-items:flex-start; text-align:left; }
.option-list .mk-item { width:unset; justify-content:flex-start; text-align:left; background:transparent; border:0; padding:.15rem .2rem; }
.option-list .mk-item input[type=checkbox] { margin-right:.4rem; width:unset;}
</style>
