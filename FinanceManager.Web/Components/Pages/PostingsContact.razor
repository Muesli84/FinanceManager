@page "/postings/contact/{ContactId:guid}"
@rendermode InteractiveServer
@inject NavigationManager Nav
@inject IJSRuntime JS
@inject IServiceProvider Services
@inject Microsoft.Extensions.Localization.IStringLocalizer<FinanceManager.Web.Components.Pages.PostingsContact> Localizer
@using FinanceManager.Web.Components.Shared
@using FinanceManager.Web.ViewModels
<PageTitle>@Localizer["PageTitle"]</PageTitle>

<Ribbon TTabEnum="PostingsContact.TabId" Tabs="_tabs" ActiveTab="_activeTab" ActiveTabChanged="OnActiveTabChanged" />

@if (_exporting)
{
    <div class="small-loading" style="margin:.5rem 0;">@Localizer["Loading"]</div>
}

<h3>@Localizer["Title"]</h3>
<div style="margin-bottom:.75rem;display:flex;gap:.6rem;flex-wrap:wrap;align-items:center;">
    <input placeholder='@Localizer["SearchPlaceholder"]' value="@_vm?.Search" @oninput="OnSearchInput" style="min-width:260px;" />
</div>
@if((_vm?.Loading ?? true) && (_vm?.Items.Count ?? 0)==0)
{
    <p>@Localizer["Loading"]</p>
}
else
{
    <table class="fm-table wide">
        <thead>
            <tr>
                <th style="width:7rem;">@Localizer["Th_Date"]</th>
                <th style="width:7rem;">@Localizer["Th_Valuta"]</th>
                <th style="width:7rem;text-align:right;">@Localizer["Th_Amount"]</th>
                <th style="width:6rem;">@Localizer["Th_Kind"]</th>
                <th style="width:18%;">@Localizer["Th_Recipient"]</th>
                <th style="width:22%">@Localizer["Th_Subject"]</th>
                <th>@Localizer["Th_Description"]</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var p in _vm!.Items)
            {
                <tr style="cursor:pointer;" @onclick="(()=> OpenDetail(p.Id))">
                    <td>@p.BookingDate.ToShortDateString()</td>
                    <td>@p.ValutaDate.ToShortDateString()</td>
                    <td style="text-align:right;">@p.Amount</td>
                    <td>@(p.Kind == Domain.PostingKind.Security && p.SecuritySubType.HasValue ? $"Security-{p.SecuritySubType}" : p.Kind.ToString())</td>
                    <td class="wrap">@(string.IsNullOrWhiteSpace(p.RecipientName)?"-":p.RecipientName)</td>
                    <td class="wrap">@(string.IsNullOrWhiteSpace(p.Subject)?"-":p.Subject)</td>
                    <td class="wrap">@(string.IsNullOrWhiteSpace(p.Description)?"-":p.Description)</td>
                </tr>
            }
            @if(_vm.Loading)
            {
                <tr><td colspan="7" style="opacity:.6;">@Localizer["Loading"]</td></tr>
            }
        </tbody>
    </table>
    <div style="margin-top:.5rem;">
        @if(_vm.CanLoadMore)
        {
            <div @ref="_sentinel" class="infinite-sentinel" aria-hidden="true"></div>
        }
        else if(_vm.Items.Count==0 && !_vm.Loading)
        {
            <span style="opacity:.6;font-size:.75rem;">@Localizer["NoItems"]</span>
        }
        else if(!_vm.CanLoadMore)
        {
            <div class="end-of-list" style="opacity:.6;font-size:.65rem;">@Localizer["EndOfList"]</div>
        }
    </div>
}

@code {
    [Parameter] public Guid ContactId { get; set; }
    [SupplyParameterFromQuery(Name="back")] public string? BackNav { get; set; }

    private PostingsContactViewModel? _vm;

    private ElementReference _sentinel;
    private DotNetObjectReference<PostingsContact>? _selfRef;
    private bool _observerAttached;

    private bool _exporting;

    private enum TabId { Postings }
    private List<Ribbon<TabId>.RibbonTab<TabId>> _tabs = new();
    private TabId _activeTab = TabId.Postings;
    private Task OnActiveTabChanged(TabId id){ _activeTab = id; return Task.CompletedTask; }

    protected override async Task OnInitializedAsync()
    {
        if (_vm is not null)
        {
            _vm.StateChanged -= VmOnStateChanged;
            _vm.AuthenticationRequired -= VmOnAuthenticationRequired;
            await _vm.DisposeAsync();
        }
        _vm = ActivatorUtilities.CreateInstance<PostingsContactViewModel>(Services);
        _vm.StateChanged += VmOnStateChanged;
        _vm.AuthenticationRequired += VmOnAuthenticationRequired;
        _vm.Configure(ContactId);
        await _vm.InitializeAsync();
        RebuildRibbon();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_observerAttached || !(_vm?.CanLoadMore ?? false) || (_vm?.Loading ?? false)) { return; }
        if (_sentinel.Context is null) { return; }
        try
        {
            _selfRef ??= DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("fmInfinite.observe", _sentinel, _selfRef, null);
            _observerAttached = true;
        }
        catch (JSException)
        {
            await Task.Yield();
            StateHasChanged();
        }
    }

    private void VmOnAuthenticationRequired(object? sender, string? returnUrl)
    {
        var back = Nav.ToBaseRelativePath(Nav.Uri);
        var url = string.IsNullOrWhiteSpace(back) ? "/login" : $"/login?returnUrl={Uri.EscapeDataString(back)}";
        Nav.NavigateTo(url, forceLoad: true);
    }

    private void VmOnStateChanged(object? sender, EventArgs e)
    {
        RebuildRibbon();
        _ = InvokeAsync(StateHasChanged);
    }

    private void RebuildRibbon()
    {
        var groupsDto = _vm?.GetRibbon(Localizer) ?? new List<UiRibbonGroup>();
        var groups = new List<Ribbon<TabId>.RibbonGroup>();
        foreach (var g in groupsDto)
        {
            var items = new List<Ribbon<TabId>.RibbonItem>();
            foreach (var it in g.Items)
            {
                var size = it.Size == UiRibbonItemSize.Large ? Ribbon<TabId>.RibbonItemSize.Large : Ribbon<TabId>.RibbonItemSize.Small;
                items.Add(new Ribbon<TabId>.RibbonItem
                {
                    Label = it.Label,
                    IconSvg = it.IconSvg,
                    Size = size,
                    Disabled = it.Disabled,
                    Callback = () => { HandleRibbonAction(it.Action); return Task.CompletedTask; }
                });
            }
            groups.Add(new Ribbon<TabId>.RibbonGroup { Title = g.Title, Items = items });
        }
        _tabs = new()
        {
            new Ribbon<TabId>.RibbonTab<TabId>
            {
                Id = TabId.Postings,
                Title = Localizer["Ribbon_Tab_Postings"],
                Groups = groups
            }
        };
        StateHasChanged();
    }

    private void HandleRibbonAction(string action)
    {
        switch (action)
        {
            case "Back": Back(); break;
            case "ClearSearch": _vm!.ClearSearch(); _ = _vm.LoadMoreAsync(); break;
            case "ExportCsv": Export("csv"); break;
            case "ExportXlsx": Export("xlsx"); break;
        }
    }

    [JSInvokable]
    public async Task LoadMoreFromJs()
    {
        await _vm!.LoadMoreAsync();
        if (_vm.CanLoadMore) { await JS.InvokeVoidAsync("fmInfinite.refresh"); }
        else { StateHasChanged(); }
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        _vm!.SetSearch(e.Value?.ToString() ?? string.Empty);
        _vm.ResetAndSearch();
        _ = _vm.LoadMoreAsync();
        RebuildRibbon();
    }

    private void Export(string format)
    {
        _exporting = true; StateHasChanged();
        var url = _vm!.GetExportUrl(format);
        var js = $"(function(){{var a=document.createElement('a'); a.href={System.Text.Json.JsonSerializer.Serialize(url)}; a.download=''; a.style.display='none'; document.body.appendChild(a); a.click(); setTimeout(()=>document.body.removeChild(a),200);}})()";
        try { JS.InvokeVoidAsync("eval", js); } catch { Nav.NavigateTo(url, forceLoad: true); }
        _exporting = false; StateHasChanged();
    }

    private string BuildBackValue() => Uri.EscapeDataString("/" + Nav.ToBaseRelativePath(Nav.Uri));

    private void OpenDetail(Guid id)
    {
        Nav.NavigateTo($"/postings/{id}?back={BuildBackValue()}");
    }

    private void Back()
    {
        if (!string.IsNullOrWhiteSpace(BackNav))
        {
            Nav.NavigateTo(BackNav!);
            return;
        }
        Nav.NavigateTo($"/contacts/{ContactId}");
    }
}
