@page "/users"
@rendermode InteractiveServer
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components
@using FinanceManager.Web.Components.Shared
@inject HttpClient Http
@inject FinanceManager.Application.ICurrentUserService CurrentUser
@inject Microsoft.Extensions.Localization.IStringLocalizer<FinanceManager.Web.Components.Pages.Users> Localizer
@inject NavigationManager Nav
@inject IServiceProvider Services
@using FinanceManager.Web.ViewModels
@using Microsoft.Extensions.DependencyInjection
<PageTitle>@Localizer["PageTitle"]</PageTitle>

<Ribbon TTabEnum="Users.TabId" Tabs="_tabs" ActiveTab="_activeTab" ActiveTabChanged="OnActiveTabChanged" />

@if (!CurrentUser.IsAuthenticated)
{
    <p>@Localizer["Access_Denied"]</p>
}
else if (!_loaded)
{
    <p>@Localizer["Loading"]</p>
}
else if (!CurrentUser.IsAdmin)
{
    <p>@Localizer["Access_AdminOnly"]</p>
}
else
{
    <h1>@Localizer["Heading_Users"]</h1>
    <EditForm Model="_vm!.Create" OnValidSubmit="CreateAsync" class="create-user-form">
        <DataAnnotationsValidator />
        <div class="create-user-grid">
            <label for="cu-username">@Localizer["Create_Label_Username"]</label>
            <InputText id="cu-username" @bind-Value="_vm!.Create.Username" />

            <label for="cu-password">@Localizer["Create_Label_Password"]</label>
            <InputText id="cu-password" @bind-Value="_vm!.Create.Password" Type="password" />

            <label>@Localizer["Create_Label_Role"]</label>
            <div class="inline-checkbox">
                <input id="cu-admin" type="checkbox" @bind="_vm!.Create.IsAdmin" />
                <label for="cu-admin" class="chk-label">@Localizer["Create_Label_Role_Admin"]</label>
            </div>

            <div class="full-row form-actions">
                <button type="submit" disabled="@(_vm?.BusyCreate ?? false)">@((_vm?.BusyCreate ?? false) ? Localizer["Create_Button_Submit_Busy"] : Localizer["Create_Button_Submit"])</button>
            </div>
            <div class="full-row">
                <ValidationSummary />
            </div>
        </div>
    </EditForm>

    @if (!string.IsNullOrEmpty(_vm?.Error))
    {
        <div class="error" style="margin-top:.75rem;">@_vm!.Error</div>
    }

    @if ((_vm?.LastResetUserId != Guid.Empty) == true && !string.IsNullOrEmpty(_vm?.LastResetPassword))
    {
        var userName = _vm!.Users.FirstOrDefault(u => u.Id == _vm!.LastResetUserId)?.Username;
        <div class="pw-reset-hint" style="margin-top:1rem;padding:.75rem 1rem;border:1px solid #444;background:#25252d;border-radius:6px;max-width:620px;">
            <strong>@Localizer["PasswordReset_Title"]</strong> @Localizer["PasswordReset_For"] <span style="opacity:.85">@userName</span>: <code>@_vm!.LastResetPassword</code>
            <button style="margin-left:.75rem;" @onclick="(()=> _vm!.ClearLastPassword())">@Localizer["PasswordReset_Hide"]</button>
        </div>
    }

    <table class="user-table" style="width:100%;border-collapse:collapse;margin-top:1.25rem;">
        <thead>
            <tr>
                <th style="text-align:left;">@Localizer["Table_Header_Username"]</th>
                <th>@Localizer["Table_Header_IsAdmin"]</th>
                <th>@Localizer["Table_Header_Active"]</th>
                <th>@Localizer["Table_Header_LockedUntil"]</th>
                <th>@Localizer["Table_Header_LastLogin"]</th>
                <th>@Localizer["Table_Header_Actions"]</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var u in _vm!.Users)
        {
            var editing = _vm!.Edit?.Id == u.Id;
            bool locked = u.LockedUntilUtc != null && u.LockedUntilUtc > DateTime.UtcNow;
            <tr class="@(locked?"locked-row":"")">
                <td>
                    @if (editing) { <InputText @bind-Value="_vm!.EditUsername" /> } else { @u.Username }
                </td>
                <td style="text-align:center;">
                    @if (editing) { <input type="checkbox" @bind="_vm!.EditIsAdmin" /> } else { @((MarkupString)(u.IsAdmin ? "&#10003;" : string.Empty)) }
                </td>
                <td style="text-align:center;">
                    @if (editing) { <input type="checkbox" @bind="_vm!.EditActive" /> } else { @((MarkupString)(u.Active ? "&#10003;" : "&#10007;")) }
                </td>
                <td style="text-align:center;">@(u.LockedUntilUtc?.ToString("u") ?? "-")</td>
                <td style="text-align:center;">@((u.LastLoginUtc==default)?"-":u.LastLoginUtc.ToString("u"))</td>
                <td style="white-space:nowrap;">
                    @if (editing)
                    {
                        <button @onclick="(()=>_vm!.SaveEditAsync(u.Id))" disabled="@(_vm?.BusyRow ?? false)">@Localizer["Action_Save"]</button>
                        <button @onclick="(()=>_vm!.CancelEdit())" disabled="@(_vm?.BusyRow ?? false)">@Localizer["Action_Cancel"]</button>
                    }
                    else
                    {
                        <button @onclick="(()=>_vm!.BeginEdit(u))" disabled="@(_vm?.BusyRow ?? false)">@Localizer["Action_Edit"]</button>
                        <button @onclick="(()=>_vm!.ResetPasswordAsync(u.Id))" disabled="@(_vm?.BusyRow ?? false)">@Localizer["Action_ResetPassword"]</button>
                        @if (locked)
                        {
                            <button @onclick="(()=>_vm!.UnlockAsync(u.Id))" disabled="@(_vm?.BusyRow ?? false)">@Localizer["Action_Unlock"]</button>
                        }
                        <button @onclick="(()=>_vm!.DeleteAsync(u.Id))" disabled="@(_vm?.BusyRow ?? false)">@Localizer["Action_Delete"]</button>
                    }
                </td>
            </tr>
        }
        </tbody>
    </table>
}

<style>
    .create-user-form { background:#1e1e24; padding:1rem 1.25rem; border:1px solid #333; border-radius:6px; max-width:620px; }
    .create-user-grid { display:grid; grid-template-columns:160px 1fr; gap:.55rem .75rem; align-items:center; }
    .create-user-grid label { font-size:.72rem; letter-spacing:.5px; text-transform:uppercase; opacity:.75; }
    .inline-checkbox { display:flex; align-items:center; gap:.5rem; }
    .inline-checkbox .chk-label { text-transform:none; font-size:.85rem; opacity:.9; letter-spacing:0; }
    .form-actions { display:flex; gap:.5rem; }
    .form-actions button { min-width:140px; }
    .user-table th, .user-table td { padding:.4rem .5rem; border-bottom:1px solid #2c2c34; }
    .user-table tr.locked-row { background:#402626; }
    .user-table tr.locked-row:hover { background:#4a2d2d; }
    .user-table tr:hover { background:#23232b; }
    .error { color:#ffb3b3; }
</style>

@code {
    // Ribbon state
    private enum TabId { Users }
    private List<Ribbon<TabId>.RibbonTab<TabId>> _tabs = new();
    private TabId _activeTab = TabId.Users;
    private Task OnActiveTabChanged(TabId id){ _activeTab = id; return Task.CompletedTask; }

    private void BuildRibbon()
    {
        if (!CurrentUser.IsAuthenticated || !CurrentUser.IsAdmin) { _tabs = new(); return; }
        var groupsDto = _vm?.GetRibbon(Localizer) ?? new List<UiRibbonGroup>();
        var groups = new List<Ribbon<TabId>.RibbonGroup>();
        foreach (var g in groupsDto)
        {
            var items = new List<Ribbon<TabId>.RibbonItem>();
            foreach (var it in g.Items)
            {
                var size = it.Size == UiRibbonItemSize.Large ? Ribbon<TabId>.RibbonItemSize.Large : Ribbon<TabId>.RibbonItemSize.Small;
                items.Add(new Ribbon<TabId>.RibbonItem
                {
                    Label = it.Label,
                    IconSvg = it.IconSvg,
                    Size = size,
                    Disabled = it.Disabled,
                    Callback = () => { HandleRibbonAction(it.Action); return Task.CompletedTask; }
                });
            }
            groups.Add(new Ribbon<TabId>.RibbonGroup { Title = g.Title, Items = items });
        }
        _tabs = new()
        {
            new Ribbon<TabId>.RibbonTab<TabId>
            {
                Id = TabId.Users,
                Title = Localizer["Ribbon_Tab_Users"],
                Groups = groups
            }
        };
        StateHasChanged();
    }

    private void Back() => Nav.NavigateTo("/");

    private void HandleRibbonAction(string action)
    {
        switch (action)
        {
            case "Back": Back(); break;
            case "Reload": _ = _vm!.LoadAsync(); break;
            case "CancelEdit": _vm!.CancelEdit(); break;
            case "HidePassword": _vm!.ClearLastPassword(); break;
        }
    }

    private bool _loaded;
    private UsersViewModel? _vm;

    protected override async Task OnInitializedAsync()
    {
        if (!CurrentUser.IsAuthenticated) { BuildRibbon(); return; }
        _vm = ActivatorUtilities.CreateInstance<UsersViewModel>(Services);
        _vm.StateChanged += (_, __) => { BuildRibbon(); _ = InvokeAsync(StateHasChanged); };
        await _vm.InitializeAsync();
        _loaded = true;
        BuildRibbon();
    }

    private Task CreateAsync() => _vm!.CreateAsync();
}
