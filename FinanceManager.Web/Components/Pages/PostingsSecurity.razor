@page "/postings/security/{SecurityId:guid}"
@rendermode InteractiveServer
@inject HttpClient Http
@inject NavigationManager Nav
@inject IJSRuntime JS
@using FinanceManager.Web.Components.Shared
@inject Microsoft.Extensions.Localization.IStringLocalizer<FinanceManager.Web.Components.Pages.PostingsSecurity> Localizer
@using FinanceManager.Domain.Attachments
<PageTitle>@Localizer["PageTitle"]</PageTitle>

<Ribbon TTabEnum="PostingsSecurity.TabId" Tabs="_tabs" ActiveTab="_activeTab" ActiveTabChanged="OnActiveTabChanged" />

<h3>@Localizer["Title"]</h3>
<div style="margin-bottom:.75rem;display:flex;gap:.6rem;flex-wrap:wrap;align-items:center;">
    <input placeholder='@Localizer["SearchPlaceholder"]' @bind="_search" @bind:after="OnSearchChanged" style="min-width:260px;" />
</div>
@if(_loading && _items.Count==0)
{
    <p>@Localizer["Loading"]</p>
}
else
{
    <table class="fm-table wide">
        <thead>
            <tr>
                <th style="width:7rem;">@Localizer["Th_Date"]</th>
                <th style="width:7rem;text-align:right;">@Localizer["Th_Amount"]</th>
                <th style="width:10rem;">@Localizer["Th_Kind"]</th>
                <th style="width:18%;">@Localizer["Th_Quantity"]</th>
                <th style="width:22%;">@Localizer["Th_Subject"]</th>
                <th>@Localizer["Th_Description"]</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var p in _items)
            {
                var selected = _selectedPostingId == p.Id;
                <tr style="cursor:pointer;@(selected?"background:#1f2834;":"")" @onclick="(()=> SelectRow(p.Id))">
                    <td>@p.BookingDate.ToShortDateString()</td>
                    <td style="text-align:right;">@p.Amount</td>
                    <td>@(p.Kind == PostingKind.Security && p.SecuritySubType!=null ? $"Security-{p.SecuritySubType}" : p.Kind.ToString())</td>
                    <td class="wrap">@(p.Quantity.HasValue && p.Quantity.Value != 0m ? p.Quantity.Value.ToString() : "")</td>
                    <td class="wrap">@(string.IsNullOrWhiteSpace(p.Subject)?"-":p.Subject)</td>
                    <td class="wrap">@(string.IsNullOrWhiteSpace(p.Description)?"-":p.Description)</td>
                </tr>
            }
            @if(_loading)
            {
                <tr><td colspan="6" style="opacity:.6;">@Localizer["Loading"]</td></tr>
            }
        </tbody>
    </table>
    <div style="margin-top:.5rem;">
        @if(_canLoadMore)
        {
            <div @ref="_sentinel" class="infinite-sentinel" aria-hidden="true"></div>
        }
        else if(_items.Count==0 && !_loading)
        {
            <span style="opacity:.6;font-size:.75rem;">@Localizer["NoItems"]</span>
        }
        else if(!_canLoadMore)
        {
            <div class="end-of-list" style="opacity:.6;font-size:.65rem;">@Localizer["EndOfList"]</div>
        }
    </div>
}

@if (_showAttachments && _attachmentPostingId != null)
{
    <div class="split-center" @onclick="(()=> _showAttachments = false)">
        <div class="split-dialog" style="max-width:90vH;" @onclick:stopPropagation="true">
            <div style="display:flex;align-items:center;justify-content:space-between;margin-bottom:.5rem;">
                <h3 style="margin:0;font-size:1rem;">@Localizer["Attachments_Title"]</h3>
                <button class="icon-btn" title='@Localizer["Btn_Close"]' @onclick="(()=> _showAttachments=false)"><svg><use href="/icons/sprite.svg#clear" /></svg></button>
            </div>
            <AttachmentsPanel ParentKind="@AttachmentEntityKind.Posting" ParentId="@_attachmentPostingId.Value" />
        </div>
    </div>
}

@code {
    [Parameter] public Guid SecurityId { get; set; }
    private const int PageSize = 50;
    private bool _loading; private bool _canLoadMore = true; private int _skip;
    private List<PostingDto> _items = new();

    private ElementReference _sentinel;
    private DotNetObjectReference<PostingsSecurity>? _selfRef;
    private bool _observerAttached;
    private string _search = string.Empty;
    private CancellationTokenSource? _searchCts;

    // Attachments overlay state
    private bool _showAttachments;
    private Guid? _attachmentPostingId;

    // Row selection state
    private Guid? _selectedPostingId;
    private void SelectRow(Guid id)
    {
        _selectedPostingId = _selectedPostingId == id ? null : id;
        BuildRibbon();
    }

    private void OpenAttachmentsFromRibbon()
    {
        if (_selectedPostingId == null) { return; }
        _attachmentPostingId = _selectedPostingId;
        _showAttachments = true;
        StateHasChanged();
    }

    // Ribbon state
    private enum TabId { Postings }
    private List<Ribbon<TabId>.RibbonTab<TabId>> _tabs = new();
    private TabId _activeTab = TabId.Postings;
    private Task OnActiveTabChanged(TabId id){ _activeTab = id; return Task.CompletedTask; }

    private void BuildRibbon()
    {
        var nav = new Ribbon<TabId>.RibbonGroup
        {
            Title = Localizer["Ribbon_Group_Navigation"],
            Items = new()
            {
                new Ribbon<TabId>.RibbonItem
                {
                    Label = Localizer["Ribbon_Back"],
                    IconSvg = "<svg><use href='/icons/sprite.svg#back'/></svg>",
                    Size = Ribbon<TabId>.RibbonItemSize.Large,
                    Callback = () => { Back(); return Task.CompletedTask; }
                }
            }
        };
        var filter = new Ribbon<TabId>.RibbonGroup
        {
            Title = Localizer["Ribbon_Group_Filter"],
            Items = new()
            {
                new Ribbon<TabId>.RibbonItem
                {
                    Label = Localizer["Ribbon_ClearSearch"],
                    IconSvg = "<svg><use href='/icons/sprite.svg#clear'/></svg>",
                    Disabled = string.IsNullOrWhiteSpace(_search),
                    Callback = () => { ClearSearch(); return Task.CompletedTask; }
                }
            }
        };
        var related = new Ribbon<TabId>.RibbonGroup
        {
            Title = Localizer["Ribbon_Group_Related"],
            Items = new()
            {
                new Ribbon<TabId>.RibbonItem
                {
                    Label = Localizer["Ribbon_Attachments"],
                    IconSvg = "<svg><use href='/icons/sprite.svg#attachment'/></svg>",
                    Disabled = _selectedPostingId == null,
                    Callback = () => { OpenAttachmentsFromRibbon(); return Task.CompletedTask; }
                }
            }
        };
        _tabs = new(){ new Ribbon<TabId>.RibbonTab<TabId>{ Id = TabId.Postings, Title = Localizer["Ribbon_Tab_Postings"], Groups = new(){ nav, filter, related } } };
        StateHasChanged();
    }

    private enum PostingKind { Bank=0, Contact=1, SavingsPlan=2, Security=3 }
    // Align with server enum: Buy=0, Sell=1, Dividend=2, Fee=3, Tax=4
    private enum SecurityPostingSubType { Buy=0, Sell=1, Dividend=2, Fee=3, Tax=4 }

    private sealed record PostingDto(
        Guid Id,
        DateTime BookingDate,
        decimal Amount,
        PostingKind Kind,
        Guid? AccountId,
        Guid? ContactId,
        Guid? SavingsPlanId,
        Guid? SecurityId,
        Guid SourceId,
        string? Subject,
        string? RecipientName,
        string? Description,
        SecurityPostingSubType? SecuritySubType,
        decimal? Quantity);

    protected override async Task OnParametersSetAsync()
    {
        if(_items.Count==0)
        {
            await LoadMoreAsync();
        }
        BuildRibbon();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_observerAttached || !_canLoadMore || _loading)
        {
            return;
        }
        if (_sentinel.Context is null)
        {
            return;
        }
        try
        {
            _selfRef ??= DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("fmInfinite.observe", _sentinel, _selfRef, null);
            _observerAttached = true;
        }
        catch (JSException)
        {
            await Task.Yield();
            StateHasChanged();
        }
    }

    private void OnSearchChanged()
    {
        _searchCts?.Cancel();
        var cts = new CancellationTokenSource();
        _searchCts = cts;
        _ = Task.Run(async () =>
        {
            try
            {
                await Task.Delay(350, cts.Token); // debounce
                if (cts.IsCancellationRequested) { return; }
                await InvokeAsync(async () =>
                {
                    ResetAndSearch();
                    await LoadMoreAsync();
                    BuildRibbon();
                });
            }
            catch (TaskCanceledException) { }
        });
    }

    private void ClearSearch()
    {
        if (string.IsNullOrWhiteSpace(_search)) { return; }
        _search = string.Empty;
        ResetAndSearch();
        _ = LoadMoreAsync();
        BuildRibbon();
    }

    private void ResetAndSearch()
    {
        _items.Clear();
        _skip = 0;
        _canLoadMore = true;
        _observerAttached = false; // reattach for new sentinel
        _selectedPostingId = null;
    }

    [JSInvokable]
    public async Task LoadMoreFromJs()
    {
        await LoadMoreAsync();
        if (_canLoadMore)
        {
            await JS.InvokeVoidAsync("fmInfinite.refresh");
        }
        else
        {
            StateHasChanged();
        }
    }

    private async Task LoadMoreAsync()
    {
        if(_loading || !_canLoadMore) return;
        _loading = true;
        try
        {
            var query = string.IsNullOrWhiteSpace(_search) ? string.Empty : $"&q={Uri.EscapeDataString(_search)}";
            var resp = await Http.GetAsync($"/api/postings/security/{SecurityId}?skip={_skip}&take={PageSize}{query}");
            if(resp.IsSuccessStatusCode)
            {
                var chunk = await resp.Content.ReadFromJsonAsync<List<PostingDto>>() ?? new();
                _items.AddRange(chunk);
                _skip += chunk.Count;
                if(chunk.Count < PageSize) _canLoadMore = false;
            }
        }
        finally { _loading=false; StateHasChanged(); }
    }

    private void Back() => Nav.NavigateTo($"/securities/{SecurityId}");
}
