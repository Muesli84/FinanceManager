@page "/savings-plans"
@inject NavigationManager Nav
@inject IServiceProvider Services
@rendermode InteractiveServer
@using FinanceManager.Shared.Dtos
@using Microsoft.Extensions.Localization
@using FinanceManager.Web.Components.Shared
@using FinanceManager.Web.ViewModels
@inject IStringLocalizer<FinanceManager.Web.Components.Pages.SavingsPlanList> Localizer
<PageTitle>@Localizer["PageTitle"]</PageTitle>

<Ribbon TTabEnum="SavingsPlanList.TabId" Tabs="_tabs" ActiveTab="_activeTab" ActiveTabChanged="OnActiveTabChanged" />

<h3>@Localizer["TitleList"]</h3>

@if(!(_vm?.Loaded ?? false))
{
    <p>@Localizer["Loading"]</p>
}
else if(!_vm!.IsAuthenticated)
{
    <p>@Localizer["PleaseLogin"]</p>
}
else if(_vm!.Plans.Count==0)
{
    <p style="opacity:.65;font-size:.75rem;">@Localizer["StatusArchived"]</p>
}
<table class="fm-table wide" style="margin-top:1rem;">
    <thead>
        <tr>
            <th>@Localizer["LabelName"]</th>
            <th>@Localizer["LabelType"]</th>
            <th>@Localizer["LabelTargetAmount"]</th>
            <th>@Localizer["LabelTargetDate"]</th>
            <th>@Localizer["LabelInterval"]</th>
            <th>@Localizer["LabelStatus"]</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var plan in _vm!.Plans)
        {
            var status = _vm!.GetStatusFlags(plan);
            <tr style="cursor:pointer;" @onclick="() => OpenDetail(plan.Id)">
                <td>@plan.Name</td>
                <td>@Localizer[$"Type_{plan.Type}"]</td>
                <td>@(plan.TargetAmount?.ToString("N2") ?? "-")</td>
                <td>@(plan.TargetDate?.ToShortDateString() ?? "-")</td>
                <td>@(plan.Interval.HasValue ? Localizer[$"Interval_{plan.Interval}"] : "-")</td>
                <td>
                    @if(status.Reachable)
                    {
                        <span title="Ziel erreichbar" style="color:#6c6;display:inline-flex;align-items:center;gap:.25rem;"><svg class="icon" style="width:16px;height:16px;"><use href="/icons/sprite.svg#check" /></svg></span>
                    }
                    else if(status.Unreachable)
                    {
                        <span title="Ziel nicht erreichbar" style="color:#cc6;display:inline-flex;align-items:center;gap:.25rem;"><svg class="icon" style="width:16px;height:16px;"><use href="/icons/sprite.svg#warning" /></svg></span>
                    }
                    else
                    {
                        @_vm!.GetStatusLabel(Localizer, plan)
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    // Ribbon state
    private enum TabId { SavingsPlans }
    private List<Ribbon<TabId>.RibbonTab<TabId>> _tabs = new();
    private TabId _activeTab = TabId.SavingsPlans;
    private Task OnActiveTabChanged(TabId id){ _activeTab = id; return Task.CompletedTask; }

    private SavingsPlansViewModel? _vm;

    protected override async Task OnInitializedAsync()
    {
        _vm = ActivatorUtilities.CreateInstance<SavingsPlansViewModel>(Services);
        _vm.StateChanged += (_, __) => { RebuildRibbon(); _ = InvokeAsync(StateHasChanged); };
        await _vm.InitializeAsync();
        RebuildRibbon();
    }

    private void RebuildRibbon()
    {
        var groupsDto = _vm?.GetRibbon(Localizer) ?? new List<UiRibbonGroup>();
        var groups = new List<Ribbon<TabId>.RibbonGroup>();
        foreach (var g in groupsDto)
        {
            var items = new List<Ribbon<TabId>.RibbonItem>();
            foreach (var it in g.Items)
            {
                var size = it.Size == UiRibbonItemSize.Large ? Ribbon<TabId>.RibbonItemSize.Large : Ribbon<TabId>.RibbonItemSize.Small;
                items.Add(new Ribbon<TabId>.RibbonItem
                {
                    Label = it.Label,
                    IconSvg = it.IconSvg,
                    Size = size,
                    Disabled = it.Disabled,
                    Callback = () => { HandleRibbonAction(it.Action); return Task.CompletedTask; }
                });
            }
            groups.Add(new Ribbon<TabId>.RibbonGroup { Title = g.Title, Items = items });
        }
        _tabs = new()
        {
            new Ribbon<TabId>.RibbonTab<TabId>
            {
                Id = TabId.SavingsPlans,
                Title = Localizer["PageTitle"],
                Groups = groups
            }
        };
        StateHasChanged();
    }

    private void HandleRibbonAction(string action)
    {
        switch (action)
        {
            case "New":
                NewPlan();
                break;
            case "Categories":
                Nav.NavigateTo("/savings-plan-categories");
                break;
            case "ToggleActive":
                _vm!.ToggleActiveOnly();
                break;
        }
    }

    private void NewPlan() => Nav.NavigateTo("/savings-plans/new");
    private void OpenDetail(Guid id) => Nav.NavigateTo($"/savings-plans/{id}");
}