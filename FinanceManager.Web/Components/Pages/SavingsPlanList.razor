@page "/savings-plans"
@inject IHttpClientFactory ClientFactory
@inject NavigationManager Navigation
@rendermode InteractiveServer
@using FinanceManager.Shared.Dtos
@using Microsoft.Extensions.Localization
@using FinanceManager.Web.Components.Shared
@inject IStringLocalizer<FinanceManager.Web.Components.Pages.SavingsPlanList> Localizer
<PageTitle>@Localizer["PageTitle"]</PageTitle>

<Ribbon TTabEnum="SavingsPlanList.TabId" Tabs="_tabs" ActiveTab="_activeTab" ActiveTabChanged="OnActiveTabChanged" />

<h3>@Localizer["TitleList"]</h3>

@if(Plans.Count==0)
{
    <p style="opacity:.65;font-size:.75rem;">@Localizer["StatusArchived"]</p>
}
<table class="fm-table wide" style="margin-top:1rem;">
    <thead>
        <tr>
            <th>@Localizer["LabelName"]</th>
            <th>@Localizer["LabelType"]</th>
            <th>@Localizer["LabelTargetAmount"]</th>
            <th>@Localizer["LabelTargetDate"]</th>
            <th>@Localizer["LabelInterval"]</th>
            <th>@Localizer["LabelStatus"]</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var plan in Plans)
        {
            var state = GetState(plan);
            <tr style="cursor:pointer;" @onclick="() => OpenDetail(plan.Id)">
                <td>@plan.Name</td>
                <td>@Localizer[$"Type_{plan.Type}"]</td>
                <td>@(plan.TargetAmount?.ToString("N2") ?? "-")</td>
                <td>@(plan.TargetDate?.ToShortDateString() ?? "-")</td>
                <td>@(plan.Interval.HasValue ? Localizer[$"Interval_{plan.Interval}"] : "-")</td>
                <td>
                    @if(state == PlanState.Done)
                    {
                        <span title="Ziel erreichbar" style="color:#6c6;display:inline-flex;align-items:center;gap:.25rem;"><svg class="icon" style="width:16px;height:16px;"><use href="/icons/sprite.svg#check" /></svg></span>
                    }
                    else if(state == PlanState.Unreachable)
                    {
                        <span title="Ziel nicht erreichbar" style="color:#cc6;display:inline-flex;align-items:center;gap:.25rem;"><svg class="icon" style="width:16px;height:16px;"><use href="/icons/sprite.svg#warning" /></svg></span>
                    }
                    else
                    {
                        @Localizer[plan.IsActive ? "StatusActive" : "StatusArchived"]
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    // Ribbon state
    private enum TabId { SavingsPlans }
    private List<Ribbon<TabId>.RibbonTab<TabId>> _tabs = new();
    private TabId _activeTab = TabId.SavingsPlans;
    private Task OnActiveTabChanged(TabId id){ _activeTab = id; return Task.CompletedTask; }

    private void BuildRibbon()
    {
        var actions = new Ribbon<TabId>.RibbonGroup
        {
            Title = Localizer["Ribbon_Group_Actions"],
            Items = new()
            {
                new Ribbon<TabId>.RibbonItem
                {
                    Label = Localizer["BtnNew"],
                    IconSvg = "<svg><use href='/icons/sprite.svg#plus'/></svg>",
                    Size = Ribbon<TabId>.RibbonItemSize.Large,
                    Callback = () => { NewPlan(); return Task.CompletedTask; }
                },
                new Ribbon<TabId>.RibbonItem
                {
                    Label = Localizer["Ribbon_Categories"],
                    IconSvg = "<svg><use href='/icons/sprite.svg#groups'/></svg>",
                    Callback = () => { Navigation.NavigateTo("/savings-plan-categories"); return Task.CompletedTask; }
                }
            }
        };
        var filterItems = new List<Ribbon<TabId>.RibbonItem>
        {
            new Ribbon<TabId>.RibbonItem
            {
                Label = ShowActiveOnly ? Localizer["OnlyActive"] : Localizer["StatusArchived"],
                IconSvg = "<svg><use href='/icons/sprite.svg#refresh'/></svg>",
                Callback = () => { ShowActiveOnly = !ShowActiveOnly; _ = LoadPlansAsync(); return Task.CompletedTask; }
            }
        };
        var filter = new Ribbon<TabId>.RibbonGroup { Title = Localizer["Ribbon_Group_Filter"], Items = filterItems };
        _tabs = new()
        {
            new Ribbon<TabId>.RibbonTab<TabId>
            {
                Id = TabId.SavingsPlans,
                Title = Localizer["PageTitle"],
                Groups = new(){ actions, filter }
            }
        };
        StateHasChanged();
    }

    private List<SavingsPlanDto> Plans = new();
    private bool ShowActiveOnly = true;

    private enum PlanState { Normal, Done, Unreachable }
    private readonly Dictionary<Guid, SavingsPlanAnalysisDto> _analysisByPlan = new();

    protected override async Task OnParametersSetAsync()
    {
        await LoadPlansAsync();
        BuildRibbon();
    }

    private async Task LoadPlansAsync()
    {
        var http = ClientFactory.CreateClient("Api");
        var resp = await http.GetAsync($"/api/savings-plans?onlyActive={ShowActiveOnly}");
        if (resp.IsSuccessStatusCode)
        {
            Plans = await resp.Content.ReadFromJsonAsync<List<SavingsPlanDto>>() ?? new();
            await LoadAnalysesAsync();
        }
        else
        {
            Plans.Clear();
            _analysisByPlan.Clear();
        }
        BuildRibbon();
    }

    private async Task LoadAnalysesAsync()
    {
        _analysisByPlan.Clear();
        if (Plans.Count == 0) { return; }
        var http = ClientFactory.CreateClient("Api");
        var tasks = Plans.Select(async p =>
        {
            try
            {
                var r = await http.GetAsync($"/api/savings-plans/{p.Id}/analysis");
                if (r.IsSuccessStatusCode)
                {
                    var dto = await r.Content.ReadFromJsonAsync<SavingsPlanAnalysisDto>();
                    if (dto != null) { _analysisByPlan[p.Id] = dto; }
                }
            }
            catch { }
        });
        await Task.WhenAll(tasks);
        StateHasChanged();
    }

    private PlanState GetState(SavingsPlanDto plan)
    {
        if (!_analysisByPlan.TryGetValue(plan.Id, out var a) || a.TargetAmount is null || a.TargetDate is null)
        {
            return PlanState.Normal;
        }
        return a.TargetReachable ? PlanState.Done : PlanState.Unreachable;
    }

    private void NewPlan() => Navigation.NavigateTo("/savings-plans/new");
    private void OpenDetail(Guid id) => Navigation.NavigateTo($"/savings-plans/{id}");
}