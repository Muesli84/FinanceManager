@using System.Net.Http.Json
@using FinanceManager.Shared.Dtos
@inject IHttpClientFactory ClientFactory
@inject Microsoft.Extensions.Localization.IStringLocalizer<FinanceManager.Web.Components.Pages.SetupNotificationsTab> Localizer
@inject IServiceProvider Services
@using FinanceManager.Web.ViewModels
@using Microsoft.Extensions.DependencyInjection

<div>
  <h4 style="margin-top:0;">@Localizer["Notifications_TabTitle"]</h4>

  @if (_vm!.Loading)
  {
      <div>@Localizer["Msg_Loading"]</div>
  }
  else if (!string.IsNullOrWhiteSpace(_vm!.Error))
  {
      <div class="error">@_vm!.Error</div>
      <button class="icon-btn" @onclick="(()=> _vm!.LoadAsync())" title="@Localizer["Btn_Retry"]">
          <svg class="icon"><use href="icons/sprite.svg#refresh" /></svg>
      </button>
  }
  else
  {
      <div class="form-grid">
          <div class="form-row">
              <label for="notif-monthly">@Localizer["Notifications_MonthlyReminder"]</label>
              <input id="notif-monthly" type="checkbox" @bind="_vm!.Model.MonthlyReminderEnabled" @bind:after="(()=> _vm!.OnChanged())" />
              <label for="notif-monthly" style="opacity:.8;">@Localizer["Notifications_MonthlyReminder_Help"]</label>
          </div>
          <div class="form-row" style="align-items:center;gap:.4rem;">
              <label>@Localizer["Notifications_Holidays_Provider"]</label>
              <select @bind="_vm!.Model.HolidayProvider" @bind:after="(()=> _vm!.OnProviderChanged())" style="width:12rem;">
                <option value="Memory">Memory</option>
                <option value="NagerDate">Nager.Date</option>
              </select>
              <span style="opacity:.7;">@Localizer["Notifications_Holidays_Provider_Help"]</span>
          </div>
          <div class="form-row" style="align-items:center;gap:.4rem;">
              <label>@Localizer["Notifications_MonthlyReminder_Time"]</label>
              <input type="number" min="0" max="23" style="width:5rem;" @bind="_vm!.Hour" @bind:after="(()=> _vm!.OnTimeChanged())" />
              :
              <input type="number" min="0" max="59" style="width:5rem;" @bind="_vm!.Minute" @bind:after="(()=> _vm!.OnTimeChanged())" />
              <span style="opacity:.7;">@Localizer["Notifications_MonthlyReminder_Time_Help"]</span>
          </div>
          <div class="form-row" style="align-items:center;gap:.4rem;">
              <label>@Localizer["Notifications_Holidays_Region"]</label>
              <input placeholder="DE" style="width:6rem;" @bind="_vm!.Model.HolidayCountryCode" @bind:after="(()=> _vm!.OnCountryChanged())" />
              @if (_vm!.Model.HolidayProvider != "Memory")
              {
                  <select style="width:10rem;" @bind="_vm!.Model.HolidaySubdivisionCode" @bind:after="(()=> _vm!.OnChanged())">
                      <option value="">--</option>
                      @if (_vm!.Subdivisions is not null)
                      {
                          @foreach (var s in _vm!.Subdivisions)
                          {
                              <option value="@s">@s</option>
                          }
                      }
                  </select>
              }
              <span style="opacity:.7;">@Localizer["Notifications_Holidays_Region_Help"]</span>
          </div>
      </div>

      <div style="margin-top:1rem;display:flex;gap:.5rem;">
          <button type="button" class="icon-btn" disabled="@(!_vm!.Dirty || _vm!.Saving)" @onclick="SaveAsync" title="@Localizer["Btn_Save"]">
              <svg class="icon"><use href="icons/sprite.svg#save" /></svg>
          </button>
          <button type="button" class="icon-btn" disabled="@(!_vm!.Dirty || _vm!.Saving)" title="@Localizer["Btn_Reset"]" @onclick="Reset">
              <svg class="icon"><use href="icons/sprite.svg#undo" /></svg>
          </button>
      </div>

      @if (_vm!.SavedOk)
      {
          <div class="success" style="margin-top:.5rem;">@Localizer["Notifications_SaveSuccess"]</div>
      }
      else if (!string.IsNullOrWhiteSpace(_vm!.SaveError))
      {
          <div class="error" style="margin-top:.5rem;">@_vm!.SaveError</div>
      }
  }
</div>

@code {
    private SetupNotificationsViewModel? _vm;

    protected override async Task OnInitializedAsync()
    {
        _vm = ActivatorUtilities.CreateInstance<SetupNotificationsViewModel>(Services);
        _vm.StateChanged += (_, __) => { _ = InvokeAsync(StateHasChanged); };
        await _vm.InitializeAsync();
    }

    private Task SaveAsync() => _vm!.SaveAsync();
    private void Reset() => _vm!.Reset();
}
