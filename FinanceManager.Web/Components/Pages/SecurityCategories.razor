@page "/security-categories"
@rendermode InteractiveServer
@inject HttpClient Http
@inject NavigationManager Nav
@using FinanceManager.Shared.Dtos
@using Microsoft.Extensions.Localization
@using FinanceManager.Web.Components.Shared
@inject IStringLocalizer<Components.Pages.SecurityCategories> Localizer
<PageTitle>@Localizer["PageTitle"]</PageTitle>

<Ribbon TTabEnum="SecurityCategories.TabId" Tabs="_tabs" ActiveTab="_activeTab" ActiveTabChanged="OnActiveTabChanged" />

<h3>@Localizer["Title"]</h3>
<table class="fm-table wide">
    <thead>
        <tr>
            <th>@Localizer["Th_Name"]</th>
        </tr>
    </thead>
    <tbody>
        @foreach(var c in _items)
        {
            <tr style="cursor:pointer;" @onclick="(()=>OpenDetail(c.Id))">
                <td>@c.Name</td>
            </tr>
        }
        @if(!_items.Any())
        {
            <tr><td style="opacity:.6;">@Localizer["NoEntries"]</td></tr>
        }
    </tbody>
</table>

@code {
    private enum TabId { Categories }
    private List<Ribbon<TabId>.RibbonTab<TabId>> _tabs = new();
    private TabId _activeTab = TabId.Categories;
    private Task OnActiveTabChanged(TabId id) { _activeTab = id; return Task.CompletedTask; }

    private List<SecurityCategoryDto> _items = new();

    protected override async Task OnParametersSetAsync()
    {
        var resp = await Http.GetAsync("/api/security-categories");
        if (resp.IsSuccessStatusCode)
        {
            _items = await resp.Content.ReadFromJsonAsync<List<SecurityCategoryDto>>() ?? new();
        }
        BuildRibbon();
    }

    private void BuildRibbon()
    {
        var actions = new Ribbon<TabId>.RibbonGroup
        {
            Title = Localizer["Ribbon_Group_Actions"],
            Items = new()
            {
                new Ribbon<TabId>.RibbonItem
                {
                    Label = Localizer["Ribbon_New"],
                    IconSvg = "<svg><use href='/icons/sprite.svg#plus'/></svg>",
                    Size = Ribbon<TabId>.RibbonItemSize.Large,
                    Callback = () => { NewCategory(); return Task.CompletedTask; }
                },
                new Ribbon<TabId>.RibbonItem
                {
                    Label = Localizer["Ribbon_Back"],
                    IconSvg = "<svg><use href='/icons/sprite.svg#back'/></svg>",
                    Callback = () => { Back(); return Task.CompletedTask; }
                }
            }
        };
        _tabs = new()
        {
            new Ribbon<TabId>.RibbonTab<TabId>
            {
                Id = TabId.Categories,
                Title = Localizer["Ribbon_Tab_SecurityCategories"],
                Groups = new(){ actions }
            }
        };
        StateHasChanged();
    }

    private void NewCategory() => Nav.NavigateTo("/security-categories/new");
    private void OpenDetail(Guid id) => Nav.NavigateTo($"/security-categories/{id}");
    private void Back() => Nav.NavigateTo("/securities");
}