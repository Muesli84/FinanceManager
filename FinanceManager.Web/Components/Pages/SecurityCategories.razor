@page "/security-categories"
@rendermode InteractiveServer
@inject NavigationManager Nav
@inject IServiceProvider Services
@using FinanceManager.Web.Components.Shared
@using FinanceManager.Web.ViewModels
@using Microsoft.Extensions.DependencyInjection
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<Components.Pages.SecurityCategories> Localizer
<PageTitle>@Localizer["PageTitle"]</PageTitle>

<Ribbon TTabEnum="SecurityCategories.TabId" Tabs="_tabs" ActiveTab="_activeTab" ActiveTabChanged="OnActiveTabChanged" />

<h3>@Localizer["Title"]</h3>
@if (!(_vm?.Loaded ?? false))
{
    <p>@Localizer["Loading"]</p>
}
else if (!_vm!.IsAuthenticated)
{
    <p>@Localizer["PleaseLogin"]</p>
}
else
{
    <table class="fm-table wide">
        <thead>
            <tr>
                <th>@Localizer["Th_Name"]</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var c in _vm!.Categories)
            {
                <tr style="cursor:pointer;" @onclick="(()=>OpenDetail(c.Id))">
                    <td>@c.Name</td>
                </tr>
            }
            @if(!_vm!.Categories.Any())
            {
                <tr><td style="opacity:.6;">@Localizer["NoEntries"]</td></tr>
            }
        </tbody>
    </table>
}

@code {
    private enum TabId { Categories }
    private List<Ribbon<TabId>.RibbonTab<TabId>> _tabs = new();
    private TabId _activeTab = TabId.Categories;
    private Task OnActiveTabChanged(TabId id) { _activeTab = id; return Task.CompletedTask; }

    private SecurityCategoriesViewModel? _vm;

    protected override async Task OnInitializedAsync()
    {
        _vm = ActivatorUtilities.CreateInstance<SecurityCategoriesViewModel>(Services);
        _vm.StateChanged += (_, __) => { RebuildRibbon(); _ = InvokeAsync(StateHasChanged); };
        await _vm.InitializeAsync();
        RebuildRibbon();
    }

    private void RebuildRibbon()
    {
        var groupsDto = _vm?.GetRibbon(Localizer) ?? new List<UiRibbonGroup>();
        var groups = new List<Ribbon<TabId>.RibbonGroup>();
        foreach (var g in groupsDto)
        {
            var items = new List<Ribbon<TabId>.RibbonItem>();
            foreach (var it in g.Items)
            {
                var size = it.Size == UiRibbonItemSize.Large ? Ribbon<TabId>.RibbonItemSize.Large : Ribbon<TabId>.RibbonItemSize.Small;
                items.Add(new Ribbon<TabId>.RibbonItem
                {
                    Label = it.Label,
                    IconSvg = it.IconSvg,
                    Size = size,
                    Disabled = it.Disabled,
                    Callback = () => { HandleRibbonAction(it.Action); return Task.CompletedTask; }
                });
            }
            groups.Add(new Ribbon<TabId>.RibbonGroup { Title = g.Title, Items = items });
        }
        _tabs = new()
        {
            new Ribbon<TabId>.RibbonTab<TabId>
            {
                Id = TabId.Categories,
                Title = Localizer["Ribbon_Tab_SecurityCategories"],
                Groups = groups
            }
        };
        StateHasChanged();
    }

    private void HandleRibbonAction(string action)
    {
        switch (action)
        {
            case "New":
                Nav.NavigateTo("/security-categories/new");
                break;
            case "Back":
                Nav.NavigateTo("/securities");
                break;
        }
    }

    private void OpenDetail(Guid id) => Nav.NavigateTo($"/security-categories/{id}");
}