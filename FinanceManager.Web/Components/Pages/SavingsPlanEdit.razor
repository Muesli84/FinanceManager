@page "/savings-plans/new"
@page "/savings-plans/{Id:guid}"
@rendermode InteractiveServer
@using FinanceManager.Shared.Dtos
@using System.ComponentModel.DataAnnotations
@using Microsoft.Extensions.Localization
@inject IHttpClientFactory ClientFactory
@inject NavigationManager Navigation
@inject IStringLocalizer<Components.Pages.SavingsPlanEdit> Localizer

<h3>@(IsEdit ? Localizer["TitleEdit"] : Localizer["TitleNew"])</h3>
<div class="action-bar" style="margin-bottom:1rem;">
    <button class="icon-btn" @onclick="SaveAsync" type="submit" title="@Localizer["BtnSave"]">
        <svg class="icon"><use href="icons/sprite.svg#save"></use></svg>
    </button>
    @if (IsEdit)
    {
        <button class="icon-btn" @onclick="ArchiveAsync" title="@Localizer["BtnArchive"]">
            <svg class="icon"><use href="icons/sprite.svg#archive"></use></svg>
        </button>
        <button class="icon-btn danger" @onclick="DeleteAsync" title="@Localizer["BtnDelete"]">
            <svg class="icon"><use href="icons/sprite.svg#delete"></use></svg>
        </button>
        <button class="icon-btn" @onclick="OpenPostings" title="Postings">
            <svg class="icon"><use href="icons/sprite.svg#postings"></use></svg>
        </button>
    }
    <button class="icon-btn" @onclick="Back" title="@Localizer["BtnBack"]">
        <svg class="icon"><use href="icons/sprite.svg#back"></use></svg>
    </button>
    <button class="icon-btn" @onclick="OpenCategoryList" title="@Localizer["BtnCategories"]">
        <svg class="icon"><use href="icons/sprite.svg#groups"></use></svg>
    </button>
</div>

<EditForm Model="_model" OnValidSubmit="SaveAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        <label>@Localizer["LabelName"]</label>
        <InputText @bind-Value="_model.Name" />
        <ValidationMessage For="() => _model.Name" />
    </div>
    <div>
        <label>@Localizer["LabelType"]</label>
        <InputSelect @bind-Value="_model.Type">
            @foreach (var t in Enum.GetValues<SavingsPlanType>())
            {
                <option value="@t">@Localizer[$"Type_{t}"]</option>
            }
        </InputSelect>
    </div>
    <div>
        <label>@Localizer["LabelTargetAmount"]</label>
        <InputNumber @bind-Value="_model.TargetAmount" />
    </div>
    <div>
        <label>@Localizer["LabelTargetDate"]</label>
        <InputDate @bind-Value="_model.TargetDate" />
    </div>
    <div>
        <label>@Localizer["LabelInterval"]</label>
        <InputSelect @bind-Value="_model.Interval">
            <option value="">--</option>
            @foreach (var i in Enum.GetValues<SavingsPlanInterval>())
            {
                <option value="@i">@Localizer[$"Interval_{i}"]</option>
            }
        </InputSelect>
    </div>
    <div>
        <label>@Localizer["LabelCategory"]</label>
        <InputSelect @bind-Value="_model.CategoryId">
            <option value="">--</option>
            @foreach (var cat in _categories)
            {
                <option value="@cat.Id">@cat.Name</option>
            }
        </InputSelect>
    </div>
    <div>
        <label>Vertragsnummer</label>
        <InputText @bind-Value="_model.ContractNumber" />
    </div>
    @if (!string.IsNullOrWhiteSpace(_error))
    {
        <div class="error" style="margin-top:.5rem;">@Localizer["ErrorNotFound"]</div>
    }
</EditForm>

@if (IsEdit)
{
    <div class="panel" style="margin-top:1rem;padding:0.75rem 1rem;border:1px solid #444;border-radius:6px;max-width:720px;">
        <h4 style="margin:.2rem 0 .6rem 0;">Analyse</h4>
        @if(_analysis == null)
        {
            <button class="icon-btn" @onclick="LoadAnalysis" title="Analyse neu berechnen"><svg><use href="/icons/sprite.svg#refresh" /></svg></button>
        }
        else
        {
            <div style="display:grid;grid-template-columns:repeat(auto-fit,minmax(180px,1fr));gap:.5rem;">
                <div><strong>Zielbetrag:</strong> @_analysis.TargetAmount?.ToString("N2") ?? "-"</div>
                <div><strong>Zieldatum:</strong> @_analysis.TargetDate?.ToShortDateString() ?? "-"</div>
                <div><strong>Monate verbleibend:</strong> @_analysis.MonthsRemaining</div>
                <div><strong>Bisher gespart:</strong> @_analysis.AccumulatedAmount.ToString("N2")</div>
                <div><strong>Erforderlich/Monat:</strong> @_analysis.RequiredMonthly.ToString("N2")</div>
                <div><strong>Status:</strong> @(_analysis.TargetReachable ? "erreichbar" : "nicht erreichbar")</div>
            </div>
            <div style="margin-top:.5rem;">
                <button class="icon-btn" @onclick="LoadAnalysis" title="Neu berechnen"><svg><use href="/icons/sprite.svg#refresh" /></svg></button>
            </div>
        }
    </div>
}

@code {
    [Parameter] public Guid? Id { get; set; }
    private SavingsPlanEditModel _model = new();
    private bool IsEdit => Id.HasValue;
    private string? _error;
    private List<SavingsPlanCategoryDto> _categories = new();

    private SavingsPlanAnalysisDto? _analysis;

    protected override async Task OnParametersSetAsync()
    {
        if (IsEdit)
        {
            var http = ClientFactory.CreateClient("Api");
            var resp = await http.GetAsync($"/api/savings-plans/{Id}");
            if (resp.IsSuccessStatusCode)
            {
                var dto = await resp.Content.ReadFromJsonAsync<SavingsPlanDto>();
                if (dto != null)
                {
                    _model.Name = dto.Name;
                    _model.Type = dto.Type;
                    _model.TargetAmount = dto.TargetAmount;
                    _model.TargetDate = dto.TargetDate;
                    _model.Interval = dto.Interval;
                    _model.CategoryId = dto.CategoryId;
                    _model.ContractNumber = dto.ContractNumber;
                    await LoadAnalysis();
                }
            }
            else
            {
                _error = "Sparplan nicht gefunden.";
            }
        }
        await LoadCategoriesAsync();
    }

    private async Task LoadAnalysis()
    {
        if (!IsEdit) return;
        var http = ClientFactory.CreateClient("Api");
        var resp = await http.GetAsync($"/api/savings-plans/{Id}/analysis");
        if (resp.IsSuccessStatusCode)
        {
            _analysis = await resp.Content.ReadFromJsonAsync<SavingsPlanAnalysisDto>();
            StateHasChanged();
        }
    }

    private async Task LoadCategoriesAsync()
    {
        var http = ClientFactory.CreateClient("Api");
        var resp = await http.GetAsync("/api/savings-plan-categories");
        if (resp.IsSuccessStatusCode)
        {
            _categories = await resp.Content.ReadFromJsonAsync<List<SavingsPlanCategoryDto>>() ?? new();
        }
    }

    private async Task SaveAsync()
    {
        _error = null;
        var http = ClientFactory.CreateClient("Api");
        if (IsEdit)
        {
            var resp = await http.PutAsJsonAsync($"/api/savings-plans/{Id}", _model);
            if (resp.IsSuccessStatusCode)
            {
                Navigation.NavigateTo($"/savings-plans/{Id}", true);
            }
            else
            {
                _error = await resp.Content.ReadAsStringAsync();
            }
        }
        else
        {
            var resp = await http.PostAsJsonAsync("/api/savings-plans", _model);
            if (resp.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/savings-plans", true);
            }
            else
            {
                _error = await resp.Content.ReadAsStringAsync();
            }
        }
    }

    private async Task ArchiveAsync()
    {
        if (!IsEdit || Id == null) return;
        var http = ClientFactory.CreateClient("Api");
        var resp = await http.PostAsync($"/api/savings-plans/{Id}/archive", null);
        if (resp.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/savings-plans", true);
        }
        else
        {
            _error = await resp.Content.ReadAsStringAsync();
        }
    }

    private async Task DeleteAsync()
    {
        if (!IsEdit || Id == null) return;
        var http = ClientFactory.CreateClient("Api");
        var resp = await http.DeleteAsync($"/api/savings-plans/{Id}");
        if (resp.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/savings-plans", true);
        }
        else
        {
            _error = await resp.Content.ReadAsStringAsync();
        }
    }

    private void Back() => Navigation.NavigateTo("/savings-plans");
    private void OpenCategoryList() => Navigation.NavigateTo("/savings-plan-categories");
    private void OpenPostings()
    {
        if (Id.HasValue)
        {
            Navigation.NavigateTo($"/postings/savings-plan/{Id}");
        }
    }

    private sealed class SavingsPlanEditModel
    {
        [Required, MinLength(2)] public string Name { get; set; } = string.Empty;
        public SavingsPlanType Type { get; set; } = SavingsPlanType.OneTime;
        public decimal? TargetAmount { get; set; }
        public DateTime? TargetDate { get; set; }
        public SavingsPlanInterval? Interval { get; set; }
        public Guid? CategoryId { get; set; }
        public string? ContractNumber { get; set; }
    }
}