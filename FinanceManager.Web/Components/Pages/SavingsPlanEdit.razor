@page "/savings-plans/new"
@page "/savings-plans/{Id:guid}"
@rendermode InteractiveServer
@using FinanceManager.Shared.Dtos
@using System.ComponentModel.DataAnnotations
@using Microsoft.Extensions.Localization
@using Microsoft.AspNetCore.WebUtilities
@using FinanceManager.Web.Components.Shared
@using FinanceManager.Domain.Attachments
@using FinanceManager.Web.ViewModels
@inject NavigationManager Nav
@inject IServiceProvider Services
@inject IStringLocalizer<Components.Pages.SavingsPlanEdit> Localizer
@inject IHttpClientFactory ClientFactory
<PageTitle>@Localizer["PageTitle"]</PageTitle>

<Ribbon TTabEnum="SavingsPlanEdit.TabId" Tabs="_tabs" ActiveTab="_activeTab" ActiveTabChanged="OnActiveTabChanged" />

<h3>@(_vm?.IsEdit == true ? Localizer["TitleEdit"] : Localizer["TitleNew"])</h3>

<EditForm Model="_vm!.Model" OnValidSubmit="(()=> SaveAsync())">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        <label>@Localizer["LabelName"]</label>
        <InputText @bind-Value="_vm!.Model.Name" @bind-Value:after="(()=>RebuildRibbon())" />
        <ValidationMessage For="() => _vm!.Model.Name" />
    </div>
    <div>
        <label>@Localizer["LabelType"]</label>
        <InputSelect @bind-Value="_vm!.Model.Type" @bind-Value:after="(()=>RebuildRibbon())">
            @foreach (var t in Enum.GetValues<SavingsPlanType>())
            {
                <option value="@t">@Localizer[$"Type_{t}"]</option>
            }
        </InputSelect>
    </div>
    <div>
        <label>@Localizer["LabelTargetAmount"]</label>
        <InputNumber @bind-Value="_vm!.Model.TargetAmount" />
    </div>
    <div>
        <label>@Localizer["LabelTargetDate"]</label>
        <InputDate @bind-Value="_vm!.Model.TargetDate" />
    </div>
    <div>
        <label>@Localizer["LabelInterval"]</label>
        <InputSelect @bind-Value="_vm!.Model.Interval">
            <option value="">--</option>
            @foreach (var i in Enum.GetValues<SavingsPlanInterval>())
            {
                <option value="@i">@Localizer[$"Interval_{i}"]</option>
            }
        </InputSelect>
    </div>
    <div>
        <label>@Localizer["LabelCategory"]</label>
        <InputSelect @bind-Value="_vm!.Model.CategoryId">
            <option value="">--</option>
            @foreach (var cat in _vm!.Categories)
            {
                <option value="@cat.Id">@cat.Name</option>
            }
        </InputSelect>
    </div>
    <div>
        <label>@Localizer["LabelContractNumber"]</label>
        <InputText @bind-Value="_vm!.Model.ContractNumber" />
    </div>
    @if (!string.IsNullOrWhiteSpace(_vm?.Error))
    {
        <div class="error" style="margin-top:.5rem;">@Localizer[_vm!.Error!]</div>
    }
</EditForm>

@if (_vm?.IsEdit == true)
{
    <div style="margin-top:1.2rem;">
        <AggregateBarChart Endpoint="@_vm!.ChartEndpoint" Title="@Localizer["Chart_Title_SavingsPlan"]" />
    </div>
}

@if (_showAttachments && _vm?.Id != null)
{
    <div class="split-center" @onclick="(()=> _showAttachments = false)">
        <div class="split-dialog" style="max-width:90vH;" @onclick:stopPropagation="true">
            <div style="display:flex;align-items:center;justify-content:space-between;margin-bottom:.5rem;">
                <h3 style="margin:0;font-size:1rem;">@Localizer["Attachments_Title"]</h3>
                <button class="icon-btn" title='@Localizer["Btn_Close"]' @onclick="(()=> _showAttachments=false)"><svg><use href="/icons/sprite.svg#clear" /></svg></button>
            </div>
            <AttachmentsPanel ParentKind="@AttachmentEntityKind.SavingsPlan" ParentId="@_vm!.Id!.Value" />
        </div>
    </div>
}

@if (_vm?.IsEdit == true)
{
    <div class="panel" style="margin-top:1rem;padding:0.75rem 1rem;border:1px solid #444;border-radius:6px;max-width:720px;">
        <h4 style="margin:.2rem 0 .6rem 0;">@Localizer["Analysis_Title"]</h4>
        @if(_vm!.Analysis == null)
        {
            <button class="icon-btn" @onclick="(()=> _vm!.LoadAnalysisAsync())" title="@Localizer["Analysis_Recalculate"]"><svg><use href="/icons/sprite.svg#refresh" /></svg></button>
        }
        else
        {
            <div style="display:grid;grid-template-columns:repeat(auto-fit,minmax(180px,1fr));gap:.5rem;">
                <div><strong>@Localizer["Analysis_TargetAmount"]:</strong> @_vm!.Analysis!.TargetAmount?.ToString("N2") ?? "-"</div>
                <div><strong>@Localizer["Analysis_TargetDate"]:</strong> @_vm!.Analysis!.TargetDate?.ToShortDateString() ?? "-"</div>
                <div><strong>@Localizer["Analysis_MonthsRemaining"]:</strong> @_vm!.Analysis!.MonthsRemaining</div>
                <div><strong>@Localizer["Analysis_Accumulated"]:</strong> @_vm!.Analysis!.AccumulatedAmount.ToString("N2")</div>
                <div><strong>@Localizer["Analysis_RequiredMonthly"]:</strong> @_vm!.Analysis!.RequiredMonthly.ToString("N2")</div>
                <div><strong>@Localizer["Analysis_Status"]:</strong> @(_vm!.Analysis!.TargetReachable ? Localizer["Analysis_Status_Reachable"] : Localizer["Analysis_Status_Unreachable"])</div>
            </div>
            <div style="margin-top:.5rem;">
                <button class="icon-btn" @onclick="(()=> _vm!.LoadAnalysisAsync())" title="@Localizer["Analysis_RecalculateShort"]"><svg><use href="/icons/sprite.svg#refresh" /></svg></button>
            </div>
        }
    </div>
}

@code {
    [Parameter] public Guid? Id { get; set; }
    [SupplyParameterFromQuery(Name="back")] public string? BackNav { get; set; }
    [SupplyParameterFromQuery(Name="draftId")] public Guid? DraftId { get; set; }
    [SupplyParameterFromQuery(Name="entryId")] public Guid? EntryId { get; set; }
    [SupplyParameterFromQuery(Name="prefillName")] public string? PrefillName { get; set; }
    private SavingsPlanEditViewModel? _vm;
    private bool _showAttachments;

    // Ribbon state
    private enum TabId { SavingsPlan }
    private List<Ribbon<TabId>.RibbonTab<TabId>> _tabs = new();
    private TabId _activeTab = TabId.SavingsPlan;
    private Task OnActiveTabChanged(TabId id){ _activeTab = id; return Task.CompletedTask; }

    protected override async Task OnParametersSetAsync()
    {
        if (_vm is null)
        {
            _vm = ActivatorUtilities.CreateInstance<SavingsPlanEditViewModel>(Services);
            _vm.StateChanged += (_, __) => { RebuildRibbon(); _ = InvokeAsync(StateHasChanged); };
        }
        await _vm.InitializeAsync(Id, BackNav, DraftId, EntryId, PrefillName);
        RebuildRibbon();
    }

    private void RebuildRibbon()
    {
        var groupsDto = _vm?.GetRibbon(Localizer) ?? new List<UiRibbonGroup>();
        var groups = new List<Ribbon<TabId>.RibbonGroup>();
        foreach (var g in groupsDto)
        {
            var items = new List<Ribbon<TabId>.RibbonItem>();
            foreach (var it in g.Items)
            {
                var size = it.Size == UiRibbonItemSize.Large ? Ribbon<TabId>.RibbonItemSize.Large : Ribbon<TabId>.RibbonItemSize.Small;
                items.Add(new Ribbon<TabId>.RibbonItem
                {
                    Label = it.Label,
                    IconSvg = it.IconSvg,
                    Size = size,
                    Disabled = it.Disabled,
                    Callback = () => { HandleRibbonAction(it.Action); return Task.CompletedTask; }
                });
            }
            groups.Add(new Ribbon<TabId>.RibbonGroup { Title = g.Title, Items = items });
        }
        _tabs = new()
        {
            new Ribbon<TabId>.RibbonTab<TabId>
            {
                Id = TabId.SavingsPlan,
                Title = Localizer["Ribbon_Tab_SavingsPlan"],
                Groups = groups
            }
        };
        StateHasChanged();
    }

    private void HandleRibbonAction(string action)
    {
        switch (action)
        {
            case "Back":
                Back();
                break;
            case "Save":
                _ = SaveAsync();
                break;
            case "Archive":
                _ = ArchiveAsync();
                break;
            case "Delete":
                _ = DeleteAsync();
                break;
            case "Recalculate":
                _ = _vm!.LoadAnalysisAsync();
                break;
            case "Categories":
                OpenCategoryList();
                break;
            case "Postings":
                OpenPostings();
                break;
            case "Attachments":
                OpenAttachments();
                break;
        }
    }

    private async Task SaveAsync()
    {
        var dto = await _vm!.SaveAsync();
        if (dto is null)
        {
            RebuildRibbon();
            return;
        }
        if (_vm!.IsEdit)
        {
            Nav.NavigateTo($"/savings-plans/{_vm!.Id}", true);
        }
        else
        {
            if (_vm!.ReturnDraftId != null && _vm!.ReturnEntryId != null)
            {
                try
                {
                    var client = ClientFactory.CreateClient("Api");
                    var assignPayload = new { SavingsPlanId = (Guid?)dto.Id };
                    await client.PostAsJsonAsync($"/api/statement-drafts/{_vm!.ReturnDraftId}/entries/{_vm!.ReturnEntryId}/savingsplan", assignPayload);
                }
                catch { }
                Nav.NavigateTo($"/statement-drafts/{_vm!.ReturnDraftId}/entries/{_vm!.ReturnEntryId}", true);
            }
            else
            {
                Nav.NavigateTo($"/savings-plans/{dto.Id}", true);
            }
        }
        RebuildRibbon();
    }

    private async Task ArchiveAsync()
    {
        var ok = await _vm!.ArchiveAsync();
        if (ok)
        {
            Nav.NavigateTo("/savings-plans", true);
        }
        RebuildRibbon();
    }

    private async Task DeleteAsync()
    {
        var ok = await _vm!.DeleteAsync();
        if (ok)
        {
            Nav.NavigateTo("/savings-plans", true);
        }
        RebuildRibbon();
    }

    private void Back()
    {
        if (!string.IsNullOrWhiteSpace(BackNav))
        {
            Nav.NavigateTo(Uri.UnescapeDataString(BackNav!), true);
            return;
        }
        if (_vm!.ReturnDraftId != null && _vm!.ReturnEntryId != null)
        {
            Nav.NavigateTo($"/statement-drafts/{_vm!.ReturnDraftId}/entries/{_vm!.ReturnEntryId}", true);
        }
        else
        {
            Nav.NavigateTo("/savings-plans");
        }
    }
    private void OpenCategoryList() => Nav.NavigateTo("/savings-plan-categories");
    private void OpenPostings()
    {
        if (_vm!.Id.HasValue)
        {
            Nav.NavigateTo($"/postings/savings-plan/{_vm!.Id}");
        }
    }
    private void OpenAttachments(){ if (_vm!.Id.HasValue){ _showAttachments = true; StateHasChanged(); } }
}