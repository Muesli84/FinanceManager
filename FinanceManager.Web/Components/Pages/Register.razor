@page "/register"
@rendermode InteractiveServer
@using System.Net.Http.Json
@inject HttpClient Http
@using FinanceManager.Application.Users
@inject IUserReadService UserRead
@inject NavigationManager Nav
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@inject Microsoft.Extensions.Localization.IStringLocalizer<FinanceManager.Web.Components.Pages.Register> L
@using FinanceManager.Web.Components.Shared
@using Microsoft.JSInterop
@inject IJSRuntime JS

<PageTitle>@L["PageTitle"]</PageTitle>

<Ribbon TTabEnum="Register.TabId" Tabs="_tabs" ActiveTab="_activeTab" ActiveTabChanged="OnActiveTabChanged" />

<h1>@L["Heading"]</h1>

@if (!string.IsNullOrEmpty(_error))
{
    <div class="error">@_error</div>
}

@if (_debugVisible)
{
    <div style="font-size:.7rem;opacity:.6;line-height:1.1em;">
        <strong>@L["DebugModel_Title"]</strong><br />
        @L["DebugModel_Username"]: @_model.Username<br />
        @L["DebugModel_PasswordLength"]: @_model.Password?.Length
    </div>
}

<EditForm Model="_model"
          OnValidSubmit="RegisterAsync"
          OnInvalidSubmit="InvalidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        <label for="username">@L["Label_Username"]</label>
        <InputText id="username"
                   @bind-Value="_model.Username"
                   @bind-Value:after="OnUsernameChanged"
                   autocomplete="username" />
        <ValidationMessage For="() => _model.Username" />
    </div>
    <div>
        <label for="password">@L["Label_Password"]</label>
        <InputText id="password"
                   @bind-Value="_model.Password"
                   @bind-Value:after="OnPasswordChanged"
                   Type="password"
                   autocomplete="new-password" />
        <ValidationMessage For="() => _model.Password" />
    </div>
    <div style="margin-top:1.25rem;display:flex;gap:.5rem;align-items:center;">
        <button type="submit" disabled="@_busy">
            @(_busy ? L["Button_Wait"] : L["Button_Register"]) 
        </button>
        <button type="button" @onclick="ToggleDebug" style="background:#444;">@(_debugVisible ? L["Debug_Off"] : L["Debug_On"])</button>
    </div>
</EditForm>

@code {
    private enum TabId { Register }
    private List<Ribbon<TabId>.RibbonTab<TabId>> _tabs = new();
    private TabId _activeTab = TabId.Register;
    private Task OnActiveTabChanged(TabId id){ _activeTab = id; return Task.CompletedTask; }

    private void BuildRibbon()
    {
        var nav = new Ribbon<TabId>.RibbonGroup
        {
            Title = L["Ribbon_Group_Navigation"],
            Items = new()
            {
                new Ribbon<TabId>.RibbonItem
                {
                    Label = L["Ribbon_Back"],
                    IconSvg = "<svg><use href='/icons/sprite.svg#back'/></svg>",
                    Size = Ribbon<TabId>.RibbonItemSize.Large,
                    Callback = () => { Nav.NavigateTo("/"); return Task.CompletedTask; }
                }
            }
        };
        _tabs = new(){ new Ribbon<TabId>.RibbonTab<TabId>{ Id = TabId.Register, Title = L["Ribbon_Tab_Register"], Groups = new(){ nav } } };
        StateHasChanged();
    }

    private readonly RegisterVm _model = new();
    private bool _busy;
    private string? _error;
    private bool _debugVisible;
    private IJSObjectReference? _profileModule;

    protected override void OnInitialized()
    {
        BuildRibbon();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _profileModule = await JS.InvokeAsync<IJSObjectReference>("import", "/js/profile.js");
        }
    }

    private async Task RegisterAsync()
    {
        _busy = true;
        _error = null;

        if (string.IsNullOrWhiteSpace(_model.Username) || string.IsNullOrWhiteSpace(_model.Password))
        {
            _error = L["Error_MissingCredentials"];
            _busy = false;
            return;
        }

        try
        {
            string? preferredLanguage = null; string? timeZoneId = null;
            try
            {
                if (_profileModule != null)
                {
                    preferredLanguage = await _profileModule.InvokeAsync<string>("getLocale");
                    timeZoneId = await _profileModule.InvokeAsync<string>("getTimeZone");
                    if (!string.IsNullOrWhiteSpace(preferredLanguage)) preferredLanguage = preferredLanguage[..Math.Min(preferredLanguage.Length, 10)];
                    if (!string.IsNullOrWhiteSpace(timeZoneId)) timeZoneId = timeZoneId[..Math.Min(timeZoneId.Length, 100)];
                }
            }
            catch { }

            var payload = new { Username = _model.Username.Trim(), Password = _model.Password, PreferredLanguage = preferredLanguage, TimeZoneId = timeZoneId };
            var resp = await Http.PostAsJsonAsync("/api/auth/register", payload);
            if (!resp.IsSuccessStatusCode)
            {
                var problem = await resp.Content.ReadFromJsonAsync<Dictionary<string, string>>();
                problem?.TryGetValue("error", out _error);
                _error ??= L["Error_RegisterFailed"];
            }
            else
            {
                Nav.NavigateTo("/", forceLoad: true);
            }
        }
        catch (Exception ex)
        {
            _error = string.Format(L["Error_Unexpected"], ex.Message);
        }

        _busy = false;
    }

    private void InvalidSubmit(EditContext ctx) { }
    private void ToggleDebug() => _debugVisible = !_debugVisible;
    private void OnUsernameChanged()
    {
        var value = _model.Username;
        if (!string.IsNullOrWhiteSpace(value))
        {
            var trimmed = value.Trim();
            if (trimmed != _model.Username)
            {
                _model.Username = trimmed;
            }
        }
    }
    private void OnPasswordChanged() { }

    private sealed class RegisterVm
    {
        [Required, MinLength(3)]
        public string Username { get; set; } = string.Empty;
        [Required, MinLength(6)]
        public string Password { get; set; } = string.Empty;
    }
}
