@page "/accounts/{Id:guid}"
@page "/accounts/new"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager Nav
@inject FinanceManager.Application.ICurrentUserService CurrentUser
@using FinanceManager.Web.Components.Shared
@inject Microsoft.Extensions.Localization.IStringLocalizer<FinanceManager.Web.Components.Pages.AccountDetail> Localizer
@using FinanceManager.Domain.Attachments
@using FinanceManager.Web.ViewModels
@inject IServiceProvider Services
<PageTitle>@Localizer["PageTitle"]</PageTitle>

<Ribbon TTabEnum="AccountDetail.TabId" Tabs="_tabs" ActiveTab="_activeTab" ActiveTabChanged="OnActiveTabChanged" />

<h1>@((_vm?.IsNew ?? (Id is null)) ? Localizer["TitleNew"] : Localizer["TitleEdit"])</h1>

@if (!_vm?.Loaded ?? true)
{
    <p>@Localizer["Loading"]</p>
}
else if (!CurrentUser.IsAuthenticated)
{
    <p>@Localizer["PleaseLogin"]</p>
}
else
{
    <EditForm Model="_vm" OnValidSubmit="@OnSaveClickedAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div style="display:grid;gap:.6rem;max-width:520px;">
            <div>
                <label>@Localizer["LabelName"]</label><br />
                <InputText @bind-Value="_vm!.Name" @bind-Value:after="(()=>RebuildRibbon())" />
            </div>
            <div>
                <label>@Localizer["LabelType"]</label><br />
                <select @bind="_vm!.Type" @bind:after="(()=>RebuildRibbon())">
                    <option value="Giro">@Localizer["Type_Giro"]</option>
                    <option value="Savings">@Localizer["Type_Savings"]</option>
                </select>
            </div>
            <div>
                <label>@Localizer["LabelIban"]</label><br />
                <InputText @bind-Value="_vm!.Iban" />
            </div>
            <div>
                <label>@Localizer["LabelBankContact"]</label><br />
                <select @bind="_vm!.BankContactId" @bind:after="(()=>RebuildRibbon())">
                    <option value="">-- @Localizer["Select"] --</option>
                    @foreach (var c in _vm!.BankContacts)
                    {
                        <option value="@c.Id">@c.Name</option>
                    }
                </select>
            </div>
            @if (!_vm!.BankContactId.HasValue)
            {
                <div>
                    <label>@Localizer["LabelCreateNewBankContact"]</label><br />
                    <InputText @bind-Value="_vm!.NewBankContactName" />
                </div>
            }
        </div>
        @if (!string.IsNullOrEmpty(_vm!.Error))
        {
            <div style="color:#e66;margin-top:1rem;">@Localizer[_vm.Error]</div>
        }
    </EditForm>

    @if (_vm?.ShowCharts == true)
    {
      <div style="margin-top:1.5rem;">
          <AggregateBarChart Endpoint="@($"/api/accounts/{Id}/aggregates")" Title="@Localizer["Chart_Title_Account"]" />
      </div>
    }
}

@if (_vm?.ShowAttachments == true && Id != null)
{
    <div class="split-center" @onclick="(()=> _vm!.ShowAttachments = false)">
        <div class="split-dialog" style="max-width:90vH;" @onclick:stopPropagation="true">
            <div style="display:flex;align-items:center;justify-content:space-between;margin-bottom:.5rem;">
                <h3 style="margin:0;font-size:1rem;">@Localizer["Attachments_Title"]</h3>
                <button class="icon-btn" title='@Localizer["Btn_Close"]' @onclick="(()=> _vm!.ShowAttachments=false)"><svg><use href="/icons/sprite.svg#clear" /></svg></button>
            </div>
            <AttachmentsPanel ParentKind="@AttachmentEntityKind.Account" ParentId="@Id!.Value" />
        </div>
    </div>
}

@code {
    [Parameter] public Guid? Id { get; set; }
    [SupplyParameterFromQuery(Name="back")] public string? BackNav { get; set; }

    // Ribbon state
    private enum TabId { Account }
    private List<Ribbon<TabId>.RibbonTab<TabId>> _tabs = new();
    private TabId _activeTab = TabId.Account;
    private Task OnActiveTabChanged(TabId id){ _activeTab = id; return Task.CompletedTask; }

    private AccountDetailViewModel? _vm;

    protected override async Task OnParametersSetAsync()
    {
        if (_vm == null || _vm.AccountId != Id)
        {
            if (_vm is not null)
            {
                _vm.StateChanged -= VmOnStateChanged;
                _vm.AuthenticationRequired -= VmOnAuthenticationRequired;
                await _vm.DisposeAsync();
            }
            _vm = ActivatorUtilities.CreateInstance<AccountDetailViewModel>(Services);
            _vm.StateChanged += VmOnStateChanged;
            _vm.AuthenticationRequired += VmOnAuthenticationRequired;
            _vm.ForAccount(Id);

            if (_vm.IsAuthenticated)
            {
                await _vm.InitializeAsync();
            }
            else
            {
                // Request authentication with current URL as return target
                var returnUrl = Nav.ToBaseRelativePath(Nav.Uri);
                VmOnAuthenticationRequired(_vm, returnUrl);
            }
            RebuildRibbon();
        }
    }

    private void VmOnAuthenticationRequired(object? sender, string? returnUrl)
    {
        var url = string.IsNullOrWhiteSpace(returnUrl) ? "/login" : $"/login?returnUrl={Uri.EscapeDataString(returnUrl)}";
        Nav.NavigateTo(url, forceLoad: true);
    }

    private void VmOnStateChanged(object? sender, EventArgs e)
    {
        RebuildRibbon();
        _ = InvokeAsync(StateHasChanged);
    }

    private void RebuildRibbon()
    {
        var groupsDto = _vm?.GetRibbon(Localizer) ?? new List<UiRibbonGroup>();
        var groups = new List<Ribbon<TabId>.RibbonGroup>();
        foreach (var g in groupsDto)
        {
            var items = new List<Ribbon<TabId>.RibbonItem>();
            foreach (var it in g.Items)
            {
                var size = it.Size == UiRibbonItemSize.Large
                    ? Ribbon<TabId>.RibbonItemSize.Large
                    : Ribbon<TabId>.RibbonItemSize.Small;

                items.Add(new Ribbon<TabId>.RibbonItem
                {
                    Label = it.Label,
                    IconSvg = it.IconSvg,
                    Size = size,
                    Disabled = it.Disabled,
                    Callback = () => { HandleRibbonAction(it.Action); return Task.CompletedTask; }
                });
            }
            groups.Add(new Ribbon<TabId>.RibbonGroup { Title = g.Title, Items = items });
        }

        _tabs = new()
        {
            new Ribbon<TabId>.RibbonTab<TabId>
            {
                Id = TabId.Account,
                Title = Localizer["Ribbon_Tab_Account"],
                Groups = groups
            }
        };
        StateHasChanged();
    }

    private async Task OnSaveClickedAsync()
    {
        if (_vm is null) { return; }
        var id = await _vm.SaveAsync();
        if (id.HasValue)
        {
            Nav.NavigateTo($"/accounts/{id.Value}", forceLoad: true);
        }
    }

    private void HandleRibbonAction(string action)
    {
        switch (action)
        {
            case "Back":
                Back();
                break;
            case "Save":
                _ = OnSaveClickedAsync();
                break;
            case "Delete":
                _ = DeleteAsync();
                break;
            case "OpenBankContact":
                OpenBankContact();
                break;
            case "OpenPostings":
                OpenPostings();
                break;
            case "OpenAttachments":
                _vm!.ShowAttachments = true;
                break;
        }
    }

    private async Task DeleteAsync()
    {
        if (_vm is null || _vm.IsNew) { return; }
        await _vm.DeleteAsync();
        if (_vm.Error == null)
        {
            Back();
        }
    }

    private void Back()
    {
        if (!string.IsNullOrWhiteSpace(BackNav))
        {
            var target = Uri.UnescapeDataString(BackNav);
            Nav.NavigateTo(target, forceLoad: true);
            return;
        }
        Nav.NavigateTo("/accounts", forceLoad: true);
    }
    private void OpenBankContact(){ if (_vm?.BankContactId is Guid id) { Nav.NavigateTo($"/contacts/{id}"); } }
    private void OpenPostings(){ if (Id != null) { Nav.NavigateTo($"/postings/account/{Id}"); } }
}
