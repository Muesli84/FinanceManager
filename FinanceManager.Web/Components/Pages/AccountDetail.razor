@page "/accounts/{Id:guid}"
@page "/accounts/new"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager Nav
@inject FinanceManager.Application.ICurrentUserService CurrentUser
@using FinanceManager.Web.Components.Shared
@inject Microsoft.Extensions.Localization.IStringLocalizer<FinanceManager.Web.Components.Pages.AccountDetail> Localizer
<PageTitle>@Localizer["PageTitle"]</PageTitle>

<Ribbon TTabEnum="AccountDetail.TabId" Tabs="_tabs" ActiveTab="_activeTab" ActiveTabChanged="OnActiveTabChanged" />

<h1>@(IsNew ? Localizer["TitleNew"] : Localizer["TitleEdit"])</h1>

@if (!_loaded)
{
    <p>@Localizer["Loading"]</p>
}
else if (!CurrentUser.IsAuthenticated)
{
    <p>@Localizer["PleaseLogin"]</p>
}
else
{
    <EditForm Model="_model" OnValidSubmit="@SaveAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div style="display:grid;gap:.6rem;max-width:520px;">
            <div>
                <label>@Localizer["LabelName"]</label><br />
                <InputText @bind-Value="_model.Name" @bind-Value:after="(()=>BuildRibbon())" />
            </div>
            <div>
                <label>@Localizer["LabelType"]</label><br />
                <select @bind="_model.Type" @bind:after="(()=>BuildRibbon())">
                    <option value="Giro">@Localizer["Type_Giro"]</option>
                    <option value="Savings">@Localizer["Type_Savings"]</option>
                </select>
            </div>
            <div>
                <label>@Localizer["LabelIban"]</label><br />
                <InputText @bind-Value="_model.Iban" />
            </div>
            <div>
                <label>@Localizer["LabelBankContact"]</label><br />
                <select @bind="_model.BankContactId" @bind:after="OnBankContactAfterChanged">
                    <option value="">-- @Localizer["Select"] --</option>
                    @foreach (var c in _bankContacts)
                    {
                        <option value="@c.Id">@c.Name</option>
                    }
                </select>
            </div>
            @if (string.IsNullOrWhiteSpace(_model.BankContactId))
            {
                <div>
                    <label>@Localizer["LabelCreateNewBankContact"]</label><br />
                    <InputText @bind-Value="_newBankContactName" />
                </div>
            }
        </div>
        @if (!string.IsNullOrEmpty(_error))
        {
            <div style="color:#e66;margin-top:1rem;">@_error</div>
        }
    </EditForm>

    @if (!IsNew && _chartsLoaded)
    {
        <div style="margin-top:1.5rem;">
            <div style="display:flex;gap:.4rem;align-items:center;margin-bottom:.5rem;">
                <label>@Localizer["LabelInterval"]:</label>
                <select @bind="_period" @bind:after="async () => await LoadAggregatesAsync()">
                    <option value="Month">@Localizer["Interval_Month"]</option>
                    <option value="Quarter">@Localizer["Interval_Quarter"]</option>
                    <option value="Year">@Localizer["Interval_Year"]</option>
                </select>
            </div>
            <div class="chart" style="--bar-color:#2d6cdf;--bar-neg:#c94;--axis:#555;border:1px solid var(--border);padding:.5rem 1rem;border-radius:.35rem;">
                @if (_points.Count == 0)
                {
                    <div style="opacity:.7;font-size:.85rem;">@Localizer["NoData"]</div>
                }
                else
                {
                    var maxAbs = _points.Select(p => Math.Abs(p.Amount)).DefaultIfEmpty(0m).Max();
                    var halfHeight = 90m; // px
                    var scale = maxAbs == 0 ? 0 : halfHeight / maxAbs;
                    <div style="display:flex;flex-direction:column;gap:0;height:180px;border-top:1px solid var(--axis);border-bottom:1px solid var(--axis);">
                        <div style="display:flex;align-items:flex-end;gap:.35rem;height:50%;">
                            @foreach (var p in _points)
                            {
                                var posH = p.Amount > 0 ? (int)Math.Round((double)(p.Amount * scale)) : 0;
                                <div title="@($"{p.PeriodStart:yyyy-MM-dd} ({p.Amount})")" style="width:16px;background:var(--bar-color);height:@(posH)px;"></div>
                            }
                        </div>
                        <div style="height:1px;background:var(--axis);opacity:.6;"></div>
                        <div style="display:flex;align-items:flex-start;gap:.35rem;height:50%;">
                            @foreach (var p in _points)
                            {
                                var negH = p.Amount < 0 ? (int)Math.Round((double)(-p.Amount * scale)) : 0;
                                <div title="@($"{p.PeriodStart:yyyy-MM-dd} ({p.Amount})")" style="width:16px;background:var(--bar-neg);height:@(negH)px;"></div>
                            }
                        </div>
                    </div>
                    <div style="display:flex;gap:.35rem;font-size:.65rem;color:#aaa;margin-top:.25rem;">
                        @foreach (var p in _points)
                        {
                            <div style="width:16px;text-align:center;">@FormatLabel(p.PeriodStart)</div>
                        }
                    </div>
                }
            </div>
        </div>
    }
}

@code {
    [Parameter] public Guid? Id { get; set; }
    private bool IsNew => !Id.HasValue;

    // Ribbon state
    private enum TabId { Account }
    private List<Ribbon<TabId>.RibbonTab<TabId>> _tabs = new();
    private TabId _activeTab = TabId.Account;
    private Task OnActiveTabChanged(TabId id){ _activeTab = id; return Task.CompletedTask; }

    private void BuildRibbon()
    {
        if (!_loaded || !CurrentUser.IsAuthenticated)
        {
            _tabs = new(); return;
        }
        var nav = new Ribbon<TabId>.RibbonGroup
        {
            Title = Localizer["Ribbon_Group_Navigation"],
            Items = new()
            {
                new Ribbon<TabId>.RibbonItem
                {
                    Label = Localizer["Ribbon_Back"],
                    IconSvg = "<svg><use href='/icons/sprite.svg#back'/></svg>",
                    Size = Ribbon<TabId>.RibbonItemSize.Large,
                    Callback = () => { Back(); return Task.CompletedTask; }
                }
            }
        };
        var editItems = new List<Ribbon<TabId>.RibbonItem>
        {
            new Ribbon<TabId>.RibbonItem
            {
                Label = Localizer["Ribbon_Save"],
                IconSvg = "<svg><use href='/icons/sprite.svg#save'/></svg>",
                Size = Ribbon<TabId>.RibbonItemSize.Large,
                Disabled = _busy || string.IsNullOrWhiteSpace(_model.Name) || _model.Name.Trim().Length < 2,
                Callback = () => { _ = SaveAsync(); return Task.CompletedTask; }
            }
        };
        if (!IsNew)
        {
            editItems.Add(new Ribbon<TabId>.RibbonItem
            {
                Label = Localizer["Ribbon_Delete"],
                IconSvg = "<svg><use href='/icons/sprite.svg#delete'/></svg>",
                Disabled = _busy,
                Callback = () => { _ = DeleteAsync(); return Task.CompletedTask; }
            });
        }
        var edit = new Ribbon<TabId>.RibbonGroup { Title = Localizer["Ribbon_Group_Edit"], Items = editItems };

        Ribbon<TabId>.RibbonGroup? related = null;
        if (!IsNew)
        {
            var relatedItems = new List<Ribbon<TabId>.RibbonItem>
            {
                new Ribbon<TabId>.RibbonItem
                {
                    Label = Localizer["Ribbon_BankContact"],
                    IconSvg = "<svg><use href='/icons/sprite.svg#bank'/></svg>",
                    Disabled = _busy || string.IsNullOrWhiteSpace(_model.BankContactId),
                    Callback = () => { OpenBankContact(); return Task.CompletedTask; }
                },
                new Ribbon<TabId>.RibbonItem
                {
                    Label = Localizer["Ribbon_Postings"],
                    IconSvg = "<svg><use href='/icons/sprite.svg#postings'/></svg>",
                    Disabled = _busy,
                    Callback = () => { OpenPostings(); return Task.CompletedTask; }
                }
            };
            related = new Ribbon<TabId>.RibbonGroup { Title = Localizer["Ribbon_Group_Related"], Items = relatedItems };
        }

        var groups = new List<Ribbon<TabId>.RibbonGroup>{ nav, edit };
        if (related != null) groups.Add(related);

        _tabs = new()
        {
            new Ribbon<TabId>.RibbonTab<TabId>
            {
                Id = TabId.Account,
                Title = Localizer["Ribbon_Tab_Account"],
                Groups = groups
            }
        };
        StateHasChanged();
    }

    private AccountEditModel _model = new();
    private List<BankContactVm> _bankContacts = new();
    private string? _newBankContactName;
    private bool _loaded;
    private bool _busy;
    private string? _error;

    // Charts
    private string _period = "Month";
    private bool _chartsLoaded;
    private List<AggregatePointDto> _points = new();

    protected override async Task OnParametersSetAsync()
    {
        if (CurrentUser.IsAuthenticated)
        {
            await LoadBankContactsAsync();
            if (!IsNew)
            {
                var resp = await Http.GetAsync($"/api/accounts/{Id}");
                if (resp.IsSuccessStatusCode)
                {
                    var dto = await resp.Content.ReadFromJsonAsync<AccountDto>();
                    if (dto != null)
                    {
                        _model.Name = dto.Name;
                        _model.Type = dto.Type.ToString();
                        _model.Iban = dto.Iban;
                        _model.BankContactId = dto.BankContactId.ToString();
                        _chartsLoaded = true;
                        await LoadAggregatesAsync();
                    }
                }
                else if (resp.StatusCode == System.Net.HttpStatusCode.NotFound)
                {
                    _error = Localizer["ErrorNotFound"];
                }
                else
                {
                    _error = Localizer["ErrorLoadFailed"];
                }
            }
        }
        _loaded = true;
        BuildRibbon();
    }

    private async Task LoadAggregatesAsync()
    {
        if (Id == null) return;
        var url = $"/api/accounts/{Id}/aggregates?period={_period}";
        var resp = await Http.GetAsync(url);
        if (resp.IsSuccessStatusCode)
        {
            _points = await resp.Content.ReadFromJsonAsync<List<AggregatePointDto>>() ?? new();
            StateHasChanged();
        }
    }

    private static string FormatLabel(DateTime d) => d.ToString("yy-M");

    private async Task LoadBankContactsAsync()
    {
        var resp = await Http.GetAsync("/api/contacts?type=Bank&all=true");
        if (resp.IsSuccessStatusCode)
        {
            var list = await resp.Content.ReadFromJsonAsync<List<ContactDto>>() ?? new();
            _bankContacts = list.Select(c => new BankContactVm { Id = c.Id, Name = c.Name }).OrderBy(c => c.Name).ToList();
        }
    }

    private void OnBankContactAfterChanged()
    {
        if (!string.IsNullOrWhiteSpace(_model.BankContactId)) { _newBankContactName = null; }
        BuildRibbon();
    }

    private async Task SaveAsync()
    {
        _busy = true; _error = null; BuildRibbon();
        try
        {
            Guid? bankContactId = Guid.TryParse(_model.BankContactId, out var parsed) ? parsed : null;
            if (IsNew)
            {
                var payload = new { Name = _model.Name, Type = Enum.Parse<AccountType>(_model.Type), Iban = _model.Iban, BankContactId = bankContactId, NewBankContactName = _newBankContactName };
                var resp = await Http.PostAsJsonAsync("/api/accounts", payload);
                if (resp.IsSuccessStatusCode)
                {
                    var dto = await resp.Content.ReadFromJsonAsync<AccountDto>();
                    if (dto != null) Nav.NavigateTo($"/accounts/{dto.Id}", forceLoad: true);
                }
                else { _error = await resp.Content.ReadAsStringAsync(); }
            }
            else
            {
                var payload = new { Name = _model.Name, Iban = _model.Iban, BankContactId = bankContactId, NewBankContactName = _newBankContactName };
                var resp = await Http.PutAsJsonAsync($"/api/accounts/{Id}", payload);
                if (!resp.IsSuccessStatusCode) { _error = await resp.Content.ReadAsStringAsync(); }
            }
        }
        catch (Exception ex) { _error = ex.Message; }
        _busy = false; BuildRibbon();
    }

    private async Task DeleteAsync()
    {
        if (Id == null) { return; }
        _busy = true; _error = null; BuildRibbon();
        try
        {
            var resp = await Http.DeleteAsync($"/api/accounts/{Id}");
            if (resp.IsSuccessStatusCode) { Back(); }
            else { _error = await resp.Content.ReadAsStringAsync(); }
        }
        catch (Exception ex) { _error = ex.Message; }
        _busy = false; BuildRibbon();
    }

    private void Back() => Nav.NavigateTo("/accounts", forceLoad: true);
    private void OpenBankContact(){ if (!string.IsNullOrWhiteSpace(_model.BankContactId)) { Nav.NavigateTo($"/contacts/{_model.BankContactId}"); } }
    private void OpenPostings(){ if (Id != null) { Nav.NavigateTo($"/postings/account/{Id}"); } }

    private sealed class AccountEditModel
    {
        [Required, MinLength(2)] public string Name { get; set; } = string.Empty;
        [Required] public string Type { get; set; } = "Giro";
        public string? Iban { get; set; }
        public string? BankContactId { get; set; }
    }
    private sealed class BankContactVm { public Guid Id { get; set; } public string Name { get; set; } = string.Empty; }

    private sealed record AccountDto(Guid Id, string Name, AccountType Type, string? Iban, decimal CurrentBalance, Guid BankContactId);
    private sealed record ContactDto(Guid Id, string Name, ContactType Type, Guid? CategoryId);
    private sealed record AggregatePointDto(DateTime PeriodStart, decimal Amount);
    private enum ContactType { Self, Bank, Person, Organization, Other }
    private enum AccountType { Giro, Savings }
}
