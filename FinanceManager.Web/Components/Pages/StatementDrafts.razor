@page "/statement-drafts"
@rendermode InteractiveServer
@inject HttpClient Http
@inject NavigationManager Nav
@inject IJSRuntime JS
@using FinanceManager.Application.Statements
@inject Microsoft.Extensions.Localization.IStringLocalizer<FinanceManager.Web.Components.Pages.StatementDrafts> Localizer

<h3>@Localizer["Nav_StatementDrafts"]</h3>

<div class="action-bar" style="margin-bottom:1rem;display:flex;gap:.4rem;align-items:center;flex-wrap:wrap;">
    <button @onclick="ClassifyAsync" class="icon-btn" title="Reclassify" aria-label="Reclassify">
        <svg><use href="/icons/sprite.svg#refresh" /></svg>
    </button>    
</div>

@if (_isClassifying)
{
    <div class="alert alert-success" style="margin-top:1rem;">
        <span style="margin-left:.4rem;">@_classifyMessage (@_processed/@_total)</span>
    </div>
}

<div class="action-bar" style="margin-bottom:1rem;display:flex;gap:.4rem;align-items:center;">
    <div class="icon-btn" title="@Localizer["Nav_StatementDrafts_Import"]" aria-label="@Localizer["Nav_StatementDrafts_Import"]" style="padding:.3rem .6rem;">
        <InputFile OnChange="OnFileChanged" />
    </div>
</div>

@if(_drafts == null)
{
    <p>@Localizer["Nav_StatementDrafts_Loading"]</p>
}
else if(_drafts.Count == 0)
{
    <p>@Localizer["Nav_StatementDrafts_NoDrafts"]</p>
}
else
{
    <div class="table-responsive">
        <table class="fm-table">
            <thead>
                <tr>
                    <th style="width:2rem;"></th>
                    <th>@Localizer["Nav_StatementDrafts_File"]</th>
                    <th>@Localizer["Nav_StatementDrafts_Description"]</th>
                    <th>@Localizer["Nav_StatementDrafts_Status"]</th>
                    <th>@Localizer["Nav_StatementDrafts_Entries"]</th>
                </tr>
            </thead>
            <tbody>
                @foreach(var d in _drafts)
                {
                    <tr style="cursor:pointer;" @onclick="() => OpenDetail(d.DraftId)">
                        <td></td>
                        <td>@d.OriginalFileName</td>
                        <td>@d.Description</td>
                        <td>@d.Status</td>
                        <td>@d.Entries.Count(e => e.Status != Domain.Statements.StatementDraftEntryStatus.AlreadyBooked)</td>
                    </tr>
                }
            </tbody>
        </table>
        @if(_canLoadMore)
        {
            <div class="infinite-sentinel" @ref="_sentinel" aria-hidden="true"></div>
        }
    </div>
}

@code {
    private List<StatementDraftDto>? _drafts;
    private int _skip;
    private const int PageSize = 3;
    private bool _canLoadMore = true;
    private bool _loading;
    private bool _cancelLoading;
    private ElementReference _sentinel;
    private DotNetObjectReference<StatementDrafts>? _selfRef;
    private bool _observerAttached;

    private bool _isClassifying;
    private int _processed;
    private int _total;
    private string? _classifyMessage;
    private CancellationTokenSource? _classifyCts;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_observerAttached || _drafts == null || !_canLoadMore)
        {
            return;
        }
        if (_sentinel.Context is null)
        {
            return;
        }
        try
        {
            _selfRef ??= DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("fmInfinite.observe", _sentinel, _selfRef, null);
            await JS.InvokeVoidAsync("fmInfinite.refresh");
            _observerAttached = true;
        }
        catch (JSException)
        {
            await Task.Yield();
            StateHasChanged();
        }
    }

    [JSInvokable]
    public async Task LoadMoreFromJs()
    {
        await LoadAsync();
        if (_canLoadMore)
        {
            await JS.InvokeVoidAsync("fmInfinite.refresh");
        }
        else
        {
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await Reload();
        await RefreshClassifyStatusAsync();
    }
    private void Clear()
    {
        _drafts = new List<StatementDraftDto>();
        _skip = 0;
        _canLoadMore = true;
        _observerAttached = false;
    }
    private async Task Reload()
    {
        Clear();
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        if(_loading || !_canLoadMore) { return; }
        _loading = true;
        try
        {
            var url = $"api/statement-drafts?skip={_skip}&take={PageSize}";
            var batch = await Http.GetFromJsonAsync<List<StatementDraftDto>>(url) ?? new();
            if (_cancelLoading)
            {
                _cancelLoading = false;
                return;
            }
            if(batch.Count < PageSize)
            {
                _canLoadMore = false;
            }
            _drafts!.AddRange(batch);
            _skip += batch.Count;
            await InvokeAsync(StateHasChanged);
        }
        finally
        {
            _loading = false;
        }
    }

    private void OpenDetail(Guid id) => Nav.NavigateTo($"/statement-drafts/{id}");

    private async Task OnFileChanged(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null) { return; }
        using var content = new MultipartFormDataContent();
        await using var stream = file.OpenReadStream(25_000_000);
        content.Add(new StreamContent(stream), "file", file.Name);
        var resp = await Http.PostAsync("/api/statement-drafts/upload", content);
        if (resp.IsSuccessStatusCode)
        {
            var draft = await resp.Content.ReadFromJsonAsync<StatementDraftDto>();
            if (draft != null)
            {
                Nav.NavigateTo($"/statement-drafts/{draft.DraftId}");
                return;
            }
        }
        // fallback reload list (reset Infinity)
        _drafts = new List<StatementDraftDto>();
        _skip = 0; _canLoadMore = true; _observerAttached = false;
        await LoadAsync();
        StateHasChanged();
    }

    private async Task ClassifyAsync()
    {
        _classifyCts ??= new CancellationTokenSource();
        try
        {
            var resp = await Http.PostAsync("api/statement-drafts/classify", null, _classifyCts.Token);
            if (resp.StatusCode == System.Net.HttpStatusCode.Accepted)
            {
                _isClassifying = true;
                var payload = await resp.Content.ReadFromJsonAsync<TempStatus>(_classifyCts.Token);
                UpdateClassifyUi(payload);
                _ = PollUntilFinishedAsync();
            }
            else if (resp.IsSuccessStatusCode)
            {
                _isClassifying = false;
                _classifyMessage = null;
                await Reload();
            }
            else
            {
                var msg = await resp.Content.ReadAsStringAsync(_classifyCts.Token);
                _classifyMessage = msg;
            }
        }
        catch (OperationCanceledException)
        {
        }
    }

    private async Task PollUntilFinishedAsync()
    {
        while (_isClassifying)
        {
            await Task.Delay(1000);
            await RefreshClassifyStatusAsync();
        }
    }

    private async Task RefreshClassifyStatusAsync()
    {
        var s = await Http.GetFromJsonAsync<TempStatus>("api/statement-drafts/classify/status");
        if (s != null)
        {
            UpdateClassifyUi(s);
            if (!s.running)
            {
                await Reload();
            }
        }
    }

    private void UpdateClassifyUi(TempStatus s)
    {
        _isClassifying = s.running;
        _processed = s.processed;
        _total = s.total;
        _classifyMessage = s.message ?? (_isClassifying ? "Working..." : null);
        StateHasChanged();
    }

    private sealed class TempStatus
    {
        public bool running { get; set; }
        public int processed { get; set; }
        public int total { get; set; }
        public string? message { get; set; }
    }
}
