@page "/statement-drafts"
@rendermode InteractiveServer
@inject HttpClient Http
@inject NavigationManager Nav
@inject IJSRuntime JS
@inject IServiceProvider Services
@using FinanceManager.Application.Statements
@using FinanceManager.Shared.Dtos
@using FinanceManager.Web.Components.Shared
@using FinanceManager.Web.ViewModels
@inject Microsoft.Extensions.Localization.IStringLocalizer<FinanceManager.Web.Components.Pages.StatementDrafts> Localizer
<PageTitle>@Localizer["PageTitle"]</PageTitle>

<Ribbon TTabEnum="StatementDrafts.TabId" Tabs="_tabs" ActiveTab="_activeTab" ActiveTabChanged="OnActiveTabChanged" />

<h3>@Localizer["Nav_StatementDrafts"]</h3>

<!-- Status panel only for classification or booking tasks -->
<BackgroundTaskStatusPanel TaskListEndpoint="/api/background-tasks/active" PollInterval="2000" AllowedTypes="new[]{ BackgroundTaskType.ClassifyAllDrafts, BackgroundTaskType.BookAllDrafts }" />

@if (_showDeleteAllDialog)
{
    <div style="position:fixed;inset:0;background:rgba(0,0,0,.6);display:flex;align-items:center;justify-content:center;z-index:1000;" role="dialog" aria-modal="true">
        <div style="background:#111;color:#eee;border:1px solid var(--border);padding:1rem;border-radius:.4rem;min-width:22rem;max-width:90vw;box-shadow:0 8px 24px rgba(0,0,0,.5);">
            <h4 style="margin-top:0;color:#fff;">@Localizer["Dialog_DeleteAll_Title"]</h4>
            <p style="font-size:.8rem;line-height:1.3;">@Localizer["Dialog_DeleteAll_Message"]</p>
            <div style="display:flex;gap:.5rem;justify-content:flex-end;margin-top:1rem;">
                <button class="btn btn-secondary" @onclick="CancelDeleteAllDialog" style="background:#333;color:#fff;border:1px solid var(--border);padding:.35rem .7rem;border-radius:.25rem;">@Localizer["Dialog_Cancel"]</button>
                <button class="btn btn-primary" @onclick="ConfirmDeleteAllAsync" style="background:#c0392b;color:#fff;border:0;padding:.35rem .7rem;border-radius:.25rem;">@Localizer["Dialog_DeleteAll_Confirm"]</button>
            </div>
        </div>
    </div>
}

@if ((_vm?.BookingIssues?.Count ?? 0) > 0 && !(_vm?.IsBooking ?? false))
{
    var errorCount = _vm!.BookingIssues.Count(i => i.code != null && i.code.StartsWith("SECURITY_") || i.code == "NO_ACCOUNT" || i.code == "ENTRY_NO_CONTACT" || i.code == "INTERMEDIARY_NO_SPLIT" || i.code == "SPLIT_AMOUNT_MISMATCH");
    var warnCount = _vm!.BookingIssues.Count(i => i.code != null && i.code.Contains("SAVINGSPLAN_", StringComparison.OrdinalIgnoreCase) && !i.code.EndsWith("_ARCHIVE_MISMATCH", StringComparison.OrdinalIgnoreCase));
    <div class="alert" style="margin-top:1rem;border:1px solid #444;background:#181818;padding:.6rem .8rem;">
        <div style="display:flex;gap:1rem;align-items:center;flex-wrap:wrap;font-size:.8rem;">
            <strong>@Localizer["Booking_ResultTitle"]</strong>
            <span style="color:#e66;">@Localizer["Errors"]: @_vm!.BookingErrors</span>
            <span style="color:#cc6;">@Localizer["Warnings"]: @_vm!.BookingWarnings</span>
        </div>
        <ul style="margin:.5rem 0 0 1rem;font-size:.7rem;">
            @foreach (var issue in _vm!.BookingIssues)
            {
                var c = issue.code != null && (issue.code.Contains("ERROR", StringComparison.OrdinalIgnoreCase) || issue.code is "NO_ACCOUNT" or "ENTRY_NO_CONTACT" or "INTERMEDIARY_NO_SPLIT" or "SPLIT_AMOUNT_MISMATCH") ? "#e66" : "#cc6";
                <li style="margin:.2rem 0;color:@c;">@Localizer["IssueForDraft"] @issue.draftId: @issue.message</li>
            }
        </ul>
    </div>
}

@if (_showBookDialog)
{
    <div style="position:fixed;inset:0;background:rgba(0,0,0,.6);display:flex;align-items:center;justify-content:center;z-index=1000;" role="dialog" aria-modal="true">
        <div style="background:#111;color:#eee;border:1px solid var(--border);padding:1rem;border-radius:.4rem;min-width:22rem;max-width:90vw;box-shadow:0 8px 24px rgba(0,0,0,.5);">
            <h4 style="margin-top:0;color:#fff;">@Localizer["Dialog_MassBook_Title"]</h4>
            <div style="display:flex;flex-direction:column;gap:.5rem;align-items:flex-start;text-align:left;">
                <div style="display:flex;align-items:center;gap:.6rem;">
                    <input id="opt-ignore" type="checkbox" @bind="_bookIgnoreWarnings" style="margin:0;width:unset;" />
                    <label for="opt-ignore" style="cursor:pointer;">@Localizer["Dialog_IgnoreWarnings"]</label>
                </div>
                <div style="display:flex;align-items:center;gap:.6rem;">
                    <input id="opt-abort" type="checkbox" @bind="_bookAbortOnFirst" style="margin:0;width:unset;" />
                    <label for="opt-abort" style="cursor:pointer;">@Localizer["Dialog_AbortOnFirst"]</label>
                </div>
                <div style="display:flex;align-items:center;gap:.6rem;">
                    <input id="opt-individual" type="checkbox" @bind="_bookEntriesIndividually" style="margin:0;width:unset;" />
                    <label for="opt-individual" style="cursor:pointer;">@Localizer["Dialog_BookIndividually"]</label>
                </div>
            </div>
            <div style="display:flex;gap:.5rem;justify-content:flex-end;margin-top:1rem;">
                <button class="btn btn-secondary" @onclick="CancelBookAllDialog" style="background:#333;color:#fff;border:1px solid var(--border);padding:.35rem .7rem;border-radius:.25rem;">@Localizer["Dialog_Cancel"]</button>
                <button class="btn btn-primary" @onclick="ConfirmBookAllAsync" style="background:#2d6cdf;color:#fff;border:0;padding:.35rem .7rem;border-radius:.25rem;">@Localizer["Dialog_Start"]</button>
            </div>
        </div>
    </div>
}

@if(_vm is null)
{
    <p>@Localizer["Loading"]</p>
}
else if(_vm.Items.Count == 0)
{
    <p>@Localizer["Nav_StatementDrafts_NoDrafts"]</p>
}
else
{
    <div class="table-responsive">
        <table class="fm-table">
            <thead>
                <tr>
                    <th style="width:2rem;"></th>
                    <th>@Localizer["Nav_StatementDrafts_File"]</th>
                    <th>@Localizer["Nav_StatementDrafts_Description"]</th>
                    <th>@Localizer["Nav_StatementDrafts_Status"]</th>
                    <th>@Localizer["Nav_StatementDrafts_Entries"]</th>
                </tr>
            </thead>
            <tbody>
                @foreach(var d in _vm!.Items)
                {
                    <tr style="cursor:pointer;" @onclick="() => OpenDetail(d.Id)">
                        <td></td>
                        <td>@d.FileName</td>
                        <td>@d.Description</td>
                        <td>@d.Status</td>
                        <td>@d.PendingEntries</td>
                    </tr>
                }
            </tbody>
        </table>
        @if(_vm!.CanLoadMore)
        {
            <div class="infinite-sentinel" @ref="_sentinel" aria-hidden="true">@Localizer["Nav_StatementDrafts_Loading"]</div>
        }
    </div>
}

@code {
    // Ribbon state
    private enum TabId { Statements }
    private List<Ribbon<TabId>.RibbonTab<TabId>> _tabs = new();
    private TabId _activeTab = TabId.Statements;

    private void BuildRibbon()
    {
        var groupsDto = _vm?.GetRibbon(Localizer) ?? new List<UiRibbonGroup>();
        var groups = new List<Ribbon<TabId>.RibbonGroup>();
        foreach (var g in groupsDto)
        {
            var items = new List<Ribbon<TabId>.RibbonItem>();
            foreach (var it in g.Items)
            {
                var size = it.Size == UiRibbonItemSize.Large ? Ribbon<TabId>.RibbonItemSize.Large : Ribbon<TabId>.RibbonItemSize.Small;
                items.Add(new Ribbon<TabId>.RibbonItem
                {
                    Id = it.Action == "Import" ? "drafts-import-btn" : null,
                    Label = it.Label,
                    IconSvg = it.IconSvg,
                    Size = size,
                    Disabled = it.Disabled,
                    Callback = () => HandleRibbonActionAsync(it.Action) // ensure async user-gesture chain
                });
            }
            groups.Add(new Ribbon<TabId>.RibbonGroup { Title = g.Title, Items = items });
        }
        _tabs = new()
        {
            new Ribbon<TabId>.RibbonTab<TabId> { Id = TabId.Statements, Title = Localizer["Ribbon_Tab_Statements"], Groups = groups }
        };
    }

    private Task OnActiveTabChanged(TabId tab)
    {
        _activeTab = tab; return Task.CompletedTask;
    }

    private ElementReference _hiddenFileInput;

    private async Task TriggerFileInputAsync()
    {
        // Overlay the file input over the Import ribbon button and click (iOS/Edge safe)
        var js = @"(function(){
            var btn = document.getElementById('drafts-import-btn');
            var inp = document.getElementById('draft-upload-input');
            if(!btn || !inp) return false;
            var r = btn.getBoundingClientRect();
            var scrollX = window.pageXOffset || document.documentElement.scrollLeft;
            var scrollY = window.pageYOffset || document.documentElement.scrollTop;
            inp.style.position='absolute';
            inp.style.left = (r.left + scrollX) + 'px';
            inp.style.top = (r.top + scrollY) + 'px';
            inp.style.width = r.width + 'px';
            inp.style.height = r.height + 'px';
            inp.style.opacity = '0.01';
            inp.style.pointerEvents = 'auto';
            try { inp.click(); } catch(e) {}
            return true;
        })();";
        try
        {
            var ok = await JS.InvokeAsync<bool>("eval", js);
            if (!ok)
            {
                await JS.InvokeVoidAsync("eval", "document.getElementById('draft-upload-input')?.click();");
            }
        }
        catch { }
    }

    private async Task OnHiddenFileChanged(InputFileChangeEventArgs e) => await OnFileChanged(e);

    private StatementDraftsViewModel? _vm;
    private ElementReference _sentinel;
    private DotNetObjectReference<StatementDrafts>? _selfRef;
    private bool _observerAttached;

    private CancellationTokenSource? _classifyCts;

    // Booking UI-State
    private bool _showBookDialog;
    private bool _bookIgnoreWarnings;
    private bool _bookAbortOnFirst;
    private bool _bookEntriesIndividually;
    private CancellationTokenSource? _bookingCts;

    private bool _showDeleteAllDialog;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            BuildRibbon();
            // kick off background loads after initial paint
            _ = Task.Run(async () =>
            {
                try
                {
                    await _vm!.InitializeAsync();
                    await RefreshClassifyStatusAsync(false);
                    await RefreshBookStatusAsync(false);
                    await InvokeAsync(BuildRibbon);
                }
                catch { }
            });
        }
        if (_observerAttached || _vm is null || !_vm.CanLoadMore)
        {
            return;
        }
        if (_sentinel.Context is null)
        {
            return;
        }
        try
        {
            _selfRef ??= DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("fmInfinite.observe", _sentinel, _selfRef, null);
            await JS.InvokeVoidAsync("fmInfinite.refresh");
            _observerAttached = true;
        }
        catch (JSException)
        {
            await Task.Yield();
            StateHasChanged();
        }
    }

    protected override Task OnInitializedAsync()
    {
        _vm = ActivatorUtilities.CreateInstance<StatementDraftsViewModel>(Services);
        _vm.StateChanged += (_, __) => { BuildRibbon(); _ = InvokeAsync(StateHasChanged); };
        return Task.CompletedTask;
    }

    private void OpenDeleteAllDialog() { _showDeleteAllDialog = true; StateHasChanged(); }
    private void CancelDeleteAllDialog() { _showDeleteAllDialog = false; StateHasChanged(); }
    private async Task ConfirmDeleteAllAsync()
    {
        _showDeleteAllDialog = false;
        try
        {
            if (_vm != null)
            {
                var ok = await _vm.DeleteAllAsync();
                if (ok)
                {
                    _observerAttached = false;
                    await LoadAsync();
                }
            }
        }
        catch { }
        StateHasChanged();
    }

    private void Clear() { if (_vm != null) { _vm.Items.Clear(); _observerAttached = false; } }
    private async Task Reload() { if (_vm != null) { _vm.Items.Clear(); _observerAttached = false; await _vm.LoadMoreAsync(); } }
    private async Task LoadAsync() { if (_vm != null) { await _vm.LoadMoreAsync(); await InvokeAsync(StateHasChanged); } }

    private void OpenDetail(Guid id) => Nav.NavigateTo($"/statement-drafts/{id}");

    private async Task OnFileChanged(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null)
        {
            await JS.InvokeVoidAsync("eval", "(function(){var inp=document.getElementById('draft-upload-input'); if(inp){inp.style.left='-9999px';inp.style.opacity='0';inp.style.pointerEvents='none';}})()");
            return;
        }
        await using var stream = file.OpenReadStream(25_000_000);
        var firstId = await _vm!.UploadAsync(stream, file.Name);
        // Hide input again
        await JS.InvokeVoidAsync("eval", "(function(){var inp=document.getElementById('draft-upload-input'); if(inp){inp.style.left='-9999px';inp.style.opacity='0';inp.style.pointerEvents='none';}})()");
        if (firstId.HasValue)
        {
            Nav.NavigateTo($"/statement-drafts/{firstId.Value}");
            return;
        }
        _vm?.Reset();
        _observerAttached = false;
        await LoadAsync();
        StateHasChanged();
    }

    private async Task ClassifyAsync()
    {
        _classifyCts ??= new CancellationTokenSource();
        try
        {
            await _vm!.StartClassifyAsync();
        }
        catch (OperationCanceledException) { }
    }

    private async Task RefreshClassifyStatusAsync(bool reloadOnFinish = true)
    {
        await _vm!.RefreshClassifyStatusAsync(reloadOnFinish);
    }

    // Booking
    private void OpenBookAllDialog() { _bookIgnoreWarnings = false; _bookAbortOnFirst = false; _bookEntriesIndividually = false; _showBookDialog = true; StateHasChanged(); }
    private void CancelBookAllDialog() { _showBookDialog = false; }

    private async Task ConfirmBookAllAsync()
    {
        _showBookDialog = false;
        await _vm!.StartBookAllAsync(_bookIgnoreWarnings, _bookAbortOnFirst, _bookEntriesIndividually);
    }

    private async Task RefreshBookStatusAsync(bool reloadOnFinish = true)
    {
        await _vm!.RefreshBookStatusAsync(reloadOnFinish);
    }

    private async Task CancelMassBooking() { await _vm!.CancelBookingAsync(); }

    [JSInvokable]
    public async Task LoadMoreFromJs()
    {
        await LoadAsync();
        if (_vm!.CanLoadMore)
        {
            await JS.InvokeVoidAsync("fmInfinite.refresh");
        }
        else
        {
            StateHasChanged();
        }
    }

    // DTO + helper records
    private sealed class TempStatus { public bool running { get; set; } public int processed { get; set; } public int total { get; set; } public string? message { get; set; } }
    private sealed class BookIssue { public Guid draftId { get; set; } public Guid? entryId { get; set; } public string code { get; set; } = string.Empty; public string message { get; set; } = string.Empty; }
    private sealed class BookStatus { public bool running { get; set; } public int processed { get; set; } public int failed { get; set; } public int total { get; set; } public int warnings { get; set; } public int errors { get; set; } public string? message { get; set; } public List<BookIssue>? issues { get; set; } }
    private sealed class StatementDraftDto { public Guid DraftId { get; set; } public string OriginalFileName { get; set; } = string.Empty; public string? Description { get; set; } public FinanceManager.Domain.StatementDraftStatus Status { get; set; } public List<StatementDraftEntryDto> Entries { get; set; } = new(); }
    private sealed class StatementDraftEntryDto { public Guid Id { get; set; } public FinanceManager.Domain.Statements.StatementDraftEntryStatus Status { get; set; } }
    
     private sealed record UploadResultDto(StatementDraftDto? FirstDraft, object? SplitInfo);
 }

<!-- Single always-present file input for iOS Safari: off-screen but not display:none/visibility:hidden -->
<InputFile id="draft-upload-input" OnChange="OnHiddenFileChanged" style="position:fixed; left:-9999px; width:1px; height:1px; opacity:0;" />

@code {
    private Task HandleRibbonActionAsync(string action)
    {
        switch (action)
        {
            case "DeleteAll":
                OpenDeleteAllDialog();
                return Task.CompletedTask;
            case "Reclassify":
                return ClassifyAsync();
            case "MassBooking":
                OpenBookAllDialog();
                return Task.CompletedTask;
            case "Import":
                return TriggerFileInputAsync();
        }
        return Task.CompletedTask;
    }
}
