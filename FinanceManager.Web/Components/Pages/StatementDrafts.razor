@page "/statement-drafts"
@rendermode InteractiveServer
@inject HttpClient Http
@inject NavigationManager Nav
@using FinanceManager.Application.Statements
@inject Microsoft.Extensions.Localization.IStringLocalizer<FinanceManager.Web.Components.Pages.StatementDrafts> Localizer

<h3>@Localizer["Nav_StatementDrafts"]</h3>

<div class="action-bar" style="margin-bottom:1rem;display:flex;gap:.4rem;align-items:center;">
    <div class="icon-btn" title="@Localizer["Nav_StatementDrafts_Import"]" aria-label="@Localizer["Nav_StatementDrafts_Import"]" style="padding:.3rem .6rem;">
        <InputFile OnChange="OnFileChanged" />
    </div>
</div>

@if(_drafts == null)
{
    <p>@Localizer["Nav_StatementDrafts_Loading"]</p>
}
else if(_drafts.Count == 0)
{
    <p>@Localizer["Nav_StatementDrafts_NoDrafts"]</p>
}
else
{
    <div class="table-responsive">
        <table class="fm-table">
            <thead>
                <tr>
                    <th style="width:2rem;"></th>
                    <th>@Localizer["Nav_StatementDrafts_File"]</th>
                    <th>@Localizer["Nav_StatementDrafts_Status"]</th>
                    <th>@Localizer["Nav_StatementDrafts_Entries"]</th>
                </tr>
            </thead>
            <tbody>
                @foreach(var d in _drafts)
                {
                    <tr style="cursor:pointer;" @onclick="() => OpenDetail(d.DraftId)">
                        <td>@d.OriginalFileName</td>
                        <td>@d.Status</td>
                        <td>@d.Entries.Count</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<StatementDraftDto>? _drafts;

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        _drafts = await Http.GetFromJsonAsync<List<StatementDraftDto>>("api/statement-drafts");
    }

    private void OpenDetail(Guid id) => Nav.NavigateTo($"/statement-drafts/{id}");

    private async Task OnFileChanged(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null) { return; }
        using var content = new MultipartFormDataContent();
        await using var stream = file.OpenReadStream(10_000_000);
        content.Add(new StreamContent(stream), "file", file.Name);
        var resp = await Http.PostAsync("/api/statement-drafts/upload", content);
        if (resp.IsSuccessStatusCode)
        {
            var draft = await resp.Content.ReadFromJsonAsync<StatementDraftDto>();
            if (draft != null)
            {
                Nav.NavigateTo($"/statement-drafts/{draft.DraftId}");
                return;
            }
        }
        // fallback reload list
        await LoadAsync();
        StateHasChanged();
    }
}
