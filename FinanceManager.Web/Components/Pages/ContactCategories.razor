@page "/contact-categories"
@using System.ComponentModel.DataAnnotations
@rendermode InteractiveServer
@inject IHttpClientFactory ClientFactory
@inject NavigationManager Navigation
@inject FinanceManager.Application.ICurrentUserService CurrentUser
@inject Microsoft.Extensions.Localization.IStringLocalizer<FinanceManager.Web.Components.Pages.ContactCategories> Localizer
@using FinanceManager.Web.Components.Shared
@using FinanceManager.Web.ViewModels
@inject IServiceProvider Services
<PageTitle>@Localizer["PageTitle"]</PageTitle>

<Ribbon TTabEnum="ContactCategories.TabId" Tabs="_tabs" ActiveTab="_activeTab" ActiveTabChanged="OnActiveTabChanged" />

<h1>@Localizer["Title"]</h1>

@if (!(_vm?.Loaded ?? false))
{
    <p>@Localizer["Loading"]</p>
}
else if (!_vm!.IsAuthenticated)
{
    <p>@Localizer["PleaseLogin"]</p>
}
else
{
    <EditForm Model="_vm" OnValidSubmit="@(() => _vm!.CreateAsync())">
        <DataAnnotationsValidator />
        <div style="display:flex;gap:.5rem;align-items:flex-start;margin-bottom:1rem;">
            <InputText @bind-Value="_vm!.CreateName" placeholder="@Localizer["NewGroupPlaceholder"]" />
            <button type="submit" disabled="@_vm.Busy">@(_vm.Busy? Localizer["Adding"] : Localizer["Add"])</button>
        </div>
        <ValidationSummary />
    </EditForm>

    <div class="table-responsive">
        <table class="fm-table">
            <thead>
                <tr>
                    <th>@Localizer["Col_Name"]</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var c in _vm.Categories)
                {
                    <tr>
                        <td>@c.Name</td>
                    </tr>
                }
                @if (_vm.Categories.Count == 0)
                {
                    <tr><td style="opacity:.7;">@Localizer["NoGroups"]</td></tr>
                }
            </tbody>
        </table>
    </div>

    @if (!string.IsNullOrEmpty(_vm.Error))
    {
        <div style="margin-top:.75rem;color:#b00;">@_vm.Error</div>
    }
}

@code {
    private enum TabId { ContactCategories }
    private List<Ribbon<TabId>.RibbonTab<TabId>> _tabs = new();
    private TabId _activeTab = TabId.ContactCategories;
    private Task OnActiveTabChanged(TabId id){ _activeTab = id; return Task.CompletedTask; }

    private ContactCategoriesViewModel? _vm;

    protected override async Task OnInitializedAsync()
    {
        if (_vm is not null)
        {
            _vm.StateChanged -= VmOnStateChanged;
            _vm.AuthenticationRequired -= VmOnAuthenticationRequired;
            await _vm.DisposeAsync();
        }
        _vm = ActivatorUtilities.CreateInstance<ContactCategoriesViewModel>(Services);
        _vm.StateChanged += VmOnStateChanged;
        _vm.AuthenticationRequired += VmOnAuthenticationRequired;
        await _vm.InitializeAsync();
        RebuildRibbon();
    }

    private void VmOnAuthenticationRequired(object? sender, string? returnUrl)
    {
        var back = Navigation.ToBaseRelativePath(Navigation.Uri);
        var url = string.IsNullOrWhiteSpace(back) ? "/login" : $"/login?returnUrl={Uri.EscapeDataString(back)}";
        Navigation.NavigateTo(url, forceLoad: true);
    }

    private void VmOnStateChanged(object? sender, EventArgs e)
    {
        RebuildRibbon();
        _ = InvokeAsync(StateHasChanged);
    }

    private void RebuildRibbon()
    {
        var groupsDto = _vm?.GetRibbon(Localizer) ?? new List<UiRibbonGroup>();
        var groups = new List<Ribbon<TabId>.RibbonGroup>();
        foreach (var g in groupsDto)
        {
            var items = new List<Ribbon<TabId>.RibbonItem>();
            foreach (var it in g.Items)
            {
                var size = it.Size == UiRibbonItemSize.Large
                    ? Ribbon<TabId>.RibbonItemSize.Large
                    : Ribbon<TabId>.RibbonItemSize.Small;

                items.Add(new Ribbon<TabId>.RibbonItem
                {
                    Label = it.Label,
                    IconSvg = it.IconSvg,
                    Size = size,
                    Disabled = it.Disabled,
                    Callback = () => { HandleRibbonAction(it.Action); return Task.CompletedTask; }
                });
            }
            groups.Add(new Ribbon<TabId>.RibbonGroup { Title = g.Title, Items = items });
        }

        _tabs = new()
        {
            new Ribbon<TabId>.RibbonTab<TabId>
            {
                Id = TabId.ContactCategories,
                Title = Localizer["Ribbon_Tab_ContactCategories"],
                Groups = groups
            }
        };
        StateHasChanged();
    }

    private void HandleRibbonAction(string action)
    {
        switch (action)
        {
            case "Back":
                Navigation.NavigateTo("/contacts");
                break;
            case "New":
                _ = _vm!.CreateAsync();
                break;
        }
    }
}