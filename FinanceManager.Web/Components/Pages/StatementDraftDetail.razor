@page "/statement-drafts/{Id:guid}"
@rendermode InteractiveServer
@inject HttpClient Http
@inject NavigationManager Nav
@using FinanceManager.Application.Statements
@using FinanceManager.Domain.Statements
@using FinanceManager.Shared.Dtos

<h3>Statement Draft Detail</h3>
@if (_draft == null)
{
    <p>Loading...</p>
}
else
{
    <div class="action-bar" style="margin-bottom:1rem;display:flex;gap:.4rem;align-items:center;flex-wrap:wrap;">
        @if (_draft.IsSplitDraft && _draft.ParentDraftId != null && _draft.ParentEntryId != null)
        {
            <button @onclick="BackToParent" class="icon-btn" title="Zurück zum Ursprungs-Eintrag" aria-label="Zurück">
                <svg><use href="/icons/sprite.svg#back" /></svg>
            </button>
        }
        <button @onclick="ToggleViewer" class="icon-btn" disabled="@(!_hasFile)" title="Originaldatei anzeigen" aria-label="Original anzeigen">
            <svg><use href="/icons/sprite.svg#external" /></svg>
        </button>
        <button @onclick="DownloadFile" class="icon-btn" disabled="@(!_hasFile)" title="Originaldatei herunterladen" aria-label="Download">
            <svg><use href="/icons/sprite.svg#save" /></svg>
        </button>
        <button @onclick="DeleteDraftAsync" class="icon-btn" title="Delete Draft" aria-label="Delete Draft">
            <svg><use href="/icons/sprite.svg#delete" /></svg>
        </button>
        <button @onclick="ClassifyAsync" class="icon-btn" title="Reclassify" aria-label="Reclassify">
            <svg><use href="/icons/sprite.svg#refresh" /></svg>
        </button>        
    </div>
    <p><strong>File:</strong> @_draft.OriginalFileName</p>
    @if (_hasFile)
    {
        <p style="margin-top:-.6rem;font-size:.65rem;opacity:.6;">Originaldatei gespeichert</p>
    }
    <p><strong>Status:</strong> @_draft.Status</p>
    <p>
        <strong>Account:</strong> 
        <select @onchange="OnAccountChanged" value="@_selectedAccountId">
            <option value="">-- select --</option>
            @foreach (var grp in _groupedAccounts)
            {
                <optgroup label="@grp.Key">
                    @foreach (var acc in grp.Value)
                    {
                        <option value="@acc.Id" selected="@(acc.Id == _selectedAccountId)">@acc.Name</option>
                    }
                </optgroup>
            }
        </select>
    </p>

    <p><strong>Gesamtsumme:</strong> @_draft.Entries.Sum(e => e.Amount)</p>
    @if (_draft.ParentEntryAmount != null)
    {
        <p style="color:#ccc;"><strong>Betrag Ursprungs-Eintrag:</strong> @_draft.ParentEntryAmount</p>
    }

    <h4>Entries (@_draft.Entries.Count)</h4>
    <div class="draft-entries-container">
        <table class="fm-table wide">
            <thead>
                <tr>
                    <th style="width:1.4rem;"></th>
                    <th style="width:7rem;">Date</th>
                    <th style="width:7rem;">Valuta</th>
                    <th style="width:7rem;text-align:right;">Amount</th>
                    <th style="width:6rem;">Currency</th>
                    <th>Subject</th>
                    <th style="width:14%;">Recipient</th>
                    <th style="width:12%;">Sparplan</th>
                    <th>Description</th>
                    <th style="width:6rem;">Announced</th>
                    <th style="width:9rem;">Status</th>                    
                </tr>
            </thead>
            <tbody>
                @foreach (var e in _draft.Entries.OrderBy(e => e.BookingDate))
                {
                    <tr style="cursor:pointer;" @onclick="(() => OpenEntry(e.Id))">
                        <td>
                            @if (e.SplitDraftId != null)
                            {
                                <svg title="Aufteilungs-Auszug verknüpft" aria-label="Split" style="width:1rem;height:1rem;">
                                    <use href="/icons/sprite.svg#link" />
                                </svg>
                            }
                        </td>
                        <td>@e.BookingDate.ToShortDateString()</td>
                        <td>@(e.ValutaDate?.ToShortDateString() ?? "-")</td>
                        <td style="text-align:right;">@e.Amount</td>
                        <td>@e.CurrencyCode</td>
                        <td class="wrap">@e.Subject</td>
                        <td class="wrap">
                            @{
                                string recipient = "-";
                                if (e.ContactId != null)
                                {
                                    var contact = _contacts.FirstOrDefault(a => a.Id == e.ContactId);
                                    recipient = contact?.Name ?? (string.IsNullOrWhiteSpace(e.RecipientName) ? "-" : e.RecipientName);
                                }
                                else
                                {
                                    recipient = string.IsNullOrWhiteSpace(e.RecipientName) ? "-" : e.RecipientName;
                                }
                            }
                            @recipient
                        </td>
                        <td>
                            @if (e.SavingsPlanId != null)
                            {
                                var plan = _savingsPlans.FirstOrDefault(p => p.Id == e.SavingsPlanId);
                                @plan?.Name
                            }
                            else
                            {
                                <span>-</span>
                            }
                        </td>
                        <td class="wrap">@(string.IsNullOrWhiteSpace(e.BookingDescription) ? "-" : e.BookingDescription)</td>
                        <td>@(e.IsAnnounced ? "✓" : "")</td>
                        <td>@e.Status</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    @if (_draft.Status == FinanceManager.Domain.StatementDraftStatus.Draft)
    {
        <h4>Add Entry</h4>
        <EditForm Model="_form" OnValidSubmit="AddEntryAsync">
            <div style="display:flex;gap:.5rem;flex-wrap:wrap;align-items:center;">
                <InputDate @bind-Value="_form.BookingDate" />
                <InputNumber @bind-Value="_form.Amount" />
                <InputText @bind-Value="_form.Subject" />
                <button type="submit" class="icon-btn">Add</button>
            </div>
        </EditForm>
    }
}

<div style="display:flex;align-items:flex-start;gap:1rem;">
    <div style="flex:1;min-width:0;">
        <!-- existing entries table stays here -->
    </div>
    @if (_showViewer && _hasFile)
    {
        <div style="width:420px;max-width:45%;height:70vh;position:sticky;top:1rem;border:1px solid var(--border);border-radius:var(--radius);background:#111;display:flex;flex-direction:column;">
            <div style="padding:.35rem .6rem;font-size:.7rem;letter-spacing:.05em;border-bottom:1px solid var(--border);display:flex;justify-content:space-between;align-items:center;">
                <span>Originaldatei</span>
                <button class="icon-btn" style="padding:.25rem .4rem;" @onclick="ToggleViewer" title="Schließen" aria-label="Schließen"><svg><use href="/icons/sprite.svg#clear" /></svg></button>
            </div>
            <iframe src="@_fileUrl" style="flex:1;border:0;width:100%;"></iframe>
        </div>
    }
</div>

@code {
    [Parameter] public Guid Id { get; set; }
    private StatementDraftDto? _draft;

    private EntryForm _form = new() { BookingDate = DateTime.Today };

    private List<AccountVm> _accounts = new();
    private List<ContactDto> _contacts = new();
    private Dictionary<string, List<AccountVm>> _groupedAccounts = new();
    private Guid? _selectedAccountId;
    private List<SavingsPlanDto> _savingsPlans = new();

    private bool _hasFile; private bool _showViewer; private string? _fileUrl;

    protected override async Task OnParametersSetAsync()
    {
        _draft = await Http.GetFromJsonAsync<StatementDraftDto>($"api/statement-drafts/{Id}");
        _hasFile = _draft != null; // presence implies we can query file endpoint; refine via flag if added later
        await LoadAccountsAsync();
        _selectedAccountId = _draft?.DetectedAccountId;
        await LoadSavingsPlansAsync();
        if (_showViewer && _hasFile)
        {
            _fileUrl = $"/api/statement-drafts/{Id}/file";
        }
    }

    private async Task LoadAccountsAsync()
    {
        var resp = await Http.GetAsync("/api/accounts?skip=0&take=500");
        if (resp.IsSuccessStatusCode)
        {
            var list = await resp.Content.ReadFromJsonAsync<List<AccountDto>>() ?? new();
            _accounts = list.Select(a => new AccountVm { Id = a.Id, Name = a.Name, BankContactId = a.BankContactId }).ToList();
            // load contacts for grouping names
            var contactsResp = await Http.GetAsync("/api/contacts?skip=0&take=500");
            _contacts = new List<ContactDto>();
            if (contactsResp.IsSuccessStatusCode)
            {
                _contacts = await contactsResp.Content.ReadFromJsonAsync<List<ContactDto>>() ?? new();
            }
            var bankContacts = _contacts.Where(c => c.Type == ContactType.Bank).ToDictionary(c => c.Id, c => c.Name);
            _groupedAccounts = _accounts
                .GroupBy(a => bankContacts.TryGetValue(a.BankContactId, out var n) ? n : "(Bank)" )
                .OrderBy(g => g.Key)
                .ToDictionary(g => g.Key, g => g.OrderBy(x => x.Name).ToList());
        }
    }

    private async Task LoadSavingsPlansAsync()
    {
        var resp = await Http.GetAsync("/api/savings-plans?onlyActive=true");
        if (resp.IsSuccessStatusCode)
        {
            _savingsPlans = await resp.Content.ReadFromJsonAsync<List<SavingsPlanDto>>() ?? new();
        }
    }

    private async Task OnAccountChanged(ChangeEventArgs e)
    {
        if (Guid.TryParse(e.Value?.ToString(), out var accId))
        {
            var resp = await Http.PostAsync($"api/statement-drafts/{Id}/account/{accId}", null);
            if (resp.IsSuccessStatusCode)
            {
                _draft = await resp.Content.ReadFromJsonAsync<StatementDraftDto>();
                _selectedAccountId = _draft?.DetectedAccountId;
                StateHasChanged();
            }
        }
    }

    private async Task AddEntryAsync()
    {
        var response = await Http.PostAsJsonAsync($"api/statement-drafts/{Id}/entries", new { BookingDate = _form.BookingDate, Amount = _form.Amount, Subject = _form.Subject });
        if (response.IsSuccessStatusCode)
        {
            _draft = await response.Content.ReadFromJsonAsync<StatementDraftDto>();
            _form = new EntryForm { BookingDate = DateTime.Today };
            StateHasChanged();
        }
    }

    private async Task ClassifyAsync()
    {
        var response = await Http.PostAsync($"api/statement-drafts/{Id}/classify", null);
        if (response.IsSuccessStatusCode)
        {
            _draft = await response.Content.ReadFromJsonAsync<StatementDraftDto>();
            _selectedAccountId = _draft?.DetectedAccountId;
            StateHasChanged();
        }
    }

    private async Task DeleteDraftAsync()
    {
        if (_draft == null) { return; }
        var resp = await Http.DeleteAsync($"api/statement-drafts/{Id}");
        if (resp.IsSuccessStatusCode || resp.StatusCode == System.Net.HttpStatusCode.NoContent)
        {
            Nav.NavigateTo("/statement-drafts");
        }
    }

    private void OpenEntry(Guid entryId) => Nav.NavigateTo($"/statement-drafts/{Id}/entries/{entryId}");

    private void BackToParent()
    {
        if (_draft?.ParentDraftId != null && _draft.ParentEntryId != null)
        {
            Nav.NavigateTo($"/statement-drafts/{_draft.ParentDraftId}/entries/{_draft.ParentEntryId}");
        }
    }

    private void ToggleViewer()
    {
        if (!_hasFile) return;
        _showViewer = !_showViewer;
        _fileUrl = _showViewer ? $"/api/statement-drafts/{Id}/file" : null;
    }

    private async Task DownloadFile()
    {
        if (!_hasFile) return;
        var url = $"/api/statement-drafts/{Id}/file";
        Nav.NavigateTo(url, forceLoad:true);
    }

    private sealed class EntryForm
    {
        public DateTime BookingDate { get; set; }
        public decimal Amount { get; set; }
        public string Subject { get; set; } = string.Empty;
    }

    private sealed record StatementDraftEntryDto(
        Guid Id,
        DateTime BookingDate,
        DateTime? ValutaDate,
        decimal Amount,
        string CurrencyCode,
        string Subject,
        string? RecipientName,
        string? BookingDescription,
        bool IsAnnounced,
        StatementDraftEntryStatus Status,
        Guid? ContactId,
        Guid? SavingsPlanId,
        Guid? SplitDraftId);

    private sealed record StatementDraftDto(
        Guid DraftId,
        string OriginalFileName,
        Guid? DetectedAccountId,
        FinanceManager.Domain.StatementDraftStatus Status,
        List<StatementDraftEntryDto> Entries,
        decimal TotalAmount,
        bool IsSplitDraft,
        Guid? ParentDraftId,
        Guid? ParentEntryId,
        decimal? ParentEntryAmount);

    private sealed record AccountDto(Guid Id, string Name, int Type, string? Iban, decimal CurrentBalance, Guid BankContactId);
    private sealed record ContactDto(Guid Id, string Name, ContactType Type, Guid? CategoryId);
    private enum ContactType { Self, Bank, Person, Organization, Other }

    private sealed class AccountVm { public Guid Id { get; set; } public string Name { get; set; } = string.Empty; public Guid BankContactId { get; set; } }
}
