@page "/statement-drafts/{Id:guid}"
@rendermode InteractiveServer
@inject HttpClient Http
@inject NavigationManager Nav
@using FinanceManager.Application.Statements
@using FinanceManager.Domain.Statements
@using FinanceManager.Shared.Dtos
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<Components.Pages.StatementDraftDetail> Localizer

@code {
    [Parameter] public Guid Id { get; set; }
    [Parameter, SupplyParameterFromQuery] public string? Src { get; set; } // "entry" when opened from entry detail
    [Parameter, SupplyParameterFromQuery] public Guid? FromEntryDraftId { get; set; }
    [Parameter, SupplyParameterFromQuery] public Guid? FromEntryId { get; set; }
    private StatementDraftDto? _draft;
    private EntryForm _form = new() { BookingDate = DateTime.Today };
    private List<AccountVm> _accounts = new();
    private List<ContactDto> _contacts = new();
    private Dictionary<string, List<AccountVm>> _groupedAccounts = new();
    private Guid? _selectedAccountId;
    private List<SavingsPlanDto> _savingsPlans = new();
    private bool _hasFile; private bool _showViewer; private string? _fileUrl;
    private DraftValidationResultDto? _validation; private bool _booking; private bool _pendingWarningConfirmation; private DraftValidationResultDto? _lastValidation; private string? _bookingError;

    private sealed record BookingResultDto(bool Success, bool HasWarnings, DraftValidationResultDto Validation, Guid? StatementImportId, int? TotalEntries, Guid? nextDraftId);

    protected override async Task OnParametersSetAsync()
    {
        _draft = await Http.GetFromJsonAsync<StatementDraftDto>($"/api/statement-drafts/{Id}");
        _hasFile = _draft != null;
        await LoadAccountsAsync();
        _selectedAccountId = _draft?.DetectedAccountId;
        await LoadSavingsPlansAsync();
        if (_showViewer && _hasFile)
        {
            _fileUrl = $"/api/statement-drafts/{Id}/file";
        }
    }

    private void GoPrevInUpload()
    {
        if (_draft?.PrevInUpload != null)
        {
            var qp = BuildContextQuery();
            Nav.NavigateTo($"/statement-drafts/{_draft.PrevInUpload}{qp}");
        }
    }
    private void GoNextInUpload()
    {
        if (_draft?.NextInUpload != null)
        {
            var qp = BuildContextQuery();
            Nav.NavigateTo($"/statement-drafts/{_draft.NextInUpload}{qp}");
        }
    }

    private string BuildContextQuery()
    {
        if (!string.Equals(Src, "entry", StringComparison.OrdinalIgnoreCase) || !FromEntryDraftId.HasValue || !FromEntryId.HasValue)
        {
            return string.Empty;
        }
        return $"?src=entry&fromEntryDraftId={FromEntryDraftId}&fromEntryId={FromEntryId}";
    }

    private async Task ValidateDraft() => _validation = await Http.GetFromJsonAsync<DraftValidationResultDto>($"/api/statement-drafts/{Id}/validate");

    private async Task BookDraft()
    {
        _bookingError = null; _pendingWarningConfirmation = false; _lastValidation = null; _booking = true;
        try
        {
            var resp = await Http.PostAsync($"/api/statement-drafts/{Id}/book", null);
            if (resp.StatusCode == System.Net.HttpStatusCode.PreconditionRequired)
            {
                var res = await resp.Content.ReadFromJsonAsync<BookingResultDto>();
                _lastValidation = res?.Validation; _validation = res?.Validation; _pendingWarningConfirmation = true;
            }
            else if (!resp.IsSuccessStatusCode)
            {
                BookingResultDto? resObj = null;
                try { resObj = await resp.Content.ReadFromJsonAsync<BookingResultDto>(); } catch { }
                if (resObj?.Validation != null) { _validation = resObj.Validation; _bookingError = Localizer["Error_FixIssues"]; }
                else { _bookingError = await resp.Content.ReadAsStringAsync(); }
            }
            else
            {
                var ok = await resp.Content.ReadFromJsonAsync<BookingResultDto>();
                if (ok != null && ok.Success)
                {
                    if (ok.nextDraftId is not null) Nav.NavigateTo($"/statement-drafts/{ok.nextDraftId}", true);
                    else Nav.NavigateTo("/statement-drafts", true);
                }
            }
        }
        finally { _booking = false; }
    }

    private async Task ForceBook()
    {
        _booking = true; _bookingError = null;
        try
        {
            var resp = await Http.PostAsync($"/api/statement-drafts/{Id}/book?forceWarnings=true", null);
            if (!resp.IsSuccessStatusCode)
            {
                BookingResultDto? resObj = null; try { resObj = await resp.Content.ReadFromJsonAsync<BookingResultDto>(); } catch { }
                if (resObj?.Validation != null) { _validation = resObj.Validation; _bookingError = Localizer["Error_FixIssues"]; }
                else { _bookingError = await resp.Content.ReadAsStringAsync(); }
            }
            else
            {
                var ok = await resp.Content.ReadFromJsonAsync<BookingResultDto>();
                if (ok != null && ok.Success)
                {
                    if (ok.nextDraftId is not null) Nav.NavigateTo($"/statement-drafts/{ok.nextDraftId}", true); else Nav.NavigateTo("/statement-drafts", true);
                }
            }
        }
        finally { _booking = false; _pendingWarningConfirmation = false; }
    }

    private async Task LoadAccountsAsync()
    {
        var resp = await Http.GetAsync("/api/accounts?skip=0&take=500");
        if (resp.IsSuccessStatusCode)
        {
            var list = await resp.Content.ReadFromJsonAsync<List<AccountDto>>() ?? new();
            _accounts = list.Select(a => new AccountVm { Id = a.Id, Name = a.Name, BankContactId = a.BankContactId }).ToList();
            var contactsResp = await Http.GetAsync("/api/contacts?skip=0&take=500");
            _contacts = contactsResp.IsSuccessStatusCode ? await contactsResp.Content.ReadFromJsonAsync<List<ContactDto>>() ?? new() : new();
            var bankContacts = _contacts.Where(c => c.Type == ContactType.Bank).ToDictionary(c => c.Id, c => c.Name);
            _groupedAccounts = _accounts.GroupBy(a => bankContacts.TryGetValue(a.BankContactId, out var n) ? n : "(Bank)").OrderBy(g => g.Key).ToDictionary(g => g.Key, g => g.OrderBy(x => x.Name).ToList());
        }
    }

    private async Task LoadSavingsPlansAsync()
    {
        var resp = await Http.GetAsync("/api/savings-plans?onlyActive=true");
        if (resp.IsSuccessStatusCode) { _savingsPlans = await resp.Content.ReadFromJsonAsync<List<SavingsPlanDto>>() ?? new(); }
    }

    private async Task OnAccountChanged(ChangeEventArgs e)
    {
        if (Guid.TryParse(e.Value?.ToString(), out var accId))
        {
            var resp = await Http.PostAsync($"/api/statement-drafts/{Id}/account/{accId}", null);
            if (resp.IsSuccessStatusCode)
            {
                _draft = await resp.Content.ReadFromJsonAsync<StatementDraftDto>();
                _selectedAccountId = _draft?.DetectedAccountId;
                StateHasChanged();
            }
        }
    }

    private async Task AddEntryAsync()
    {
        var response = await Http.PostAsJsonAsync($"/api/statement-drafts/{Id}/entries", new { BookingDate = _form.BookingDate, Amount = _form.Amount, Subject = _form.Subject });
        if (response.IsSuccessStatusCode)
        {
            _draft = await response.Content.ReadFromJsonAsync<StatementDraftDto>();
            _form = new EntryForm { BookingDate = DateTime.Today };
            StateHasChanged();
        }
    }

    private async Task ClassifyAsync()
    {
        var response = await Http.PostAsync($"/api/statement-drafts/{Id}/classify", null);
        if (response.IsSuccessStatusCode)
        {
            _draft = await response.Content.ReadFromJsonAsync<StatementDraftDto>();
            _selectedAccountId = _draft?.DetectedAccountId;
            StateHasChanged();
        }
    }

    private async Task DeleteDraftAsync()
    {
        if (_draft == null) { return; }
        var resp = await Http.DeleteAsync($"/api/statement-drafts/{Id}");
        if (resp.IsSuccessStatusCode || resp.StatusCode == System.Net.HttpStatusCode.NoContent) { Nav.NavigateTo("/statement-drafts"); }
        else { _bookingError = await resp.Content.ReadAsStringAsync(); StateHasChanged(); }
    }

    private bool HasEntryContext => string.Equals(Src, "entry", StringComparison.OrdinalIgnoreCase) && FromEntryDraftId.HasValue && FromEntryId.HasValue;

    private void OpenEntry(Guid entryId)
    {
        // If we already have an origin context, keep it. Otherwise create a new one using the clicked entry as origin.
        string url;
        if (HasEntryContext)
        {
            var existing = BuildContextQuery();
            url = $"/statement-drafts/{Id}/entries/{entryId}{existing}";
        }
        else
        {
            url = $"/statement-drafts/{Id}/entries/{entryId}?src=entry&fromEntryDraftId={Id}&fromEntryId={entryId}";
        }
        Nav.NavigateTo(url);
    }
    private void BackToParent()
    {
        if (_draft?.ParentDraftId != null && _draft.ParentEntryId != null)
        {
            var qp = BuildContextQuery();
            Nav.NavigateTo($"/statement-drafts/{_draft.ParentDraftId}/entries/{_draft.ParentEntryId}{qp}");
        }
    }
    private void ToggleViewer() { if (!_hasFile) { return; } _showViewer = !_showViewer; _fileUrl = _showViewer ? $"/api/statement-drafts/{Id}/file" : null; }
    private void DownloadFile() { if (!_hasFile) { return; } Nav.NavigateTo($"/api/statement-drafts/{Id}/file", forceLoad:true); }

    private void BackGeneric()
    {
        // Always go back to overview now
        Nav.NavigateTo("/statement-drafts");
    }

    private void BackToSourceEntry()
    {
        if (HasEntryContext)
        {
            Nav.NavigateTo($"/statement-drafts/{FromEntryDraftId}/entries/{FromEntryId}");
        }
    }

    private sealed class EntryForm { public DateTime BookingDate { get; set; } public decimal Amount { get; set; } public string Subject { get; set; } = string.Empty; }

    private sealed record StatementDraftEntryDto(Guid Id, DateTime BookingDate, DateTime? ValutaDate, decimal Amount, string CurrencyCode, string Subject, string? RecipientName, string? BookingDescription, bool IsAnnounced, StatementDraftEntryStatus Status, Guid? ContactId, Guid? SavingsPlanId, Guid? SplitDraftId);
    private sealed record StatementDraftDto(Guid DraftId, string OriginalFileName, Guid? DetectedAccountId, FinanceManager.Domain.StatementDraftStatus Status, List<StatementDraftEntryDto> Entries, decimal TotalAmount, bool IsSplitDraft, Guid? ParentDraftId, Guid? ParentEntryId, decimal? ParentEntryAmount, Guid? UploadGroupId, Guid? PrevInUpload, Guid? NextInUpload);
    private sealed record DraftValidationMessageDto(string Code, string Severity, string Message, Guid DraftId, Guid? EntryId);
    private sealed record DraftValidationResultDto(Guid DraftId, bool IsValid, IReadOnlyList<DraftValidationMessageDto> Messages);
    private sealed record AccountDto(Guid Id, string Name, int Type, string? Iban, decimal CurrentBalance, Guid BankContactId);
    private sealed record ContactDto(Guid Id, string Name, ContactType Type, Guid? CategoryId);
    private enum ContactType { Self, Bank, Person, Organization, Other }
    private sealed record SavingsPlanDto(Guid Id, string Name);
    private sealed class AccountVm { public Guid Id { get; set; } public string Name { get; set; } = string.Empty; public Guid BankContactId { get; set; } }
}

<h3>@Localizer["Title"]</h3>
@if (_draft == null)
{
    <p>@Localizer["Loading"]</p>
}
else
{
    <div class="action-bar" style="margin-bottom:1rem;display:flex;gap:.4rem;align-items:center;flex-wrap:wrap;">
        <button class="icon-btn" @onclick="BackGeneric" title='@Localizer["Btn_Back"]' aria-label='@Localizer["Btn_Back"]'>
            <svg><use href="/icons/sprite.svg#arrow-left" /></svg>
        </button>
        @if (HasEntryContext)
        {
            <button class="icon-btn" @onclick="BackToSourceEntry" title='@Localizer["Btn_BackToParent"]' aria-label='@Localizer["Btn_BackToParent"]'>
                <svg><use href="/icons/sprite.svg#level-up" /></svg>
            </button>
        }
        <button class="icon-btn" disabled="@(_draft.PrevInUpload==null)" @onclick="GoPrevInUpload" title='@Localizer["Btn_PrevUpload"]' aria-label='@Localizer["Btn_PrevUpload"]'>
            <svg><use href="/icons/sprite.svg#chevron-left" /></svg>
        </button>
        <button class="icon-btn" disabled="@(_draft.NextInUpload==null)" @onclick="GoNextInUpload" title='@Localizer["Btn_NextUpload"]' aria-label='@Localizer["Btn_NextUpload"]'>
            <svg><use href="/icons/sprite.svg#chevron-right" /></svg>
        </button>
        <button @onclick="ToggleViewer" class="icon-btn" disabled="@(!_hasFile)" title='@Localizer["Btn_ShowOriginal"]' aria-label='@Localizer["Btn_ShowOriginal"]'>
            <svg><use href="/icons/sprite.svg#external" /></svg>
        </button>
        <button @onclick="DownloadFile" class="icon-btn" disabled="@(!_hasFile)" title='@Localizer["Btn_Download"]' aria-label='@Localizer["Btn_Download"]'>
            <svg><use href="/icons/sprite.svg#save" /></svg>
        </button>
        <button @onclick="DeleteDraftAsync" class="icon-btn" title='@Localizer["Btn_Delete"]' aria-label='@Localizer["Btn_Delete"]'>
            <svg><use href="/icons/sprite.svg#delete" /></svg>
        </button>
        <button @onclick="ClassifyAsync" class="icon-btn" title='@Localizer["Btn_Reclassify"]' aria-label='@Localizer["Btn_Reclassify"]'>
            <svg><use href="/icons/sprite.svg#refresh" /></svg>
        </button>
        <button @onclick="ValidateDraft" class="icon-btn" title='@Localizer["Btn_Validate"]' aria-label='@Localizer["Btn_Validate"]'>
            <svg><use href="/icons/sprite.svg#check" /></svg>
        </button>
        <button class="icon-btn" @onclick="BookDraft" disabled="@_booking" title='@Localizer["Btn_Book"]' aria-label='@Localizer["Btn_Book"]'>
            <svg><use href="/icons/sprite.svg#save" /></svg>
        </button>
        @if(_validation != null)
        {
            var errorCount = _validation.Messages.Count(m=>m.Severity=="Error");
            var warnCount = _validation.Messages.Count(m=>m.Severity=="Warning");
            <span style="margin-left:.75rem;font-size:.75rem;display:flex;gap:.6rem;align-items:center;">
                <span style="color:#e66;">@Localizer["Errors"]: @errorCount</span>
                <span style="color:#cc6;">@Localizer["Warnings"]: @warnCount</span>
            </span>
        }
    </div>
    @if(!string.IsNullOrEmpty(_bookingError))
    {
        <div style="margin:.5rem 0;color:#e66;font-size:.75rem;">@_bookingError</div>
    }
    @if(_pendingWarningConfirmation && _lastValidation != null)
    {
        <div style="margin:.75rem 0;padding:.6rem .8rem;border:1px solid #665500;background:#221e00;font-size:.7rem;max-width:960px;">
            <strong>@_lastValidation.Messages.Count(m=>m.Severity=="Warning") @Localizer["WarningsFound"]</strong> @Localizer["ProceedAnywayQuestion"]
            <div style="margin-top:.5rem;display:flex;gap:.5rem;">
                <button class="icon-btn" @onclick="ForceBook">@Localizer["Yes"]</button>
                <button class="icon-btn" @onclick="(()=>{_pendingWarningConfirmation=false;})">@Localizer["Cancel"]</button>
            </div>
        </div>
    }
    <p><strong>@Localizer["File"]:</strong> @_draft.OriginalFileName</p>
    @if (_hasFile)
    {
        <p style="margin-top:-.6rem;font-size:.65rem;opacity:.6;">@Localizer["OriginalStored"]</p>
    }
    <p><strong>@Localizer["Status"]:</strong> @_draft.Status</p>
    <p>
        <strong>@Localizer["Account"]:</strong> 
        <select @onchange="OnAccountChanged" value="@_selectedAccountId">
            <option value="">-- @Localizer["Select"] --</option>
            @foreach (var grp in _groupedAccounts)
            {
                <optgroup label="@grp.Key">
                    @foreach (var acc in grp.Value)
                    {
                        <option value="@acc.Id" selected="@(acc.Id == _selectedAccountId)">@acc.Name</option>
                    }
                </optgroup>
            }
        </select>
    </p>

    @if(_validation != null)
    {
        var globalMessages = _validation.Messages.Where(m=>m.EntryId==null).ToList();
        if(globalMessages.Any())
        {
            <div style="margin:.5rem 0 1rem 0;padding:.6rem .75rem;border:1px solid #444;border-radius:4px;background:#181818;max-width:960px;">
                <h4 style="margin:.1rem 0 .4rem 0;font-size:.75rem;">@Localizer["GlobalMessages"]</h4>
                <ul style="margin:0;padding-left:1.1rem;font-size:.65rem;">
                    @foreach(var gm in globalMessages)
                    {
                        var c = gm.Severity=="Error"?"#e66":"#cc6";
                        <li style="margin:.2rem 0;color:@c;">@gm.Message</li>
                    }
                </ul>
            </div>
        }
    }

    <p><strong>@Localizer["TotalAmount"]:</strong> @_draft.Entries.Sum(e => e.Amount)</p>
    @if (_draft.ParentEntryAmount != null)
    {
        <p style="color:#ccc;"><strong>@Localizer["ParentEntryAmount"]:</strong> @_draft.ParentEntryAmount</p>
    }

    <h4>@Localizer["EntriesHeader"] (@_draft.Entries.Count)</h4>
    <div class="draft-entries-container">
        <table class="fm-table wide">
            <thead>
                <tr>
                    <th style="width:1.4rem;"></th>
                    <th style="width:7rem;">@Localizer["Th_Date"]</th>
                    <th style="width:7rem;">@Localizer["Th_Valuta"]</th>
                    <th style="width:7rem;text-align:right;">@Localizer["Th_Amount"]</th>
                    <th style="width:6rem;">@Localizer["Th_Currency"]</th>
                    <th>@Localizer["Th_Subject"]</th>
                    <th style="width:14%;">@Localizer["Th_Recipient"]</th>
                    <th style="width:12%;">@Localizer["Th_SavingsPlan"]</th>
                    <th>@Localizer["Th_Description"]</th>
                    <th style="width:6rem;">@Localizer["Th_Announced"]</th>
                    <th style="width:9rem;">@Localizer["Th_Status"]</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var e in _draft.Entries.OrderBy(e => e.BookingDate))
                {
                    var entryMessages = _validation?.Messages.Where(m => m.EntryId == e.Id).ToList() ?? new();
                    var entryErrors = entryMessages.Count(m=>m.Severity=="Error");
                    var entryWarnings = entryMessages.Count(m=>m.Severity=="Warning");
                    <tr style="cursor:pointer;" @onclick="(() => OpenEntry(e.Id))">
                        <td>
                            @if (e.SplitDraftId != null)
                            {
                                <svg title='@Localizer["LinkedSplitDraft"]' aria-label="Split" style="width:1rem;height:1rem;">
                                    <use href="/icons/sprite.svg#link" />
                                </svg>
                            }
                        </td>
                        <td>@e.BookingDate.ToShortDateString()</td>
                        <td>@(e.ValutaDate?.ToShortDateString() ?? "-")</td>
                        <td style="text-align:right;">@e.Amount</td>
                        <td>@e.CurrencyCode</td>
                        <td class="wrap">@e.Subject</td>
                        <td class="wrap">
                            @{
                                string recipient = "-";
                                if (e.ContactId != null)
                                {
                                    var contact = _contacts.FirstOrDefault(a => a.Id == e.ContactId);
                                    recipient = contact?.Name ?? (string.IsNullOrWhiteSpace(e.RecipientName) ? "-" : e.RecipientName);
                                }
                                else
                                {
                                    recipient = string.IsNullOrWhiteSpace(e.RecipientName) ? "-" : e.RecipientName;
                                }
                            }
                            @recipient
                        </td>
                        <td>
                            @if (e.SavingsPlanId != null)
                            {
                                var plan = _savingsPlans.FirstOrDefault(p => p.Id == e.SavingsPlanId);
                                @plan?.Name
                            }
                            else
                            {
                                <span>-</span>
                            }
                        </td>
                        <td class="wrap">@(string.IsNullOrWhiteSpace(e.BookingDescription) ? "-" : e.BookingDescription)</td>
                        <td>@(e.IsAnnounced ? "✓" : "")</td>
                        <td>@e.Status</td>
                    </tr>
                    @if(entryMessages.Any())
                    {
                        <tr class="validation-row" style="background:#181818;">
                            <td colspan="11" style="padding:.4rem .75rem;">
                                <div style="display:flex;gap:1rem;flex-wrap:wrap;align-items:flex-start;">
                                    <div style="display:flex;gap:.6rem;font-size:.65rem;">
                                        @if(entryErrors>0){<span style="color:#e66;">@Localizer["Errors"]: @entryErrors</span>}
                                        @if(entryWarnings>0){<span style="color:#cc6;">@Localizer["Warnings"]: @entryWarnings</span>}
                                    </div>
                                    <ul style="margin:0;padding-left:1rem;flex:1;list-style:disc;">
                                        @foreach(var m in entryMessages)
                                        {
                                            var c = m.Severity=="Error"?"#e66":"#cc6";
                                            <li style="margin:.2rem 0;color:@c;font-size:.65rem;">@m.Message</li>
                                        }
                                    </ul>
                                </div>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>

    @if (_draft.Status == FinanceManager.Domain.StatementDraftStatus.Draft)
    {
        <h4>@Localizer["AddEntryHeader"]</h4>
        <EditForm Model="_form" OnValidSubmit="AddEntryAsync">
            <div style="display:flex;gap:.5rem;flex-wrap:wrap;align-items:center;">
                <InputDate @bind-Value="_form.BookingDate" />
                <InputNumber @bind-Value="_form.Amount" />
                <InputText @bind-Value="_form.Subject" />
                <button type="submit" class="icon-btn">@Localizer["Btn_Add"]</button>
            </div>
        </EditForm>
    }
}

<div style="display:flex;align-items:flex-start;gap:1rem;">
    <div style="flex:1;min-width:0;">
    </div>
    @if (_showViewer && _hasFile)
    {
        <div style="width:420px;max-width:45%;height:70vh;position:sticky;top:1rem;border:1px solid var(--border);border-radius:var(--radius);background:#111;display:flex;flex-direction:column;">
            <div style="padding:.35rem .6rem;font-size:.7rem;letter-spacing:.05em;border-bottom:1px solid var(--border);display:flex;justify-content:space-between;align-items:center;">
                <span>@Localizer["OriginalFileTitle"]</span>
                <button class="icon-btn" style="padding:.25rem .4rem;" @onclick="ToggleViewer" title='@Localizer["Btn_Close"]' aria-label='@Localizer["Btn_Close"]'><svg><use href="/icons/sprite.svg#clear" /></svg></button>
            </div>
            <iframe src="@_fileUrl" style="flex:1;border:0;width:100%;"></iframe>
        </div>
    }
</div>
