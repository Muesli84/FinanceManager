@using System.Net.Http.Json
@inject IHttpClientFactory ClientFactory
@inject Microsoft.Extensions.Localization.IStringLocalizer<FinanceManager.Web.Components.Pages.Setup> Localizer
@inject IServiceProvider Services
@using FinanceManager.Web.ViewModels
@using Microsoft.Extensions.DependencyInjection

<div>
    <h4 style="margin-top:0;">@Localizer["Section_Backup"]</h4>
    <div style="margin-bottom:1rem;display:flex;gap:.5rem;align-items:center;flex-wrap:wrap;">
        <button class="icon-btn" @onclick="(()=> _vm!.CreateAsync())" disabled="@_vm!.Busy" title="@Localizer["Btn_CreateBackup"]">
            <svg class="icon"><use href="icons/sprite.svg#save" /></svg>
        </button>
        <label class="icon-btn" title="@Localizer["Btn_UploadBackup"]" style="padding:.3rem .6rem;cursor:pointer;">
            <InputFile OnChange="OnBackupUploadSelected" style="display:none;" />
            <svg class="icon"><use href="icons/sprite.svg#upload" /></svg>
        </label>
    </div>

    @if (!string.IsNullOrWhiteSpace(_vm?.Error))
    {
        <div class="error" style="margin-top:.5rem;">@_vm!.Error</div>
    }

    <div class="table-responsive" style="margin-top:.75rem;">
        <table class="fm-table">
            <thead>
                <tr>
                    <th style="width:11rem;">@Localizer["Th_Created"]</th>
                    <th>@Localizer["Th_File"]</th>
                    <th style="width:6rem;">@Localizer["Th_Size"]</th>
                    <th style="width:6rem;">@Localizer["Th_Source"]</th>
                    <th style="width:1%;white-space:nowrap;">@Localizer["Th_Actions"]</th>
                </tr>
            </thead>
            <tbody>
            @if (_vm!.Backups == null)
            {
                <tr><td colspan="5">@Localizer["Msg_Loading"]</td></tr>
            }
            else if (_vm!.Backups.Count == 0)
            {
                <tr><td colspan="5">@Localizer["Msg_NoBackups"]</td></tr>
            }
            else
            {
                @foreach (var b in _vm!.Backups)
                {
                    <tr @onclick="() => SelectBackup(b.Id)" class="@(_selectedBackupId==b.Id?"selected-row":null)">
                        <td>@b.CreatedUtc.ToLocalTime().ToString("g")</td>
                        <td>@b.FileName</td>
                        <td>@FormatSize(b.SizeBytes)</td>
                        <td>@b.Source</td>
                        <td style="white-space:nowrap;display:flex;gap:.25rem;">
                            <button class="icon-btn" title="@Localizer["Btn_Restore"]" disabled="@(_vm!.Busy || _vm!.HasActiveRestore)" @onclick:stopPropagation @onclick="() => StartApplyBackgroundAsync(b.Id)">
                                <svg class="icon"><use href="icons/sprite.svg#restore" /></svg>
                            </button>
                            <a class="icon-btn" title="@Localizer["Btn_Download"]" href="@($"/api/setup/backups/{b.Id}/download")" download @onclick:stopPropagation>
                                <svg class="icon"><use href="icons/sprite.svg#download" /></svg>
                            </a>
                            <button class="icon-btn danger" title="@Localizer["Btn_Delete"]" @onclick:stopPropagation @onclick="() => DeleteBackupAsync(b.Id)" disabled="@_vm!.Busy">
                                <svg class="icon"><use href="icons/sprite.svg#delete" /></svg>
                            </button>
                        </td>
                    </tr>
                }
            }
            </tbody>
        </table>
    </div>
</div>

@code {
    private SetupBackupsViewModel? _vm;
    private Guid? _selectedBackupId;
    private IBrowserFile? _uploadFile;

    protected override async Task OnInitializedAsync()
    {
        _vm = ActivatorUtilities.CreateInstance<SetupBackupsViewModel>(Services);
        _vm.StateChanged += (_, __) => { _ = InvokeAsync(StateHasChanged); };
        await _vm.InitializeAsync();
    }

    private void SelectBackup(Guid id)
    {
        _selectedBackupId = _selectedBackupId == id ? (Guid?)null : id;
    }

    private async Task StartApplyBackgroundAsync(Guid id)
    {
        if (id == Guid.Empty) { return; }
        await _vm!.StartApplyAsync(id);
    }

    private async Task DeleteBackupAsync(Guid id)
    {
        await _vm!.DeleteAsync(id);
        if (_selectedBackupId == id) { _selectedBackupId = null; }
    }

    private void OnBackupUploadSelected(InputFileChangeEventArgs e)
    {
        _uploadFile = e.File;
        _ = UploadBackupAsync();
    }

    private async Task UploadBackupAsync()
    {
        if (_uploadFile == null) { return; }
        await using var stream = _uploadFile.OpenReadStream(1024L * 1024L * 1024L);
        await _vm!.UploadAsync(stream, _uploadFile.Name);
    }

    private static string FormatSize(long bytes)
    {
        string[] units = ["B", "KB", "MB", "GB"]; double size = bytes; int unit = 0; while (size >= 1024 && unit < units.Length - 1) { size /= 1024; unit++; } return $"{size:N1} {units[unit]}";
    }
}
