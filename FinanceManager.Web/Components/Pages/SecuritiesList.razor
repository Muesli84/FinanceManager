@page "/securities"
@rendermode InteractiveServer
@inject HttpClient Http
@inject NavigationManager Nav
@using FinanceManager.Shared.Dtos
@using Microsoft.Extensions.Localization
@using FinanceManager.Web.Components.Shared
@inject IStringLocalizer<Components.Pages.SecuritiesList> Localizer
<PageTitle>@Localizer["PageTitle"]</PageTitle>

<Ribbon TTabEnum="SecuritiesList.TabId" Tabs="_tabs" ActiveTab="_activeTab" ActiveTabChanged="OnActiveTabChanged" />

<h3>@Localizer["Title"]</h3>
<table class="fm-table wide">
    <thead>
        <tr>
            <th>@Localizer["Th_Name"]</th>
            <th>@Localizer["Th_Identifier"]</th>
            <th>@Localizer["Th_AlphaVantage"]</th>
            <th>@Localizer["Th_Category"]</th>
            <th>@Localizer["Th_Status"]</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var s in _items)
        {
            <tr style="cursor:pointer;" @onclick="(()=>OpenDetail(s.Id))">
                <td>@s.Name</td>
                <td>@s.Identifier</td>
                <td>@(string.IsNullOrWhiteSpace(s.AlphaVantageCode)?"-":s.AlphaVantageCode)</td>
                <td>@(string.IsNullOrWhiteSpace(s.CategoryName)?"-":s.CategoryName)</td>
                <td>@(s.IsActive?Localizer["StatusActive"]:Localizer["StatusArchived"])</td>
            </tr>
        }
        @if(_items.Count==0)
        {
            <tr><td colspan="5" style="opacity:.6;">@Localizer["NoEntries"]</td></tr>
        }
    </tbody>
</table>

@code {
    private enum TabId { Securities }
    private List<Ribbon<TabId>.RibbonTab<TabId>> _tabs = new();
    private TabId _activeTab = TabId.Securities;
    private Task OnActiveTabChanged(TabId id) { _activeTab = id; return Task.CompletedTask; }

    private List<SecurityDto> _items = new();
    private bool _onlyActive = true;

    protected override async Task OnParametersSetAsync()
    {
        await LoadAsync();
        BuildRibbon();
    }

    private void BuildRibbon()
    {
        var actions = new Ribbon<TabId>.RibbonGroup
        {
            Title = Localizer["Ribbon_Group_Actions"],
            Items = new()
            {
                new Ribbon<TabId>.RibbonItem
                {
                    Label = Localizer["Ribbon_New"],
                    IconSvg = "<svg><use href='/icons/sprite.svg#plus'/></svg>",
                    Size = Ribbon<TabId>.RibbonItemSize.Large,
                    Callback = () => { NewSecurity(); return Task.CompletedTask; }
                },
                new Ribbon<TabId>.RibbonItem
                {
                    Label = Localizer["Ribbon_Categories"],
                    IconSvg = "<svg><use href='/icons/sprite.svg#groups'/></svg>",
                    Callback = () => { OpenCategories(); return Task.CompletedTask; }
                }
            }
        };
        var filter = new Ribbon<TabId>.RibbonGroup
        {
            Title = Localizer["Ribbon_Group_Filter"],
            Items = new()
            {
                new Ribbon<TabId>.RibbonItem
                {
                    Label = Localizer["Ribbon_ToggleActive"],
                    IconSvg = "<svg><use href='/icons/sprite.svg#check'/></svg>",
                    Disabled = false,
                    Callback = () => { _onlyActive = !_onlyActive; _ = LoadAsync(); return Task.CompletedTask; }
                }
            }
        };
        _tabs = new()
        {
            new Ribbon<TabId>.RibbonTab<TabId>
            {
                Id = TabId.Securities,
                Title = Localizer["Ribbon_Tab_Securities"],
                Groups = new(){ actions, filter }
            }
        };
        StateHasChanged();
    }

    private async Task LoadAsync()
    {
        var resp = await Http.GetAsync($"/api/securities?onlyActive={_onlyActive}");
        if (resp.IsSuccessStatusCode)
        {
            _items = await resp.Content.ReadFromJsonAsync<List<SecurityDto>>() ?? new();
        }
        BuildRibbon();
    }

    private void NewSecurity() => Nav.NavigateTo("/securities/new");
    private void OpenDetail(Guid id) => Nav.NavigateTo($"/securities/{id}");
    private void OpenCategories() => Nav.NavigateTo("/security-categories");
}
