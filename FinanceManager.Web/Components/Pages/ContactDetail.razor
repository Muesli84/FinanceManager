@page "/contacts/{Id:guid}"
@page "/contacts/new"
@using FinanceManager.Application.Contacts
@using FinanceManager.Domain
@using System.ComponentModel.DataAnnotations
@using FinanceManager.Shared.Dtos
@using FinanceManager.Web.Components.Shared
@using FinanceManager.Domain.Attachments
@rendermode InteractiveServer
@inject IHttpClientFactory ClientFactory
@inject NavigationManager Navigation
@inject FinanceManager.Application.ICurrentUserService CurrentUser
@inject Microsoft.Extensions.Localization.IStringLocalizer<FinanceManager.Web.Components.Pages.ContactDetail> Localizer
@using FinanceManager.Web.ViewModels
@inject IServiceProvider Services
<PageTitle>@Localizer["PageTitle"]</PageTitle>

<Ribbon TTabEnum="ContactDetail.TabId"
        Tabs="_tabs"
        ActiveTab="_activeTab"
        ActiveTabChanged="OnActiveTabChanged" />

<h1>@Localizer["Title"]</h1>

@if (!(_vm?.Loaded ?? false))
{
    <p>@Localizer["Loading"]</p>
}
else if (!_vm!.IsAuthenticated)
{
    <p>@Localizer["PleaseLogin"]</p>
}
else
{
    <EditForm Model="_vm" OnValidSubmit="OnSaveAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div>
            <label>@Localizer["LabelName"]</label>
            <InputText @bind-Value="_vm!.Name" @bind-Value:after="(()=>RebuildRibbon())" />
            <ValidationMessage For="()=>_vm!.Name" />
        </div>
        <div>
            <label>@Localizer["LabelType"]</label>
            <InputSelect @bind-Value="_vm!.Type" @bind-Value:after="(()=>RebuildRibbon())">
                @foreach (var t in Enum.GetValues<ContactType>())
                {
                    <option value="@t">@t</option>
                }
            </InputSelect>
        </div>
        <div>
            <label>@Localizer["LabelGroup"]</label>
            <InputSelect @bind-Value="_vm!.CategoryId" @bind-Value:after="(()=>RebuildRibbon())">
                <option value="">-- @Localizer["None"] --</option>
                @foreach (var g in _vm!.Categories)
                {
                    <option value="@g.Id">@g.Name</option>
                }
            </InputSelect>
        </div>
        <div>
            <label>@Localizer["LabelDescription"]</label>
            <textarea @bind="_vm!.Description" rows="4" style="width:100%;max-width:520px;"></textarea>
        </div>
        <div>
            <label><input type="checkbox" @bind="_vm!.IsPaymentIntermediary" @bind:after="(()=>RebuildRibbon())" /> @Localizer["LabelIntermediary"]</label>
        </div>
        <div>
            <label>@Localizer["LabelAliases"]</label>
            <ul style="margin-bottom:.5rem;">
                @foreach (var alias in _vm!.Aliases)
                {
                    <li style="display:flex;align-items:left;gap:.5rem;">
                        <span>@alias.Pattern</span>
                        <button type="button" class="icon-btn danger" title='@Localizer["BtnDeleteAlias"]' @onclick="() => _ = _vm!.DeleteAliasAsync(alias.Id)">
                            <svg><use href="/icons/sprite.svg#clear" /></svg>
                        </button>
                    </li>
                }
            </ul>
            <div style="display:flex;gap:.5rem;">
                <InputText @bind-Value="_vm!.NewAlias" placeholder='@Localizer["PlaceholderNewAlias"]' style="flex:1;" />
                <button type="button" class="icon-btn" title='@Localizer["BtnAddAlias"]' @onclick="() => _ = _vm!.AddAliasAsync()">
                    <svg><use href="/icons/sprite.svg#plus" /></svg>
                </button>
            </div>
            @if (!string.IsNullOrWhiteSpace(_vm!.AliasError))
            {
                <div class="error" style="margin-top:.3rem;">@_vm.AliasError</div>
            }
        </div>
        @if (!string.IsNullOrWhiteSpace(_vm!.Error))
        {
            <div class="error" style="margin-top:.75rem;">@Localizer[_vm.Error]</div>
        }
    </EditForm>

    @if (_vm?.ShowCharts == true)
    {
        <div style="margin-top:1.2rem;">
            <AggregateBarChart Endpoint="@($"/api/contacts/{Id}/aggregates")" Title="@Localizer["Chart_Title_Contact"]" />
        </div>
    }

    @if (!_vm!.IsNew)
    {
        <ContactMergeDialog Visible="@_vm!.ShowMergeDialog"
                            CurrentContactId="@_vm!.ContactId!.Value"
                            CurrentContactType="@_vm!.Type.ToString()"
                            OnConfirm="OnPerformMergeAsync"
                            OnCancel="(()=> _vm!.CloseMergeDialog())" />
    }
}

@if (_vm?.ShowAttachments == true && Id != null)
{
    <div class="split-center" @onclick="(()=> _vm!.ShowAttachments = false)">
        <div class="split-dialog" style="max-width:90vH;" @onclick:stopPropagation="true">
            <div style="display:flex;align-items:center;justify-content:space-between;margin-bottom:.5rem;">
                <h3 style="margin:0;font-size:1rem;">@Localizer["Attachments_Title"]</h3>
                <button class="icon-btn" title='@Localizer["Btn_Close"]' @onclick="(()=> _vm!.ShowAttachments=false)"><svg><use href="/icons/sprite.svg#clear" /></svg></button>
            </div>
            <AttachmentsPanel ParentKind="@AttachmentEntityKind.Contact" ParentId="@Id!.Value" />
        </div>
    </div>
}

@code {
    [Parameter] public Guid? Id { get; set; }
    [SupplyParameterFromQuery(Name="back")] public string? BackNav { get; set; }

    // Ribbon state
    private enum TabId { Contact }
    private List<Ribbon<TabId>.RibbonTab<TabId>> _tabs = new();
    private TabId _activeTab = TabId.Contact;
    private Task OnActiveTabChanged(TabId t) { _activeTab = t; return Task.CompletedTask; }

    private ContactDetailViewModel? _vm;

    private Guid? _prefillDraftId;
    private Guid? _prefillEntryId;
    private string? _pendingPrefillName;

    protected override async Task OnParametersSetAsync()
    {
        ParseQueryParams();

        if (_vm == null || _vm.ContactId != Id)
        {
            if (_vm is not null)
            {
                _vm.StateChanged -= VmOnStateChanged;
                _vm.AuthenticationRequired -= VmOnAuthenticationRequired;
                await _vm.DisposeAsync();
            }
            _vm = ActivatorUtilities.CreateInstance<ContactDetailViewModel>(Services);
            _vm.StateChanged += VmOnStateChanged;
            _vm.AuthenticationRequired += VmOnAuthenticationRequired;
            _vm.ForContact(Id);

            if (_vm.IsAuthenticated)
            {
                await _vm.InitializeAsync();
                if (_vm.IsNew && !string.IsNullOrWhiteSpace(_pendingPrefillName))
                {
                    _vm.Name = _pendingPrefillName!;
                }
            }
            else
            {
                VmOnAuthenticationRequired(_vm, Navigation.ToBaseRelativePath(Navigation.Uri));
            }
            RebuildRibbon();
        }
    }

    private void VmOnAuthenticationRequired(object? sender, string? returnUrl)
    {
        var back = string.IsNullOrWhiteSpace(returnUrl) ? Navigation.ToBaseRelativePath(Navigation.Uri) : returnUrl!;
        var url = string.IsNullOrWhiteSpace(back) ? "/login" : $"/login?returnUrl={Uri.EscapeDataString(back)}";
        Navigation.NavigateTo(url, forceLoad: true);
    }

    private void VmOnStateChanged(object? sender, EventArgs e)
    {
        RebuildRibbon();
        _ = InvokeAsync(StateHasChanged);
    }

    private void RebuildRibbon()
    {
        var groupsDto = _vm?.GetRibbon(Localizer) ?? new List<UiRibbonGroup>();
        var groups = new List<Ribbon<TabId>.RibbonGroup>();
        foreach (var g in groupsDto)
        {
            var items = new List<Ribbon<TabId>.RibbonItem>();
            foreach (var it in g.Items)
            {
                var size = it.Size == UiRibbonItemSize.Large ? Ribbon<TabId>.RibbonItemSize.Large : Ribbon<TabId>.RibbonItemSize.Small;
                items.Add(new Ribbon<TabId>.RibbonItem
                {
                    Label = it.Label,
                    IconSvg = it.IconSvg,
                    Size = size,
                    Disabled = it.Disabled,
                    Callback = () => { HandleRibbonAction(it.Action); return Task.CompletedTask; }
                });
            }
            groups.Add(new Ribbon<TabId>.RibbonGroup { Title = g.Title, Items = items });
        }
        _tabs = new()
        {
            new Ribbon<TabId>.RibbonTab<TabId>
            {
                Id = TabId.Contact,
                Title = Localizer["Ribbon_Tab_Contact"],
                Groups = groups
            }
        };
        StateHasChanged();
    }

    private async Task OnSaveAsync()
    {
        if (_vm is null) { return; }
        var id = await _vm.SaveAsync();
        if (id.HasValue)
        {
            await AfterSaveAssignToDraftIfNeeded(id.Value);
        }
    }

    private async Task OnPerformMergeAsync(Guid targetId)
    {
        if (_vm is null) { return; }
        var ok = await _vm.PerformMergeAsync(targetId);
        if (ok)
        {
            Navigation.NavigateTo($"/contacts/{targetId}", forceLoad: true);
        }
    }

    private async Task AfterSaveAssignToDraftIfNeeded(Guid contactId)
    {
        if (_prefillDraftId.HasValue && _prefillEntryId.HasValue)
        {
            try
            {
                var http = ClientFactory.CreateClient("Api");
                var payload = new { ContactId = (Guid?)contactId };
                await http.PostAsJsonAsync($"/api/statement-drafts/{_prefillDraftId}/entries/{_prefillEntryId}/contact", payload);
            }
            catch { }
            Navigation.NavigateTo($"/statement-drafts/{_prefillDraftId}/entries/{_prefillEntryId}", forceLoad: true);
        }
        else
        {
            if (_vm?.IsNew == true)
            {
                Navigation.NavigateTo("/contacts", forceLoad: true);
            }
        }
    }

    private void HandleRibbonAction(string action)
    {
        switch (action)
        {
            case "Back":
                Back();
                break;
            case "Save":
                _ = OnSaveAsync();
                break;
            case "Delete":
                _ = DeleteAsync();
                break;
            case "OpenBankAccounts":
                if (_vm?.ContactId is Guid cid) { Navigation.NavigateTo($"/accounts?bankContactId={cid}"); }
                break;
            case "OpenMerge":
                _vm?.OpenMergeDialog();
                break;
            case "OpenPostings":
                if (_vm?.ContactId is Guid cid2) { Navigation.NavigateTo($"/postings/contact/{cid2}"); }
                break;
            case "OpenAttachments":
                if (_vm is not null) { _vm.ShowAttachments = true; }
                break;
        }
    }

    private async Task DeleteAsync()
    {
        if (_vm is null || _vm.IsNew) { return; }
        await _vm.DeleteAsync();
        if (string.IsNullOrWhiteSpace(_vm.Error))
        {
            Back();
        }
    }

    private void Back()
    {
        if (!string.IsNullOrWhiteSpace(BackNav))
        {
            Navigation.NavigateTo(Uri.UnescapeDataString(BackNav!), forceLoad: true);
            return;
        }
        if (_prefillDraftId.HasValue && _prefillEntryId.HasValue)
        {
            Navigation.NavigateTo($"/statement-drafts/{_prefillDraftId}/entries/{_prefillEntryId}", forceLoad: true);
        }
        else
        {
            Navigation.NavigateTo("/contacts", forceLoad: true);
        }
    }

    private void ParseQueryParams()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        var prefillName = query.Get("prefillName");
        if (!string.IsNullOrWhiteSpace(prefillName))
        {
            _pendingPrefillName = prefillName;
        }
        if (Guid.TryParse(query.Get("draftId"), out var did)) { _prefillDraftId = did; }
        if (Guid.TryParse(query.Get("entryId"), out var eid)) { _prefillEntryId = eid; }
        BackNav = query.Get("back");
    }
}
