@page "/contacts/{Id:guid}"
@page "/contacts/new"
@using FinanceManager.Application.Contacts
@using FinanceManager.Domain
@using System.ComponentModel.DataAnnotations
@using FinanceManager.Shared.Dtos
@using FinanceManager.Web.Components.Shared
@rendermode InteractiveServer
@inject IHttpClientFactory ClientFactory
@inject NavigationManager Navigation
@inject FinanceManager.Application.ICurrentUserService CurrentUser
@inject Microsoft.Extensions.Localization.IStringLocalizer<FinanceManager.Web.Components.Pages.ContactDetail> Localizer
<PageTitle>@Localizer["PageTitle"]</PageTitle>

<Ribbon TTabEnum="ContactDetail.TabId"
        Tabs="_tabs"
        ActiveTab="_activeTab"
        ActiveTabChanged="OnActiveTabChanged" />

<h1>@Localizer["Title"]</h1>

@if (!_loaded)
{
    <p>@Localizer["Loading"]</p>
}
else if (!CurrentUser.IsAuthenticated)
{
    <p>@Localizer["PleaseLogin"]</p>
}
else
{
    <EditForm Model="_model" OnValidSubmit="SaveAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div>
            <label>@Localizer["LabelName"]</label>
            <InputText @bind-Value="_model.Name" @bind-Value:after="(()=>BuildRibbon())" />
            <ValidationMessage For="()=>_model.Name" />
        </div>
        <div>
            <label>@Localizer["LabelType"]</label>
            <InputSelect @bind-Value="_model.Type" @bind-Value:after="(()=>BuildRibbon())">
                @foreach (var t in Enum.GetValues<ContactType>())
                {
                    <option value="@t">@t</option>
                }
            </InputSelect>
        </div>
        <div>
            <label>@Localizer["LabelGroup"]</label>
            <InputSelect @bind-Value="_model.CategoryId" @bind-Value:after="(()=>BuildRibbon())">
                <option value="">-- @Localizer["None"] --</option>
                @foreach (var g in _categories.OrderBy(c=>c.Name))
                {
                    <option value="@g.Id">@g.Name</option>
                }
            </InputSelect>
        </div>
        <div>
            <label>@Localizer["LabelDescription"]</label>
            <textarea @bind="_model.Description" rows="4" style="width:100%;max-width:520px;"></textarea>
        </div>
        <div>
            <label><input type="checkbox" @bind="_model.IsPaymentIntermediary" @bind:after="(()=>BuildRibbon())" /> @Localizer["LabelIntermediary"]</label>
        </div>
        <div>
            <label>@Localizer["LabelAliases"]</label>
            <ul style="margin-bottom:.5rem;">
                @foreach (var alias in _aliases)
                {
                    <li style="display:flex;align-items:left;gap:.5rem;">
                        <span>@alias.Pattern</span>
                        <button type="button" class="icon-btn danger" title='@Localizer["BtnDeleteAlias"]' @onclick="() => DeleteAliasAsync(alias.Id)">
                            <svg><use href="/icons/sprite.svg#clear" /></svg>
                        </button>
                    </li>
                }
            </ul>
            <div style="display:flex;gap:.5rem;">
                <InputText @bind-Value="_newAlias" placeholder='@Localizer["PlaceholderNewAlias"]' style="flex:1;" />
                <button type="button" class="icon-btn" title='@Localizer["BtnAddAlias"]' @onclick="AddAliasAsync">
                    <svg><use href="/icons/sprite.svg#plus" /></svg>
                </button>
            </div>
            @if (!string.IsNullOrWhiteSpace(_aliasError))
            {
                <div class="error" style="margin-top:.3rem;">@_aliasError</div>
            }
        </div>
        @if (!string.IsNullOrEmpty(_error))
        {
            <div class="error" style="margin-top:.75rem;">@_error</div>
        }
    </EditForm>

    @if (IsEdit)
    {
        <ContactMergeDialog Visible="@_showMergeDialog"
                            CurrentContactId="@Id!.Value"
                            CurrentContactType="@_model.Type"
                            OnConfirm="PerformMergeAsync"
                            OnCancel="CloseMergeDialog" />
    }
}

@code {
    [Parameter] public Guid? Id { get; set; }

    // Ribbon state
    private enum TabId { Contact }
    private List<Ribbon<TabId>.RibbonTab<TabId>> _tabs = new();
    private TabId _activeTab = TabId.Contact;
    private Task OnActiveTabChanged(TabId t) { _activeTab = t; return Task.CompletedTask; }

    private void BuildRibbon()
    {
        if (!_loaded || !CurrentUser.IsAuthenticated)
        {
            _tabs = new(); return;
        }
        var navGroup = new Ribbon<TabId>.RibbonGroup
        {
            Title = Localizer["Ribbon_Group_Navigation"],
            Items = new()
            {
                new Ribbon<TabId>.RibbonItem
                {
                    Label = Localizer["Ribbon_Back"],
                    IconSvg = "<svg><use href='/icons/sprite.svg#back'/></svg>",
                    Size = Ribbon<TabId>.RibbonItemSize.Large,
                    Callback = () => { Back(); return Task.CompletedTask; }
                }
            }
        };
        var editItems = new List<Ribbon<TabId>.RibbonItem>
        {
            new Ribbon<TabId>.RibbonItem
            {
                Label = Localizer["Ribbon_Save"],
                IconSvg = "<svg><use href='/icons/sprite.svg#save'/></svg>",
                Size = Ribbon<TabId>.RibbonItemSize.Large,
                Disabled = _busy || string.IsNullOrWhiteSpace(_model.Name) || _model.Name.Trim().Length < 2,
                Callback = () => { _ = SaveAsync(); return Task.CompletedTask; }
            }
        };
        if (IsEdit)
        {
            editItems.Add(new Ribbon<TabId>.RibbonItem
            {
                Label = Localizer["Ribbon_Delete"],
                IconSvg = "<svg><use href='/icons/sprite.svg#delete'/></svg>",
                Disabled = _busy || IsSelfContact,
                Callback = () => { _ = DeleteAsync(); return Task.CompletedTask; }
            });
        }
        var editGroup = new Ribbon<TabId>.RibbonGroup { Title = Localizer["Ribbon_Group_Edit"], Items = editItems };

        var relatedItems = new List<Ribbon<TabId>.RibbonItem>();
        if (IsEdit && Enum.Parse<ContactType>(_model.Type) == ContactType.Bank)
        {
            relatedItems.Add(new Ribbon<TabId>.RibbonItem
            {
                Label = Localizer["Ribbon_Accounts"],
                IconSvg = "<svg><use href='/icons/sprite.svg#accounts'/></svg>",
                Callback = () => { OpenBankAccounts(); return Task.CompletedTask; }
            });
        }
        if (IsEdit && !IsSelfContact)
        {
            relatedItems.Add(new Ribbon<TabId>.RibbonItem
            {
                Label = Localizer["Ribbon_Merge"],
                IconSvg = "<svg><use href='/icons/sprite.svg#merge'/></svg>",
                Disabled = _busy,
                Callback = () => { OpenMergeDialog(); return Task.CompletedTask; }
            });
        }
        if (IsEdit)
        {
            relatedItems.Add(new Ribbon<TabId>.RibbonItem
            {
                Label = Localizer["Ribbon_Postings"],
                IconSvg = "<svg><use href='/icons/sprite.svg#postings'/></svg>",
                Disabled = _busy,
                Callback = () => { OpenPostings(); return Task.CompletedTask; }
            });
        }
        Ribbon<TabId>.RibbonGroup? relatedGroup = null;
        if (relatedItems.Any())
        {
            relatedGroup = new Ribbon<TabId>.RibbonGroup { Title = Localizer["Ribbon_Group_Related"], Items = relatedItems };
        }

        var groups = new List<Ribbon<TabId>.RibbonGroup> { navGroup, editGroup };
        if (relatedGroup != null) groups.Add(relatedGroup);

        _tabs = new()
        {
            new Ribbon<TabId>.RibbonTab<TabId>
            {
                Id = TabId.Contact,
                Title = Localizer["Ribbon_Tab_Contact"],
                Groups = groups
            }
        };
        StateHasChanged();
    }

    private ContactEditModel _model = new();
    private List<CategoryVm> _categories = new();
    private bool _loaded;
    private bool _busy;
    private string? _error;

    private Guid? _prefillDraftId;
    private Guid? _prefillEntryId;

    private bool IsEdit => Id.HasValue;

    protected override async Task OnParametersSetAsync()
    {
        if (CurrentUser.IsAuthenticated)
        {
            ParseQueryParams();
            await LoadCategoriesAsync();

            if (IsEdit)
            {
                var http = ClientFactory.CreateClient("Api");
                var resp = await http.GetAsync($"/api/contacts/{Id}");
                if (resp.IsSuccessStatusCode)
                {
                    var dto = await resp.Content.ReadFromJsonAsync<ContactDto>();
                    if (dto != null)
                    {
                        _model.Name = dto.Name;
                        _model.Type = dto.Type.ToString();
                        _model.CategoryId = dto.CategoryId?.ToString() ?? string.Empty;
                        _model.IsPaymentIntermediary = dto.IsPaymentIntermediary;
                    }
                }
                else if (resp.StatusCode == System.Net.HttpStatusCode.NotFound)
                {
                    _error = Localizer["ErrorNotFound"];
                }
                else
                {
                    _error = Localizer["ErrorLoadFailed"];
                }
                await LoadAliasesAsync();
            }
            else if (!string.IsNullOrWhiteSpace(_pendingPrefillName))
            {
                _model.Name = _pendingPrefillName!;
            }
        }
        _loaded = true;
        BuildRibbon();
    }

    private string? _pendingPrefillName;
    private void ParseQueryParams()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        var prefillName = query.Get("prefillName");
        if (!string.IsNullOrWhiteSpace(prefillName))
        {
            _pendingPrefillName = prefillName;
        }
        if (Guid.TryParse(query.Get("draftId"), out var did)) { _prefillDraftId = did; }
        if (Guid.TryParse(query.Get("entryId"), out var eid)) { _prefillEntryId = eid; }
    }

    private async Task LoadCategoriesAsync()
    {
        var http = ClientFactory.CreateClient("Api");
        var resp = await http.GetAsync("/api/contact-categories");
        if (resp.IsSuccessStatusCode)
        {
            var list = await resp.Content.ReadFromJsonAsync<List<ContactCategoryDto>>() ?? new();
            _categories = list.Select(c => new CategoryVm { Id = c.Id, Name = c.Name }).ToList();
        }
    }

    private async Task SaveAsync()
    {
        _busy = true; _error = null; BuildRibbon();
        try
        {
            var categoryId = Guid.TryParse(_model.CategoryId, out var parsed) ? parsed : (Guid?)null;
            var http = ClientFactory.CreateClient("Api");
            if (IsEdit)
            {
                var update = new { Name = _model.Name.Trim(), Type = Enum.Parse<ContactType>(_model.Type), CategoryId = categoryId, Description = _model.Description, IsPaymentIntermediary = _model.IsPaymentIntermediary };
                var resp = await http.PutAsJsonAsync($"/api/contacts/{Id}", update);
                if (!resp.IsSuccessStatusCode) { _error = Localizer["ErrorSaveFailed"]; }
                else { await AfterSaveAssignToDraftIfNeeded(Id!.Value); }
            }
            else
            {
                var create = new { Name = _model.Name.Trim(), Type = Enum.Parse<ContactType>(_model.Type), CategoryId = categoryId, Description = _model.Description, IsPaymentIntermediary = _model.IsPaymentIntermediary };
                var resp = await http.PostAsJsonAsync("/api/contacts", create);
                if (resp.IsSuccessStatusCode)
                {
                    var dto = await resp.Content.ReadFromJsonAsync<ContactDto>();
                    if (dto != null)
                    {
                        await AfterSaveAssignToDraftIfNeeded(dto.Id);
                    }
                }
                else _error = Localizer["ErrorCreateFailed"];
            }
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        _busy = false; BuildRibbon();
    }

    private async Task AfterSaveAssignToDraftIfNeeded(Guid contactId)
    {
        if (_prefillDraftId.HasValue && _prefillEntryId.HasValue)
        {
            try
            {
                var http = ClientFactory.CreateClient("Api");
                var payload = new { ContactId = (Guid?)contactId };
                await http.PostAsJsonAsync($"/api/statement-drafts/{_prefillDraftId}/entries/{_prefillEntryId}/contact", payload);
            }
            catch { }
            Navigation.NavigateTo($"/statement-drafts/{_prefillDraftId}/entries/{_prefillEntryId}", forceLoad: true);
        }
        else
        {
            if (!IsEdit)
            {
                Navigation.NavigateTo("/contacts", forceLoad: true);
            }
        }
    }

    private async Task DeleteAsync()
    {
        if (!IsEdit) return;
        _busy = true; _error = null; BuildRibbon();
        try
        {
            var http = ClientFactory.CreateClient("Api");
            var resp = await http.DeleteAsync($"/api/contacts/{Id}");
            if (resp.IsSuccessStatusCode) Back(); else _error = Localizer["ErrorDeleteFailed"];
        }
        catch (Exception ex) { _error = ex.Message; }
        _busy = false; BuildRibbon();
    }

    private void Back()
    {
        if (_prefillDraftId.HasValue && _prefillEntryId.HasValue)
        {
            Navigation.NavigateTo($"/statement-drafts/{_prefillDraftId}/entries/{_prefillEntryId}", forceLoad: true);
        }
        else
        {
            Navigation.NavigateTo("/contacts", forceLoad: true);
        }
    }
    private void OpenBankAccounts()
    {
        if (Id.HasValue)
        {
            Navigation.NavigateTo($"/accounts?bankContactId={Id}");
        }
    }
    private void OpenPostings()
    {
        if (Id.HasValue)
        {
            Navigation.NavigateTo($"/postings/contact/{Id}");
        }
    }

    private sealed class ContactEditModel
    {
        [Required, MinLength(2)] public string Name { get; set; } = string.Empty;
        public string Type { get; set; } = ContactType.Person.ToString();
        public string CategoryId { get; set; } = string.Empty;
        public string? Description { get; set; }
        public bool IsPaymentIntermediary { get; set; }
    }

    private sealed class CategoryVm { public Guid Id { get; set; } public string Name { get; set; } = string.Empty; }
    private sealed class ContactCategoryDto { public Guid Id { get; set; } public string Name { get; set; } = string.Empty; }
    private List<AliasVm> _aliases = new();
    private string _newAlias = string.Empty;
    private string? _aliasError;

    private async Task LoadAliasesAsync()
    {
        if (!IsEdit) { _aliases.Clear(); return; }
        var http = ClientFactory.CreateClient("Api");
        var resp = await http.GetAsync($"/api/contacts/{Id}/aliases");
        if (resp.IsSuccessStatusCode)
        {
            var list = await resp.Content.ReadFromJsonAsync<List<AliasDto>>() ?? new();
            _aliases = list.Select(a => new AliasVm { Id = a.Id, Pattern = a.Pattern }).ToList();
        }
    }

    private async Task AddAliasAsync()
    {
        _aliasError = null;
        var pattern = _newAlias.Trim();
        if (string.IsNullOrWhiteSpace(pattern)) { _aliasError = Localizer["ErrorAliasEmpty"]; return; }
        var http = ClientFactory.CreateClient("Api");
        var resp = await http.PostAsJsonAsync($"/api/contacts/{Id}/aliases", new { Pattern = pattern });
        if (resp.IsSuccessStatusCode)
        {
            _newAlias = string.Empty;
            await LoadAliasesAsync();
        }
        else
        {
            _aliasError = await resp.Content.ReadAsStringAsync();
        }
        BuildRibbon();
    }

    private async Task DeleteAliasAsync(Guid aliasId)
    {
        _aliasError = null;
        var http = ClientFactory.CreateClient("Api");
        var resp = await http.DeleteAsync($"/api/contacts/{Id}/aliases/{aliasId}");
        if (resp.IsSuccessStatusCode)
        {
            await LoadAliasesAsync();
        }
        else
        {
            _aliasError = await resp.Content.ReadAsStringAsync();
        }
        BuildRibbon();
    }

    private sealed class AliasVm { public Guid Id { get; set; } public string Pattern { get; set; } = string.Empty; }
    private sealed class AliasDto { public Guid Id { get; set; } public string Pattern { get; set; } = string.Empty; }

    private bool _showMergeDialog;
    private bool IsSelfContact => Enum.Parse<ContactType>(_model.Type) == ContactType.Self;

    private void OpenMergeDialog()
    {
        if (!IsEdit || IsSelfContact)
        {
            return;
        }
        _showMergeDialog = true; BuildRibbon();
    }

    private Task CloseMergeDialog()
    {
        _showMergeDialog = false;
        StateHasChanged();
        BuildRibbon();
        return Task.CompletedTask;
    }

    private async Task PerformMergeAsync(Guid targetId)
    {
        if (!Id.HasValue || targetId == Guid.Empty)
        {
            return;
        }
        try
        {
            var http = ClientFactory.CreateClient("Api");
            var resp = await http.PostAsJsonAsync($"/api/contacts/{Id}/merge", new { targetContactId = targetId });
            if (resp.IsSuccessStatusCode)
            {
                _showMergeDialog = false;
                Navigation.NavigateTo($"/contacts/{targetId}", forceLoad: true);
            }
            else
            {
                var msg = await resp.Content.ReadAsStringAsync();
                _error = $"Merge failed: {msg}";
            }
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        StateHasChanged();
        BuildRibbon();
    }
}
