@page "/contacts/{Id:guid}"
@page "/contacts/new"
@using FinanceManager.Application.Contacts
@using FinanceManager.Domain
@using System.ComponentModel.DataAnnotations
@rendermode InteractiveServer
@inject IHttpClientFactory ClientFactory
@inject NavigationManager Navigation
@inject FinanceManager.Application.ICurrentUserService CurrentUser

<h1>Contact</h1>

@if (!_loaded)
{
    <p>Loading...</p>
}
else if (!CurrentUser.IsAuthenticated)
{
    <p>Please login.</p>
}
else
{
    <div class="action-bar">
        <button type="button" @onclick="Back" aria-label="Back" title="Back" class="icon-btn"><svg><use href="/icons/sprite.svg#back" /></svg></button>
        <button type="button" @onclick="SaveAsync" disabled="@_busy" aria-label="Save" title="Save" class="icon-btn"><svg><use href="/icons/sprite.svg#save" /></svg></button>
        @if (IsEdit)
        {
            <button type="button" @onclick="DeleteAsync" disabled="@_busy" aria-label="Delete" title="Delete" class="icon-btn danger"><svg><use href="/icons/sprite.svg#delete" /></svg></button>
            @if (Enum.Parse<ContactType>(_model.Type) == ContactType.Bank)
            {
                <button type="button" @onclick="OpenBankAccounts" disabled="@_busy" aria-label="Accounts" title="Accounts" class="icon-btn"><svg><use href="/icons/sprite.svg#accounts" /></svg></button>
            }
        }
    </div>
    <EditForm Model="_model" OnValidSubmit="SaveAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div>
            <label>Name</label>
            <InputText @bind-Value="_model.Name" />
            <ValidationMessage For="()=>_model.Name" />
        </div>
        <div>
            <label>Type</label>
            <InputSelect @bind-Value="_model.Type">
                @foreach (var t in Enum.GetValues<ContactType>())
                {
                    <option value="@t">@t</option>
                }
            </InputSelect>
        </div>
        <div>
            <label>Group</label>
            <InputSelect @bind-Value="_model.CategoryId">
                <option value="">-- none --</option>
                @foreach (var g in _categories.OrderBy(c=>c.Name))
                {
                    <option value="@g.Id">@g.Name</option>
                }
            </InputSelect>
        </div>
        <div>
            <label>Description</label>
            <textarea @bind="_model.Description" rows="4" style="width:100%;max-width:520px;"></textarea>
        </div>
        @if (!string.IsNullOrEmpty(_error))
        {
            <div class="error" style="margin-top:.75rem;">@_error</div>
        }
    </EditForm>
}

@code {
    [Parameter] public Guid? Id { get; set; }

    private ContactEditModel _model = new();
    private List<CategoryVm> _categories = new();
    private bool _loaded;
    private bool _busy;
    private string? _error;

    private Guid? _prefillDraftId;
    private Guid? _prefillEntryId;

    private bool IsEdit => Id.HasValue;

    protected override async Task OnParametersSetAsync()
    {
        if (CurrentUser.IsAuthenticated)
        {
            ParseQueryParams();
            await LoadCategoriesAsync();

            if (IsEdit)
            {
                var http = ClientFactory.CreateClient("Api");
                var resp = await http.GetAsync($"/api/contacts/{Id}");
                if (resp.IsSuccessStatusCode)
                {
                    var dto = await resp.Content.ReadFromJsonAsync<ContactDto>();
                    if (dto != null)
                    {
                        _model.Name = dto.Name;
                        _model.Type = dto.Type.ToString();
                        _model.CategoryId = dto.CategoryId?.ToString() ?? string.Empty;
                    }
                }
                else if (resp.StatusCode == System.Net.HttpStatusCode.NotFound)
                {
                    _error = "Not found";
                }
                else
                {
                    _error = "Load failed";
                }
            }
            else if (!string.IsNullOrWhiteSpace(_pendingPrefillName))
            {
                _model.Name = _pendingPrefillName!;
            }
        }
        _loaded = true;
    }

    private string? _pendingPrefillName;
    private void ParseQueryParams()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        var prefillName = query.Get("prefillName");
        if (!string.IsNullOrWhiteSpace(prefillName))
        {
            _pendingPrefillName = prefillName;
        }
        if (Guid.TryParse(query.Get("draftId"), out var did)) { _prefillDraftId = did; }
        if (Guid.TryParse(query.Get("entryId"), out var eid)) { _prefillEntryId = eid; }
    }

    private async Task LoadCategoriesAsync()
    {
        var http = ClientFactory.CreateClient("Api");
        var resp = await http.GetAsync("/api/contact-categories");
        if (resp.IsSuccessStatusCode)
        {
            var list = await resp.Content.ReadFromJsonAsync<List<ContactCategoryDto>>() ?? new();
            _categories = list.Select(c => new CategoryVm { Id = c.Id, Name = c.Name }).ToList();
        }
    }

    private async Task SaveAsync()
    {
        _busy = true; _error = null;
        try
        {
            var categoryId = Guid.TryParse(_model.CategoryId, out var parsed) ? parsed : (Guid?)null;
            var http = ClientFactory.CreateClient("Api");
            if (IsEdit)
            {
                var update = new { Name = _model.Name.Trim(), Type = Enum.Parse<ContactType>(_model.Type), CategoryId = categoryId, Description = _model.Description };
                var resp = await http.PutAsJsonAsync($"/api/contacts/{Id}", update);
                if (!resp.IsSuccessStatusCode) { _error = "Save failed"; }
                else { await AfterSaveAssignToDraftIfNeeded(Id!.Value); }
            }
            else
            {
                var create = new { Name = _model.Name.Trim(), Type = Enum.Parse<ContactType>(_model.Type), CategoryId = categoryId, Description = _model.Description };
                var resp = await http.PostAsJsonAsync("/api/contacts", create);
                if (resp.IsSuccessStatusCode)
                {
                    var dto = await resp.Content.ReadFromJsonAsync<ContactDto>();
                    if (dto != null)
                    {
                        await AfterSaveAssignToDraftIfNeeded(dto.Id);
                    }
                }
                else _error = "Create failed";
            }
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        _busy = false;
    }

    private async Task AfterSaveAssignToDraftIfNeeded(Guid contactId)
    {
        if (_prefillDraftId.HasValue && _prefillEntryId.HasValue)
        {
            try
            {
                var http = ClientFactory.CreateClient("Api");
                var payload = new { ContactId = (Guid?)contactId };
                await http.PostAsJsonAsync($"/api/statement-drafts/{_prefillDraftId}/entries/{_prefillEntryId}/contact", payload);
            }
            catch { }
            // navigate back to draft entry detail
            Navigation.NavigateTo($"/statement-drafts/{_prefillDraftId}/entries/{_prefillEntryId}", forceLoad: true);
        }
        else
        {
            // normal flow: go back to list or stay on detail if editing existing
            if (!IsEdit)
            {
                Navigation.NavigateTo("/contacts", forceLoad: true);
            }
        }
    }

    private async Task DeleteAsync()
    {
        if (!IsEdit) return;
        _busy = true; _error = null;
        try
        {
            var http = ClientFactory.CreateClient("Api");
            var resp = await http.DeleteAsync($"/api/contacts/{Id}");
            if (resp.IsSuccessStatusCode) Back(); else _error = "Delete failed";
        }
        catch (Exception ex) { _error = ex.Message; }
        _busy = false;
    }

    private void Back() => Navigation.NavigateTo("/contacts", forceLoad: true);
    private void OpenBankAccounts()
    {
        if (Id.HasValue)
        {
            Navigation.NavigateTo($"/accounts?bankContactId={Id}");
        }
    }

    private sealed class ContactEditModel
    {
        [Required, MinLength(2)] public string Name { get; set; } = string.Empty;
        public string Type { get; set; } = ContactType.Person.ToString();
        public string CategoryId { get; set; } = string.Empty;
        public string? Description { get; set; }
    }

    private sealed class CategoryVm { public Guid Id { get; set; } public string Name { get; set; } = string.Empty; }
    private sealed class ContactCategoryDto { public Guid Id { get; set; } public string Name { get; set; } = string.Empty; }
}
