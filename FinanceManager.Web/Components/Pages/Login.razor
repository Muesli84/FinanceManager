@page "/login"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@inject IJSRuntime JS
@using FinanceManager.Application.Users
@inject FinanceManager.Application.Users.IUserReadService UserRead
@inject NavigationManager Nav
@inject Microsoft.Extensions.Localization.IStringLocalizer<FinanceManager.Web.Components.Pages.Login> Localizer

<PageTitle>@Localizer["PageTitle"]</PageTitle>

<h1>@Localizer["Heading"]</h1>

@if (!string.IsNullOrEmpty(_error))
{
    <div class="error">@_error</div>
}

<EditForm Model="_model" OnValidSubmit="SubmitAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        <label for="login-user">@Localizer["Label_Username"]</label>
        <InputText id="login-user" @bind-Value="_model.Username" autocomplete="username" />
        <ValidationMessage For="() => _model.Username" />
    </div>
    <div>
        <label for="login-pass">@Localizer["Label_Password"]</label>
        <InputText id="login-pass" @bind-Value="_model.Password" Type="password" autocomplete="current-password" />
        <ValidationMessage For="() => _model.Password" />
    </div>
    <div style="margin-top:1.25rem;">
        <button type="submit" disabled="@_busy">
            @(_busy ? Localizer["Button_Wait"] : Localizer["Button_Login"])
        </button>
    </div>
</EditForm>

<p style="margin-top:1rem;font-size:.8rem;">
    @Localizer["Link_RegisterPrompt"] <a href="/register">@Localizer["Link_RegisterNow"]</a>
</p>

@code {
    private readonly LoginVm _model = new();
    private bool _busy;
    private string? _error;

    protected override async Task OnInitializedAsync()
    {
        if (!await UserRead.HasAnyUsersAsync(CancellationToken.None))
        {
            Nav.NavigateTo("/register", forceLoad: true);
        }
    }

    private async Task SubmitAsync()
    {
        _busy = true;
        _error = null;
        try
        {
            var username = _model.Username.Trim();
            var password = _model.Password;
            var result = await JS.InvokeAsync<AuthJsResult>("fmAuthLogin", username, password);
            if (!result.ok)
            {
                _error = string.IsNullOrWhiteSpace(result.error)
                    ? Localizer["Error_LoginFailed"]
                    : result.error; // Backend-Fehler evtl. später auch mappen
            }
            else
            {
                Nav.NavigateTo("/", forceLoad: true);
            }
        }
        catch (Exception ex)
        {
            _error = string.Format(Localizer["Error_Unexpected"], ex.Message);
        }
        _busy = false;
    }

    private sealed class LoginVm
    {
        [Required, MinLength(3)]
        public string Username { get; set; } = string.Empty;

        [Required, MinLength(6)]
        public string Password { get; set; } = string.Empty;
    }

    private sealed class AuthJsResult
    {
        public bool ok { get; set; }
        public string? error { get; set; }
    }
}
