@page "/reports"
@rendermode InteractiveServer
@inject NavigationManager Nav
@inject IServiceProvider Services
@inject Microsoft.Extensions.Localization.IStringLocalizer<FinanceManager.Web.Components.Pages.ReportsHome> Localizer
@using FinanceManager.Web.Components.Shared
@using FinanceManager.Domain
@using FinanceManager.Domain.Reports
@using FinanceManager.Web.ViewModels

<PageTitle>@Localizer["PageTitle"]</PageTitle>

<Ribbon TTabEnum="ReportsHome.TabId"
        Tabs="_tabs"
        ActiveTab="_activeTab"
        ActiveTabChanged="OnActiveTabChanged" />

<h2 style="margin-top:0;">@Localizer["Heading"]</h2>

@if(_vm?.Loading ?? true)
{
    <p>@Localizer["Loading"]</p>
}
else if(_vm!.Favorites.Count == 0)
{
    <div class="empty-info">@Localizer["NoFavorites"]</div>
}
else
{
    <ul class="fav-grid">
        @foreach(var f in _vm!.Favorites)
        {
            <li>
                <button class="fav-card" @onclick="(()=>OpenFavorite(f.Id))" title="@Localizer["OpenFavorite"]">
                    <div class="fav-name">@f.Name</div>
                    <div class="fav-meta">@Localizer[$"PostingKind_{((PostingKind)f.PostingKind).ToString()}"] • @Localizer[$"Interval_{f.Interval}"]</div>
                </button>
            </li>
        }
    </ul>
}

@code {
    private enum TabId { Reports }
    private List<Ribbon<TabId>.RibbonTab<TabId>> _tabs = new();
    private TabId _activeTab = TabId.Reports;
    private Task OnActiveTabChanged(TabId t){ _activeTab = t; return Task.CompletedTask; }

    private ReportsHomeViewModel? _vm;

    protected override async Task OnInitializedAsync()
    {
        if (_vm is not null)
        {
            _vm.StateChanged -= VmOnStateChanged;
            _vm.AuthenticationRequired -= VmOnAuthenticationRequired;
            await _vm.DisposeAsync();
        }
        _vm = ActivatorUtilities.CreateInstance<ReportsHomeViewModel>(Services);
        _vm.StateChanged += VmOnStateChanged;
        _vm.AuthenticationRequired += VmOnAuthenticationRequired;
        await _vm.InitializeAsync();
        BuildRibbon();
    }

    private void VmOnAuthenticationRequired(object? sender, string? returnUrl)
    {
        var url = "/login";
        Nav.NavigateTo(url, forceLoad: true);
    }

    private void VmOnStateChanged(object? sender, EventArgs e)
    {
        BuildRibbon();
        _ = InvokeAsync(StateHasChanged);
    }

    private void BuildRibbon()
    {
        var groupsDto = _vm?.GetRibbon(Localizer) ?? new List<UiRibbonGroup>();
        var groups = new List<Ribbon<TabId>.RibbonGroup>();
        foreach (var g in groupsDto)
        {
            var items = new List<Ribbon<TabId>.RibbonItem>();
            foreach (var it in g.Items)
            {
                var size = it.Size == UiRibbonItemSize.Large ? Ribbon<TabId>.RibbonItemSize.Large : Ribbon<TabId>.RibbonItemSize.Small;
                items.Add(new Ribbon<TabId>.RibbonItem
                {
                    Label = it.Label,
                    IconSvg = it.IconSvg,
                    Size = size,
                    Disabled = it.Disabled,
                    Callback = () => { HandleRibbonAction(it.Action); return Task.CompletedTask; }
                });
            }
            groups.Add(new Ribbon<TabId>.RibbonGroup { Title = g.Title, Items = items });
        }
        _tabs = new(){ new Ribbon<TabId>.RibbonTab<TabId>{ Id=TabId.Reports, Title=Localizer["Ribbon_Tab"], Groups = groups } };
    }

    private void HandleRibbonAction(string action)
    {
        switch (action)
        {
            case "Reload": _ = _vm!.ReloadAsync(); break;
            case "NewReport": Nav.NavigateTo("/reports/dashboard?edit=true"); break;
        }
    }

    private void OpenFavorite(Guid id)
    {
        Nav.NavigateTo($"/reports/dashboard?favoriteId={id}&edit=false");
    }
}

<style>
.fav-grid { list-style:none; padding:0; margin:0 0 1rem 0; display:grid; grid-template-columns:repeat(auto-fit,minmax(220px,1fr)); gap:.6rem; }
.fav-grid li { }
.fav-card { width:100%; text-align:left; background:#1a1f24; border:1px solid #2b3138; color:#eee; padding:.6rem .7rem; border-radius:.35rem; cursor:pointer; display:flex; flex-direction:column; gap:.25rem; }
.fav-card:hover { background:#20262b; }
.fav-name { font-weight:600; }
.fav-meta { opacity:.7; font-size:.7rem; }
.actions { margin-top:.6rem; }
.btn { background:#2d6cdf; color:#fff; border:0; padding:.45rem .7rem; border-radius:.3rem; cursor:pointer; font-size:.7rem; }
.empty-info { opacity:.7; font-size:.8rem; }
</style>
