@page "/accounts"
@rendermode InteractiveServer
@inject HttpClient Http
@inject NavigationManager Nav
@inject FinanceManager.Application.ICurrentUserService CurrentUser
@using FinanceManager.Domain
@using FinanceManager.Web.Components.Shared
@inject Microsoft.Extensions.Localization.IStringLocalizer<FinanceManager.Web.Components.Pages.Accounts> Localizer
<PageTitle>@Localizer["PageTitle"]</PageTitle>

<Ribbon TTabEnum="Accounts.TabId" Tabs="_tabs" ActiveTab="_activeTab" ActiveTabChanged="OnActiveTabChanged" />

<h1>@Localizer["Title"]</h1>

@if (!_loaded)
{
    <p>@Localizer["Loading"]</p>
}
else if (!CurrentUser.IsAuthenticated)
{
    <p>@Localizer["PleaseLogin"]</p>
}
else
{
    @if (_filterContactId != null)
    {
        <p style="opacity:.75;">@Localizer["FilteredByBankContact"] @_filterContactId</p>
    }
    <div class="table-responsive">
        <table class="fm-table">
            <thead>
                <tr>
                    <th>@Localizer["Col_Name"]</th>
                    <th>@Localizer["Col_Type"]</th>
                    <th>@Localizer["Col_Iban"]</th>
                    <th style="text-align:right;">@Localizer["Col_Balance"]</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var a in _accounts)
                {
                    <tr style="cursor:pointer;" @onclick="() => OpenDetail(a.Id)">
                        <td>@a.Name</td>
                        <td>@a.Type</td>
                        <td>@a.Iban</td>
                        <td style="text-align:right;">@a.CurrentBalance</td>
                    </tr>
                }
                @if (_accounts.Count == 0)
                {
                    <tr><td colspan="4" style="opacity:.6;">@Localizer["NoAccounts"]</td></tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private enum TabId { Accounts }
    private List<Ribbon<TabId>.RibbonTab<TabId>> _tabs = new();
    private TabId _activeTab = TabId.Accounts;
    private Task OnActiveTabChanged(TabId id){ _activeTab = id; return Task.CompletedTask; }

    private bool _loaded;
    private List<AccountVm> _accounts = new();
    private Guid? _filterContactId;

    protected override async Task OnInitializedAsync()
    {
        if (CurrentUser.IsAuthenticated)
        {
            var uri = new Uri(Nav.Uri);
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
            if (Guid.TryParse(query.Get("bankContactId"), out var contactId))
            {
                _filterContactId = contactId;
            }
            await LoadAsync();
        }
        _loaded = true;
        BuildRibbon();
    }

    private void BuildRibbon()
    {
        if (!_loaded || !CurrentUser.IsAuthenticated)
        {
            _tabs = new(); return;
        }
        var actionItems = new List<Ribbon<TabId>.RibbonItem>
        {
            new Ribbon<TabId>.RibbonItem
            {
                Label = Localizer["Ribbon_New"],
                IconSvg = "<svg><use href='/icons/sprite.svg#plus'/></svg>",
                Size = Ribbon<TabId>.RibbonItemSize.Large,
                Callback = () => { CreateNew(); return Task.CompletedTask; }
            }
        };
        if (_filterContactId != null)
        {
            actionItems.Add(new Ribbon<TabId>.RibbonItem
            {
                Label = Localizer["Ribbon_ClearFilter"],
                IconSvg = "<svg><use href='/icons/sprite.svg#clear'/></svg>",
                Callback = () => { ClearFilter(); return Task.CompletedTask; }
            });
        }
        var actions = new Ribbon<TabId>.RibbonGroup { Title = Localizer["Ribbon_Group_Actions"], Items = actionItems };

        _tabs = new()
        {
            new Ribbon<TabId>.RibbonTab<TabId>
            {
                Id = TabId.Accounts,
                Title = Localizer["Ribbon_Tab_Accounts"],
                Groups = new(){ actions }
            }
        };
        StateHasChanged();
    }

    private async Task LoadAsync()
    {
        var url = "/api/accounts";
        if (_filterContactId != null)
        {
            url += $"?bankContactId={_filterContactId}";
        }
        var resp = await Http.GetAsync(url);
        if (resp.IsSuccessStatusCode)
        {
            var list = await resp.Content.ReadFromJsonAsync<List<AccountDto>>() ?? new();
            _accounts = list.Select(d => new AccountVm
            {
                Id = d.Id,
                Name = d.Name,
                Type = d.Type.ToString(),
                Iban = d.Iban,
                CurrentBalance = d.CurrentBalance
            }).ToList();
        }
    }

    private void CreateNew() => Nav.NavigateTo("/accounts/new");
    private void OpenDetail(Guid id) => Nav.NavigateTo($"/accounts/{id}");
    private void ClearFilter()
    {
        _filterContactId = null;
        Nav.NavigateTo("/accounts", forceLoad: true);
    }

    private sealed class AccountVm
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Type { get; set; } = string.Empty;
        public string? Iban { get; set; }
        public decimal CurrentBalance { get; set; }
    }

    private sealed record AccountDto(Guid Id, string Name, AccountType Type, string? Iban, decimal CurrentBalance, Guid BankContactId);
}
