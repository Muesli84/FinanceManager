@page "/accounts"
@rendermode InteractiveServer
@inject HttpClient Http
@inject NavigationManager Nav
@inject FinanceManager.Application.ICurrentUserService CurrentUser
@using FinanceManager.Domain
@using FinanceManager.Web.Components.Shared
@inject Microsoft.Extensions.Localization.IStringLocalizer<FinanceManager.Web.Components.Pages.Accounts> Localizer
@using FinanceManager.Web.ViewModels
@inject IServiceProvider Services
<PageTitle>@Localizer["PageTitle"]</PageTitle>

<Ribbon TTabEnum="Accounts.TabId" Tabs="_tabs" ActiveTab="_activeTab" ActiveTabChanged="OnActiveTabChanged" />

<h1>@Localizer["Title"]</h1>

@if (!(_vm?.Loaded ?? false))
{
    <p>@Localizer["Loading"]</p>
}
else if (!_vm!.IsAuthenticated)
{
    <p>@Localizer["PleaseLogin"]</p>
}
else
{
    @if (_vm.FilterBankContactId != null)
    {
        <p style="opacity:.75;">@Localizer["FilteredByBankContact"] @_vm.FilterBankContactId</p>
    }
    <div class="table-responsive">
        <table class="fm-table">
            <thead>
                <tr>
                    <th>@Localizer["Col_Name"]</th>
                    <th>@Localizer["Col_Type"]</th>
                    <th>@Localizer["Col_Iban"]</th>
                    <th style="text-align:right;">@Localizer["Col_Balance"]</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var a in _vm.Accounts)
                {
                    <tr style="cursor:pointer;" @onclick="() => OpenDetail(a.Id)">
                        <td>@a.Name</td>
                        <td>@a.Type</td>
                        <td>@a.Iban</td>
                        <td style="text-align:right;">@a.CurrentBalance</td>
                    </tr>
                }
                @if (_vm.Accounts.Count == 0)
                {
                    <tr><td colspan="4" style="opacity:.6;">@Localizer["NoAccounts"]</td></tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private enum TabId { Accounts }
    private List<Ribbon<TabId>.RibbonTab<TabId>> _tabs = new();
    private TabId _activeTab = TabId.Accounts;
    private Task OnActiveTabChanged(TabId id){ _activeTab = id; return Task.CompletedTask; }

    private AccountsViewModel? _vm;

    protected override async Task OnInitializedAsync()
    {
        if (_vm is not null)
        {
            _vm.StateChanged -= VmOnStateChanged;
            _vm.AuthenticationRequired -= VmOnAuthenticationRequired;
            await _vm.DisposeAsync();
        }
        _vm = ActivatorUtilities.CreateInstance<AccountsViewModel>(Services);
        _vm.StateChanged += VmOnStateChanged;
        _vm.AuthenticationRequired += VmOnAuthenticationRequired;

        // filter from URL if present
        var uri = new Uri(Nav.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        if (Guid.TryParse(query.Get("bankContactId"), out var contactId))
        {
            _vm.SetFilter(contactId);
        }

        await _vm.InitializeAsync();
        RebuildRibbon();
    }

    private void VmOnAuthenticationRequired(object? sender, string? returnUrl)
    {
        var back = Nav.ToBaseRelativePath(Nav.Uri);
        var url = string.IsNullOrWhiteSpace(back) ? "/login" : $"/login?returnUrl={Uri.EscapeDataString(back)}";
        Nav.NavigateTo(url, forceLoad: true);
    }

    private void VmOnStateChanged(object? sender, EventArgs e)
    {
        RebuildRibbon();
        _ = InvokeAsync(StateHasChanged);
    }

    private void RebuildRibbon()
    {
        var groupsDto = _vm?.GetRibbon(Localizer) ?? new List<UiRibbonGroup>();
        var groups = new List<Ribbon<TabId>.RibbonGroup>();
        foreach (var g in groupsDto)
        {
            var items = new List<Ribbon<TabId>.RibbonItem>();
            foreach (var it in g.Items)
            {
                var size = it.Size == UiRibbonItemSize.Large ? Ribbon<TabId>.RibbonItemSize.Large : Ribbon<TabId>.RibbonItemSize.Small;
                items.Add(new Ribbon<TabId>.RibbonItem
                {
                    Label = it.Label,
                    IconSvg = it.IconSvg,
                    Size = size,
                    Disabled = it.Disabled,
                    Callback = () => { HandleRibbonAction(it.Action); return Task.CompletedTask; }
                });
            }
            groups.Add(new Ribbon<TabId>.RibbonGroup { Title = g.Title, Items = items });
        }
        _tabs = new()
        {
            new Ribbon<TabId>.RibbonTab<TabId>
            {
                Id = TabId.Accounts,
                Title = Localizer["Ribbon_Tab_Accounts"],
                Groups = groups
            }
        };
        StateHasChanged();
    }

    private void HandleRibbonAction(string action)
    {
        switch (action)
        {
            case "New":
                CreateNew();
                break;
            case "ClearFilter":
                ClearFilter();
                break;
        }
    }

    private void CreateNew() => Nav.NavigateTo("/accounts/new");
    private void OpenDetail(Guid id) => Nav.NavigateTo($"/accounts/{id}");
    private void ClearFilter()
    {
        _vm?.SetFilter(null);
        Nav.NavigateTo("/accounts", forceLoad: true);
    }
}
