@page "/"
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveServer
@inject IHttpContextAccessor httpContextAccessor
@inject Microsoft.Extensions.Localization.IStringLocalizer<FinanceManager.Web.Components.Pages.Home> Localizer
@inject HttpClient Http
@inject FinanceManager.Application.ICurrentUserService CurrentUser
@inject NavigationManager Nav
@inject IJSRuntime JS
@using FinanceManager.Web.Components.Shared
@using Microsoft.AspNetCore.Components.Web
<PageTitle>@Localizer["PageTitle"]</PageTitle>

<Ribbon TTabEnum="Home.TabId" Tabs="_tabs" ActiveTab="_activeTab" ActiveTabChanged="OnActiveTabChanged" />

<h1>@Localizer["PageTitle"]</h1>

<HomeNotifications />

@if (_uploadInProgress)
{
    <div class="upload-progress" role="status" aria-live="polite">
        <div class="hdr">
            <span class="title">@Localizer["Upload_Progress_Title"]</span>
            <span class="cnt">@_uploadDone/@_uploadTotal</span>
        </div>
        <div class="bar"><div class="bar-inner" style="width:@UploadPercent%"></div></div>
        @if(!string.IsNullOrWhiteSpace(_currentFileName))
        {
            <div class="file" title="@_currentFileName">@_currentFileName</div>
        }
    </div>
}

@if (_importSuccess && _draftId != null)
{
    <div class="alert alert-success" style="margin-top:1rem;">
        @Localizer["Import_Success"]
        <a href="@($"/statement-drafts/{_draftId}")" class="alert-link">@Localizer["Import_ShowDetails"]</a>
    </div>
}
@if (_splitInfo != null)
{
    <div class="alert" style="margin-top:.6rem;font-size:.7rem;padding:.55rem .75rem;border:1px solid #334;background:#182028;max-width:740px;">
        @if(_splitInfo.EffectiveMonthly)
        {
            <span>@string.Format(Localizer["Import_SplitInfo_Monthly"], _splitInfo.TotalMovements, _splitInfo.DraftCount)</span>
        }
        else
        {
            <span>@string.Format(Localizer["Import_SplitInfo_Fixed"], _splitInfo.TotalMovements, _splitInfo.DraftCount)</span>
        }
        <span style="opacity:.75;display:block;margin-top:.25rem;">@string.Format(Localizer["Import_SplitInfo_Details"], _splitInfo.Mode, _splitInfo.MaxEntriesPerDraft, _splitInfo.LargestDraftSize)</span>
    </div>
}

<div class="kpi-grid">
    <HomeKpiGrid EditMode="@_kpiEditMode" />
</div>

@if(_showHiddenInput)
{
    <InputFile id="home-import-input" OnChange="OnFileChanged" multiple style="display:none;" />
}

@code {
    private enum TabId { Home }
    private List<Ribbon<TabId>.RibbonTab<TabId>> _tabs = new();
    private TabId _activeTab = TabId.Home;
    private Task OnActiveTabChanged(TabId id){ _activeTab = id; return Task.CompletedTask; }

    private void BuildRibbon()
    {
        if (!CurrentUser.IsAuthenticated)
        {
            _tabs = new(); return;
        }
        var importGroup = new Ribbon<TabId>.RibbonGroup
        {
            Title = Localizer["Ribbon_Group_Import"],
            Items = new()
            {
                new Ribbon<TabId>.RibbonItem
                {
                    Label = Localizer["Ribbon_Import"],
                    IconSvg = "<svg><use href='/icons/sprite.svg#upload'/></svg>",
                    Size = Ribbon<TabId>.RibbonItemSize.Large,
                    Callback = () => { TriggerImport(); return Task.CompletedTask; }
                }
            }
        };
        var kpiGroup = new Ribbon<TabId>.RibbonGroup
        {
            Title = Localizer["Ribbon_Group_Kpi"],
            Items = new()
            {
                new Ribbon<TabId>.RibbonItem
                {
                    Label = _kpiEditMode ? Localizer["Ribbon_Kpi_Done"] : Localizer["Ribbon_Kpi_Edit"],
                    IconSvg = _kpiEditMode ? "<svg><use href='/icons/sprite.svg#check'/></svg>" : "<svg><use href='/icons/sprite.svg#edit'/></svg>",
                    Size = Ribbon<TabId>.RibbonItemSize.Large,
                    Callback = () => { ToggleKpiEditMode(); return Task.CompletedTask; }
                }
            }
        };
        _tabs = new()
        {
            new Ribbon<TabId>.RibbonTab<TabId>
            {
                Id = TabId.Home,
                Title = Localizer["Ribbon_Tab_Home"],
                Groups = new(){ importGroup, kpiGroup }
            }
        };
        StateHasChanged();
    }

    private bool _importSuccess;
    private Guid? _draftId;
    private bool _showHiddenInput;

    private SplitInfoDto? _splitInfo;

    // Upload progress state
    private bool _uploadInProgress;
    private int _uploadTotal;
    private int _uploadDone;
    private string? _currentFileName;
    private int UploadPercent => _uploadTotal == 0 ? 0 : (int)Math.Round((double)(_uploadDone * 100m / _uploadTotal));

    // --- Home KPI edit toggle (state bleibt hier) ---
    private bool _kpiEditMode;

    protected override async Task OnInitializedAsync()
    {
        BuildRibbon();
        await Task.CompletedTask;
    }

    private void ToggleKpiEditMode()
    {
        _kpiEditMode = !_kpiEditMode;
        BuildRibbon();
    }

    private void TriggerImport()
    {
        if(!_showHiddenInput)
        {
            _showHiddenInput = true; StateHasChanged();
            _ = Task.Run(async () => { await Task.Delay(50); await JSInvokeClick(); });
        }
        else
        {
            _ = JSInvokeClick();
        }
    }

    private async Task JSInvokeClick()
    {
        try
        {
            await JS.InvokeVoidAsync("eval", "document.getElementById('home-import-input')?.click();");
        }
        catch { }
    }

    private async Task OnFileChanged(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles();
        if (files == null || files.Count == 0)
        {
            return;
        }

        _uploadInProgress = true;
        _uploadTotal = files.Count;
        _uploadDone = 0;
        _currentFileName = null;
        StateHasChanged();

        Guid? firstDraftId = null;
        SplitInfoDto? lastSplitInfo = null;

        foreach (var file in files)
        {
            _currentFileName = file.Name;
            StateHasChanged();

            using var content = new MultipartFormDataContent();
            await using var stream = file.OpenReadStream(10_000_000);
            content.Add(new StreamContent(stream), "file", file.Name);
            var resp = await Http.PostAsync("/api/statement-drafts/upload", content);
            if (resp.IsSuccessStatusCode)
            {
                var result = await resp.Content.ReadFromJsonAsync<UploadResultDto>();
                if (result?.FirstDraft != null && !firstDraftId.HasValue)
                {
                    firstDraftId = result.FirstDraft.DraftId;
                }
                if (result?.SplitInfo != null)
                {
                    lastSplitInfo = result.SplitInfo;
                }
            }

            _uploadDone++;
            StateHasChanged();
        }

        _uploadInProgress = false;
        _currentFileName = null;

        if (firstDraftId.HasValue)
        {
            _draftId = firstDraftId.Value;
            _importSuccess = true;
        }
        _splitInfo = lastSplitInfo;
        StateHasChanged();
    }

    // Inline DTOs used by upload widget
    private sealed record UploadResultDto(StatementDraftDto? FirstDraft, SplitInfoDto? SplitInfo);
    private sealed record SplitInfoDto(string Mode, bool EffectiveMonthly, int DraftCount, int TotalMovements, int MaxEntriesPerDraft, int LargestDraftSize, int MonthlyThreshold);
    private sealed record StatementDraftDto(Guid DraftId, string OriginalFileName, Guid? DetectedAccountId, List<StatementDraftEntryDto> Entries);
    private sealed record StatementDraftEntryDto(Guid TempId, DateTime BookingDate, decimal Amount, string Subject);
}

<style>
/* Upload progress */
.upload-progress { margin-top:.75rem; max-width:740px; border:1px solid #2a323a; background:#141a20; border-radius:8px; padding:.6rem .75rem; }
.upload-progress .hdr { display:flex; justify-content:space-between; align-items:center; gap:.5rem; margin-bottom:.4rem; }
.upload-progress .title { font-weight:600; font-size:.85rem; }
.upload-progress .cnt { font-size:.8rem; opacity:.8; }
.upload-progress .bar { width:100%; height:8px; background:#0f1419; border:1px solid #2a323a; border-radius:6px; overflow:hidden; }
.upload-progress .bar-inner { height:100%; background:#2d6cdf; width:0; transition:width .2s ease; }
.upload-progress .file { margin-top:.35rem; font-size:.7rem; opacity:.8; white-space:nowrap; overflow:hidden; text-overflow:ellipsis; }
</style>
