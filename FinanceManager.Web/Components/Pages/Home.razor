@page "/"
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveServer
@inject IHttpContextAccessor httpContextAccessor
@inject Microsoft.Extensions.Localization.IStringLocalizer<FinanceManager.Web.Components.Pages.Home> Localizer
@inject HttpClient Http
@inject FinanceManager.Application.ICurrentUserService CurrentUser
@inject NavigationManager Nav
@inject IJSRuntime JS
@using FinanceManager.Web.Components.Shared
<PageTitle>@Localizer["PageTitle"]</PageTitle>

<Ribbon TTabEnum="Home.TabId" Tabs="_tabs" ActiveTab="_activeTab" ActiveTabChanged="OnActiveTabChanged" />

<h1>@Localizer["PageTitle"]</h1>

@if (_importSuccess && _draftId != null)
{
    <div class="alert alert-success" style="margin-top:1rem;">
        @Localizer["Import_Success"]
        <a href="@($"/statement-drafts/{_draftId}")" class="alert-link">@Localizer["Import_ShowDetails"]</a>
    </div>
}
@if (_splitInfo != null)
{
    <div class="alert" style="margin-top:.6rem;font-size:.7rem;padding:.55rem .75rem;border:1px solid #334;background:#182028;max-width:740px;">
        @if(_splitInfo.EffectiveMonthly)
        {
            <span>@string.Format(Localizer["Import_SplitInfo_Monthly"], _splitInfo.TotalMovements, _splitInfo.DraftCount)</span>
        }
        else
        {
            <span>@string.Format(Localizer["Import_SplitInfo_Fixed"], _splitInfo.TotalMovements, _splitInfo.DraftCount)</span>
        }
        <span style="opacity:.75;display:block;margin-top:.25rem;">@string.Format(Localizer["Import_SplitInfo_Details"], _splitInfo.Mode, _splitInfo.MaxEntriesPerDraft, _splitInfo.LargestDraftSize)</span>
    </div>
}

<p>@Localizer["KPI_Placeholders"]</p>

@if(_showHiddenInput)
{
    <InputFile id="home-import-input" OnChange="OnFileChanged" style="display:none;" />
}

@code {
    private enum TabId { Home }
    private List<Ribbon<TabId>.RibbonTab<TabId>> _tabs = new();
    private TabId _activeTab = TabId.Home;
    private Task OnActiveTabChanged(TabId id){ _activeTab = id; return Task.CompletedTask; }

    private void BuildRibbon()
    {
        if (!CurrentUser.IsAuthenticated)
        {
            _tabs = new(); return;
        }
        var importGroup = new Ribbon<TabId>.RibbonGroup
        {
            Title = Localizer["Ribbon_Group_Import"],
            Items = new()
            {
                new Ribbon<TabId>.RibbonItem
                {
                    Label = Localizer["Ribbon_Import"],
                    IconSvg = "<svg><use href='/icons/sprite.svg#upload'/></svg>",
                    Size = Ribbon<TabId>.RibbonItemSize.Large,
                    Callback = () => { TriggerImport(); return Task.CompletedTask; }
                }
            }
        };
        _tabs = new()
        {
            new Ribbon<TabId>.RibbonTab<TabId>
            {
                Id = TabId.Home,
                Title = Localizer["Ribbon_Tab_Home"],
                Groups = new(){ importGroup }
            }
        };
        StateHasChanged();
    }

    private bool _importSuccess;
    private Guid? _draftId;
    private bool _showHiddenInput;

    private SplitInfoDto? _splitInfo;

    protected override void OnInitialized()
    {
        BuildRibbon();
    }

    private void TriggerImport()
    {
        if(!_showHiddenInput)
        {
            _showHiddenInput = true; StateHasChanged();
            _ = Task.Run(async () => { await Task.Delay(50); await JSInvokeClick(); });
        }
        else
        {
            _ = JSInvokeClick();
        }
    }

    private async Task JSInvokeClick()
    {
        try
        {
            await JS.InvokeVoidAsync("eval", "document.getElementById('home-import-input')?.click();");
        }
        catch { }
    }

    private async Task OnFileChanged(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null) { return; }
        using var content = new MultipartFormDataContent();
        await using var stream = file.OpenReadStream(10_000_000);
        content.Add(new StreamContent(stream), "file", file.Name);
        var resp = await Http.PostAsync("/api/statement-drafts/upload", content);
        if (resp.IsSuccessStatusCode)
        {
            var result = await resp.Content.ReadFromJsonAsync<UploadResultDto>();
            if (result?.FirstDraft != null)
            {
                _draftId = result.FirstDraft.DraftId; // match backend property
                _importSuccess = true;
            }
            _splitInfo = result?.SplitInfo;
        }
        StateHasChanged();
    }

    private sealed record UploadResultDto(StatementDraftDto? FirstDraft, SplitInfoDto? SplitInfo);
    private sealed record SplitInfoDto(string Mode, bool EffectiveMonthly, int DraftCount, int TotalMovements, int MaxEntriesPerDraft, int LargestDraftSize, int MonthlyThreshold);
    private sealed record StatementDraftDto(Guid DraftId, string OriginalFileName, Guid? DetectedAccountId, List<StatementDraftEntryDto> Entries);
    private sealed record StatementDraftEntryDto(Guid TempId, DateTime BookingDate, decimal Amount, string Subject);
}
