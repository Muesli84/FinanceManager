@page "/setup"
@rendermode InteractiveServer
@using FinanceManager.Shared.Dtos
@inject NavigationManager Navigation
@inject Microsoft.Extensions.Localization.IStringLocalizer<FinanceManager.Web.Components.Pages.Setup> Localizer
@using FinanceManager.Web.Components.Shared
@using Microsoft.AspNetCore.WebUtilities

<PageTitle>@Localizer["PageTitle"]</PageTitle>

<Ribbon TTabEnum="Setup.TabId" Tabs="_tabs" ActiveTab="_activeTab" ActiveTabChanged="OnActiveTabChanged" />

<h3>@Localizer["Heading"]</h3>

<BackgroundTaskStatusPanel TaskListEndpoint="/api/background-tasks/active" PollInterval="1500" AllowedTypes="new[]{ BackgroundTaskType.BackupRestore }" />

<div class="fm-tabs">
    <button class="fm-tab @(IsActiveSection(TabBackup)?"active":null)" @onclick="() => Activate(TabBackup)">@Localizer["Tab_Backup"]</button>
    <button class="fm-tab @(IsActiveSection(TabImportSplit)?"active":null)" @onclick="() => Activate(TabImportSplit)">@Localizer["ImportSplit_TabTitle"]</button>
    <button class="fm-tab @(IsActiveSection(TabNotifications)?"active":null)" @onclick="() => Activate(TabNotifications)">@Localizer["Notifications_TabTitle"]</button>
    <button class="fm-tab @(IsActiveSection(TabProfile)?"active":null)" @onclick="() => Activate(TabProfile)">@Localizer["Tab_Profile"]</button>
    <button class="fm-tab @(IsActiveSection(TabIpBlocks)?"active":null)" @onclick="() => Activate(TabIpBlocks)">@Localizer["Tab_IpBlocks"]</button>
    <button class="fm-tab @(IsActiveSection(TabAttachmentCategories)?"active":null)" @onclick="() => Activate(TabAttachmentCategories)">@Localizer["Tab_AttachmentCategories"]</button>
    <button class="fm-tab @(IsActiveSection(TabLegacy)?"active":null)" @onclick="() => Activate(TabLegacy)">@Localizer["Tab_LegacyImport"]</button>
</div>

<div class="fm-tab-panel">
    @switch(_activeSection)
    {
        case TabBackup:
            <SetupBackupTab />
            break;
        case TabImportSplit:
            <SetupImportSplitTab />
            break;
        case TabNotifications:
            <SetupNotificationsTab />
            break;
        case TabProfile:
            <SetupProfileTab />
            break;
        case TabIpBlocks:
            <SetupIpBlockTab />
            break;
        case TabAttachmentCategories:
            <SetupAttachmentCategoriesTab />
            break;
        case TabLegacy:
            <SetupLegacyImportTab />
            break;
    }
</div>

<style>
    .fm-tabs { display:flex; gap:.25rem; margin-bottom:1rem; flex-wrap:wrap; }
    .fm-tab { background:#2a2d34; border:1px solid #3a3d45; padding:.45rem .9rem; cursor:pointer; font:inherit; color:#fff; border-radius:.35rem .35rem 0 0; }
    .fm-tab.active { background:#39404c; font-weight:600; }
    .fm-tab-panel { border:1px solid #3a3d45; padding:1rem; border-radius:0 .35rem .35rem .35rem; background:#2a2d34; }
</style>

@code {
    // Ribbon state (single tab for now)
    private enum TabId { Setup }
    private List<Ribbon<TabId>.RibbonTab<TabId>> _tabs = new();
    private TabId _activeTab = TabId.Setup;
    private Task OnActiveTabChanged(TabId id){ _activeTab = id; return Task.CompletedTask; }

    // Internal section tabs (string based)
    private const string TabBackup = "backup";
    private const string TabImportSplit = "import-split";
    private const string TabNotifications = "notifications";
    private const string TabProfile = "profile";
    private const string TabIpBlocks = "ip-blocks";
    private const string TabAttachmentCategories = "attachment-categories";
    private const string TabLegacy = "legacy";
    private string _activeSection = TabBackup;

    protected override void OnInitialized()
    {
        ApplyQueryParameters();
        BuildRibbon();
    }

    protected override void OnParametersSet()
    {
        // React to navigation with different query parameters
        ApplyQueryParameters();
    }

    private void ApplyQueryParameters()
    {
        try
        {
            var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
            var query = QueryHelpers.ParseQuery(uri.Query);
            if (query.TryGetValue("section", out var sectionVals))
            {
                var section = sectionVals.ToString();
                if (IsValidSection(section))
                {
                    _activeSection = section;
                    return;
                }
            }
            // If a focus query exists (e.g., focus=<ip>) but no explicit section, open IP blocks
            if (query.ContainsKey("focus"))
            {
                _activeSection = TabIpBlocks;
            }
        }
        catch
        {
            // ignore malformed query
        }
    }

    private static bool IsValidSection(string section)
        => section == TabBackup
        || section == TabImportSplit
        || section == TabNotifications
        || section == TabProfile
        || section == TabIpBlocks
        || section == TabAttachmentCategories
        || section == TabLegacy;

    private void BuildRibbon()
    {
        _tabs = new()
        {
            new Ribbon<TabId>.RibbonTab<TabId>
            {
                Id = TabId.Setup,
                Title = Localizer["Ribbon_Tab_Setup"],
                Groups = new()
                {
                    new Ribbon<TabId>.RibbonGroup
                    {
                        Title = Localizer["Ribbon_Group_Navigation"],
                        Items = new()
                        {
                            new Ribbon<TabId>.RibbonItem
                            {
                                Label = Localizer["Ribbon_Back"],
                                IconSvg = "<svg><use href='/icons/sprite.svg#back'/></svg>",
                                Size = Ribbon<TabId>.RibbonItemSize.Large,
                                Callback = () => { Back(); return Task.CompletedTask; }
                            }
                        }
                    }
                }
            }
        };
    }

    private void Activate(string section)
    {
        if (_activeSection != section)
        {
            _activeSection = section;
        }
    }
    private bool IsActiveSection(string section) => _activeSection == section;
    private void Back() => Navigation.NavigateTo("/");
}