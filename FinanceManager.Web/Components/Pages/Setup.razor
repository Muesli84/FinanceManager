@page "/setup"
@rendermode InteractiveServer
@using FinanceManager.Shared.Dtos
@inject NavigationManager Navigation
@inject Microsoft.Extensions.Localization.IStringLocalizer<FinanceManager.Web.Components.Pages.Setup> Localizer
@using FinanceManager.Web.Components.Shared
@using Microsoft.AspNetCore.WebUtilities
@inject IServiceProvider Services
@using FinanceManager.Web.ViewModels
@using Microsoft.Extensions.DependencyInjection

<PageTitle>@Localizer["PageTitle"]</PageTitle>

<Ribbon TTabEnum="Setup.TabId" Tabs="_tabs" ActiveTab="_activeTab" ActiveTabChanged="OnActiveTabChanged" />

<h3>@Localizer["Heading"]</h3>

<BackgroundTaskStatusPanel TaskListEndpoint="/api/background-tasks/active" PollInterval="1500" AllowedTypes="new[]{ BackgroundTaskType.BackupRestore, BackgroundTaskType.RebuildAggregates }" />

<div class="fm-tabs">
    <button class="fm-tab @(_vm!.IsActiveSection(SetupViewModel.TabBackup)?"active":null)" @onclick="() => Activate(SetupViewModel.TabBackup)">@Localizer["Tab_Backup"]</button>
    <button class="fm-tab @(_vm!.IsActiveSection(SetupViewModel.TabImportSplit)?"active":null)" @onclick="() => Activate(SetupViewModel.TabImportSplit)">@Localizer["ImportSplit_TabTitle"]</button>
    <button class="fm-tab @(_vm!.IsActiveSection(SetupViewModel.TabNotifications)?"active":null)" @onclick="() => Activate(SetupViewModel.TabNotifications)">@Localizer["Notifications_TabTitle"]</button>
    <button class="fm-tab @(_vm!.IsActiveSection(SetupViewModel.TabProfile)?"active":null)" @onclick="() => Activate(SetupViewModel.TabProfile)">@Localizer["Tab_Profile"]</button>
    <button class="fm-tab @(_vm!.IsActiveSection(SetupViewModel.TabIpBlocks)?"active":null)" @onclick="() => Activate(SetupViewModel.TabIpBlocks)">@Localizer["Tab_IpBlocks"]</button>
    <button class="fm-tab @(_vm!.IsActiveSection(SetupViewModel.TabAttachmentCategories)?"active":null)" @onclick="() => Activate(SetupViewModel.TabAttachmentCategories)">@Localizer["Tab_AttachmentCategories"]</button>
</div>

<div class="fm-tab-panel">
    <div style="margin-bottom:.6rem; display:flex; gap:.5rem; align-items:center;">
        <button class="btn" @onclick="QueueRebuildAggregates">@Localizer["Button_RebuildAggregates"]</button>
        <small style="opacity:.7;">@Localizer["Hint_RebuildAggregates"]</small>
    </div>
    @switch(_vm!.ActiveSection)
    {
        case SetupViewModel.TabBackup:
            <SetupBackupTab />
            break;
        case SetupViewModel.TabImportSplit:
            <SetupImportSplitTab />
            break;
        case SetupViewModel.TabNotifications:
            <SetupNotificationsTab />
            break;
        case SetupViewModel.TabProfile:
            <SetupProfileTab />
            break;
        case SetupViewModel.TabIpBlocks:
            <SetupIpBlockTab />
            break;
        case SetupViewModel.TabAttachmentCategories:
            <SetupAttachmentCategoriesTab />
            break;
    }
</div>

<style>
    .fm-tabs { display:flex; gap:.25rem; margin-bottom:1rem; flex-wrap:wrap; }
    .fm-tab { background:#2a2d34; border:1px solid #3a3d45; padding:.45rem .9rem; cursor:pointer; font:inherit; color:#fff; border-radius:.35rem .35rem 0 0; }
    .fm-tab.active { background:#39404c; font-weight:600; }
    .fm-tab-panel { border:1px solid #3a3d45; padding:1rem; border-radius:0 .35rem .35rem .35rem; background:#2a2d34; }
</style>

@code {
    // Ribbon state (single tab for now)
    private enum TabId { Setup }
    private List<Ribbon<TabId>.RibbonTab<TabId>> _tabs = new();
    private TabId _activeTab = TabId.Setup;
    private Task OnActiveTabChanged(TabId id){ _activeTab = id; return Task.CompletedTask; }

    private SetupViewModel? _vm;

    protected override void OnInitialized()
    {
        _vm = ActivatorUtilities.CreateInstance<SetupViewModel>(Services);
        _vm.StateChanged += (_, __) => { _ = InvokeAsync(StateHasChanged); };
        _vm.ApplyQueryFromUri(Navigation.Uri);
        BuildRibbon();
    }

    protected override void OnParametersSet()
    {
        // React to navigation with different query parameters
        _vm!.ApplyQueryFromUri(Navigation.Uri);
    }

    private void BuildRibbon()
    {
        _tabs = new()
        {
            new Ribbon<TabId>.RibbonTab<TabId>
            {
                Id = TabId.Setup,
                Title = Localizer["Ribbon_Tab_Setup"],
                Groups = new()
                {
                    new Ribbon<TabId>.RibbonGroup
                    {
                        Title = Localizer["Ribbon_Group_Navigation"],
                        Items = new()
                        {
                            new Ribbon<TabId>.RibbonItem
                            {
                                Label = Localizer["Ribbon_Back"],
                                IconSvg = "<svg><use href='/icons/sprite.svg#back'/></svg>",
                                Size = Ribbon<TabId>.RibbonItemSize.Large,
                                Callback = () => { Back(); return Task.CompletedTask; }
                            }
                        }
                    }
                }
            }
        };
    }

    private void Activate(string section)
    {
        _vm!.Activate(section);
    }
    private bool IsActiveSection(string section) => _vm!.IsActiveSection(section);
    private void Back() => Navigation.NavigateTo("/");

    [Inject] private HttpClient Http { get; set; } = default!;
    private async Task QueueRebuildAggregates()
    {
        try
        {
            await Http.PostAsync("/api/aggregates/rebuild", content: null);
        }
        catch { }
    }
}