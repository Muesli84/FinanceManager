@page "/securities/{SecurityId:guid}/prices"
@rendermode InteractiveServer
@inject HttpClient Http
@inject NavigationManager Nav
@inject IJSRuntime JS
@using Microsoft.Extensions.Localization
@using FinanceManager.Web.Components.Shared
@using FinanceManager.Shared.Dtos
@using System.Net.Http.Json
@inject IStringLocalizer<Components.Pages.SecurityPrices> Localizer
<PageTitle>@Localizer["PageTitle"]</PageTitle>

<Ribbon TTabEnum="SecurityPrices.TabId" Tabs="_tabs" ActiveTab="_activeTab" ActiveTabChanged="OnActiveTabChanged" />

<h3>@Localizer["Title"]</h3>

@if (_enqueueOk)
{
    <div class="alert info" role="status">@Localizer["Backfill_Started"]</div>
}

<BackgroundTaskStatusPanel AllowedTypes="new[]{ BackgroundTaskType.SecurityPricesBackfill }" />

@if (_showBackfillDialog)
{
    <div class="modal-overlay" @onclick="(()=> _showBackfillDialog = false)">
        <div class="modal" @onclick:stopPropagation="true">
            <h3 style="margin-top:0;">@Localizer["Dlg_Backfill_Title"]</h3>
            <div class="row">
                <label>@Localizer["Dlg_From"]</label>
                <input type="date"
                       @bind-value="_fromDate"
                       @bind-value:event="onchange" />
            </div>
            <div class="row" style="margin-top:.5rem;">
                <label>@Localizer["Dlg_To"]</label>
                <input type="date" @bind-value="_toDate" @bind-value:event="onchange" />
            </div>
            @if (!string.IsNullOrWhiteSpace(_dlgError))
            {
                <div style="color:#e66; font-size:.8rem; margin-top:.5rem;">@_dlgError</div>
            }
            <div class="dialog-actions">
                <button class="btn" disabled="@_submitting" @onclick="ConfirmBackfillAsync">@(_submitting ? Localizer["Dlg_Starting"] : Localizer["Dlg_Start"])</button>
                <button class="btn secondary" disabled="@_submitting" @onclick="(()=> _showBackfillDialog = false)">@Localizer["Dialog_Cancel"]</button>
            </div>
        </div>
    </div>
}

@if(_loading && _items.Count==0)
{
    <p>@Localizer["Loading"]</p>
}
else
{
    <table class="fm-table wide">
        <thead>
            <tr>
                <th style="width:9rem;">@Localizer["Th_Date"]</th>
                <th style="width:9rem;text-align:right;">@Localizer["Th_Close"]</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var p in _items)
            {
                <tr>
                    <td>@p.Date.ToShortDateString()</td>
                    <td style="text-align:right;">@p.Close</td>
                </tr>
            }
            @if(_loading)
            {
                <tr><td colspan="2" style="opacity:.6;">@Localizer["Loading"]</td></tr>
            }
        </tbody>
    </table>
    <div style="margin-top:.5rem;">
        @if(_canLoadMore)
        {
            <div @ref="_sentinel" class="infinite-sentinel" aria-hidden="true"></div>
        }
        else if(_items.Count==0 && !_loading)
        {
            <span style="opacity:.6;font-size:.75rem;">@Localizer["NoEntries"]</span>
        }
        else if(!_canLoadMore)
        {
            <div class="end-of-list" style="opacity:.6;font-size:.65rem;">@Localizer["EndOfList"]</div>
        }
    </div>
}

@code {
    [Parameter] public Guid SecurityId { get; set; }
    private const int PageSize = 100;
    private bool _loading;
    private bool _canLoadMore = true;
    private int _skip;
    private List<PriceDto> _items = new();

    // Backfill dialog state
    private bool _showBackfillDialog;
    private DateTime? _fromDate;
    private DateTime? _toDate;
    private bool _submitting;
    private string? _dlgError;
    private bool _enqueueOk;

    private ElementReference _sentinel;
    private DotNetObjectReference<SecurityPrices>? _selfRef;
    private bool _observerAttached;

    private enum TabId { Prices }
    private List<Ribbon<TabId>.RibbonTab<TabId>> _tabs = new();
    private TabId _activeTab = TabId.Prices;
    private Task OnActiveTabChanged(TabId id){ _activeTab = id; return Task.CompletedTask; }

    private sealed record PriceDto(DateTime Date, decimal Close);

    protected override async Task OnParametersSetAsync()
    {
        if(_items.Count==0)
        {
            await LoadMoreAsync();
        }
        BuildRibbon();
    }

    private void BuildRibbon()
    {
        var nav = new Ribbon<TabId>.RibbonGroup
        {
            Title = Localizer["Ribbon_Group_Navigation"],
            Items = new()
            {
                new Ribbon<TabId>.RibbonItem
                {
                    Label = Localizer["Ribbon_Back"],
                    IconSvg = "<svg><use href='/icons/sprite.svg#back'/></svg>",
                    Size = Ribbon<TabId>.RibbonItemSize.Large,
                    Callback = () => { Back(); return Task.CompletedTask; }
                }
            }
        };
        var actions = new Ribbon<TabId>.RibbonGroup
        {
            Title = Localizer["Ribbon_Group_Actions"],
            Items = new()
            {
                new Ribbon<TabId>.RibbonItem
                {
                    Label = Localizer["Ribbon_Backfill"],
                    IconSvg = "<svg><use href='/icons/sprite.svg#postings'/></svg>",
                    Size = Ribbon<TabId>.RibbonItemSize.Large,
                    Disabled = _loading,
                    Callback = () => { OpenBackfillDialog(); return Task.CompletedTask; }
                }
            }
        };
        _tabs = new()
        {
            new Ribbon<TabId>.RibbonTab<TabId>{ Id = TabId.Prices, Title = Localizer["Ribbon_Tab_Prices"], Groups = new(){ nav, actions } }
        };
        StateHasChanged();
    }

    private void OpenBackfillDialog()
    {
        // Defaults: last 2 years until yesterday
        var end = DateTime.UtcNow.Date.AddDays(-1);
        var start = end.AddYears(-2);
        _fromDate = start;
        _toDate = end;
        _dlgError = null; _submitting = false; _enqueueOk = false;
        _showBackfillDialog = true;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_observerAttached || !_canLoadMore || _loading)
        {
            return;
        }
        if (_sentinel.Context is null)
        {
            return;
        }
        try
        {
            _selfRef ??= DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("fmInfinite.observe", _sentinel, _selfRef, null);
            _observerAttached = true;
        }
        catch (JSException)
        {
            await Task.Yield();
            StateHasChanged();
        }
    }

    [JSInvokable]
    public async Task LoadMoreFromJs()
    {
        await LoadMoreAsync();
        if (_canLoadMore)
        {
            await JS.InvokeVoidAsync("fmInfinite.refresh");
        }
        else
        {
            StateHasChanged();
        }
    }

    private async Task LoadMoreAsync()
    {
        if(_loading || !_canLoadMore) return;
        _loading = true;
        try
        {
            var resp = await Http.GetAsync($"/api/securities/{SecurityId}/prices?skip={_skip}&take={PageSize}");
            if(resp.IsSuccessStatusCode)
            {
                var chunk = await resp.Content.ReadFromJsonAsync<List<PriceDto>>() ?? new();
                _items.AddRange(chunk);
                _skip += chunk.Count;
                if(chunk.Count < PageSize) _canLoadMore = false;
            }
        }
        finally { _loading=false; StateHasChanged(); }
    }

    private async Task ConfirmBackfillAsync()
    {
        if (_submitting) { return; }
        _dlgError = null;
        if (!_fromDate.HasValue || !_toDate.HasValue)
        {
            _dlgError = Localizer["Dlg_InvalidDates"];
            StateHasChanged();
            return;
        }
        var from = _fromDate.Value.Date;
        var to = _toDate.Value.Date;
        if (from > to)
        {
            _dlgError = Localizer["Dlg_FromAfterTo"];
            StateHasChanged();
            return;
        }
        if (to > DateTime.UtcNow.Date)
        {
            _dlgError = Localizer["Dlg_ToInFuture"];
            StateHasChanged();
            return;
        }
        _submitting = true;
        try
        {
            var payload = new { SecurityId = (Guid?)SecurityId, FromDateUtc = (DateTime?)from, ToDateUtc = (DateTime?)to };
            var resp = await Http.PostAsJsonAsync("/api/securities/backfill", payload);
            if (!resp.IsSuccessStatusCode)
            {
                var err = await resp.Content.ReadAsStringAsync();
                _dlgError = string.IsNullOrWhiteSpace(err) ? Localizer["Dlg_EnqueueFailed"] : err;
                return;
            }
            _showBackfillDialog = false;
            _enqueueOk = true;
        }
        catch
        {
            _dlgError = Localizer["Dlg_EnqueueFailed"];
        }
        finally
        {
            _submitting = false;
            StateHasChanged();
        }
    }

    private void Back() => Nav.NavigateTo($"/securities/{SecurityId}");
}

<style>
.modal-overlay { position:fixed; inset:0; background:rgba(0,0,0,.5); display:flex; align-items:center; justify-content:center; z-index:1000; }
.modal { background:#141a20; border:1px solid #2a323a; border-radius:8px; padding:1rem; box-shadow:0 10px 30px rgba(0,0,0,.6); width:min(520px, 90vw); max-width:90vw; overflow:auto; }
.row { display:flex; flex-direction:column; gap:.25rem; }
.modal input[type="date"] { width:100%; max-width:100%; box-sizing:border-box; }
.dialog-actions { display:flex; gap:.5rem; justify-content:flex-end; margin-top:.75rem; }
.btn { background:#2d6cdf; color:#fff; border:0; border-radius:6px; padding:.4rem .75rem; cursor:pointer; }
.btn.secondary { background:transparent; border:1px solid #2a323a; color:#cbd5e1; }
.alert.info { border:1px solid #29425f; background:#0f1419; color:#9ec1ff; border-radius:6px; padding:.5rem .75rem; margin:.5rem 0; font-size:.85rem; }
</style>
