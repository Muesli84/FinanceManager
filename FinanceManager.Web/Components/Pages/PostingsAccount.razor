@page "/postings/account/{AccountId:guid}"
@rendermode InteractiveServer
@inject HttpClient Http
@inject NavigationManager Nav
@inject IJSRuntime JS
@using FinanceManager.Web.Components.Shared
@inject Microsoft.Extensions.Localization.IStringLocalizer<FinanceManager.Web.Components.Pages.PostingsAccount> Localizer
@using FinanceManager.Domain.Attachments
<PageTitle>@Localizer["PageTitle"]</PageTitle>

<Ribbon TTabEnum="PostingsAccount.TabId" Tabs="_tabs" ActiveTab="_activeTab" ActiveTabChanged="OnActiveTabChanged" />

@if (_exporting)
{
    <div class="small-loading" style="margin:.5rem 0;">@Localizer["Loading"]</div>
}

<h3>@Localizer["Title"]</h3>
<div style="margin-bottom:.75rem;display:flex;gap:.6rem;flex-wrap:wrap;align-items:center;">
    <input placeholder='@Localizer["SearchPlaceholder"]' @bind="_search" @bind:after="OnSearchChanged" style="min-width:220px;" />
    <div style="display:flex;align-items:center;gap:.25rem;font-size:.7rem;">
        <label>@Localizer["From"]:</label>
        <InputDate @bind-Value="_from" @bind-Value:after="(()=>OnRangeChanged())" />
        <label>@Localizer["To"]:</label>
        <InputDate @bind-Value="_to" @bind-Value:after="(()=>OnRangeChanged())" />
    </div>
</div>
@if(_loading && _items.Count==0)
{
    <p>@Localizer["Loading"]</p>
}
else
{
    <table class="fm-table wide">
        <thead>
            <tr>
                <th style="width:7rem;">@Localizer["Th_Date"]</th>
                <th style="width:7rem;text-align:right;">@Localizer["Th_Amount"]</th>
                <th style="width:6rem;">@Localizer["Th_Kind"]</th>
                <th style="width:18%;">@Localizer["Th_Recipient"]</th>
                <th style="width:22%;">@Localizer["Th_Subject"]</th>
                <th>@Localizer["Th_Description"]</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var p in _items)
            {
                var selected = _selectedPostingId == p.Id;
                <tr style="cursor:pointer;@(selected?"background:#1f2834;":"")" @onclick="(()=> SelectRowAsync(p.Id))">
                    <td>@p.BookingDate.ToShortDateString()</td>
                    <td style="text-align:right;">@p.Amount</td>
                    <td>@(p.Kind == PostingKind.Security && p.SecuritySubType!=null ? $"Security-{p.SecuritySubType}" : p.Kind.ToString())</td>
                    <td class="wrap">@(string.IsNullOrWhiteSpace(p.RecipientName)?"-":p.RecipientName)</td>
                    <td class="wrap">@(string.IsNullOrWhiteSpace(p.Subject)?"-":p.Subject)</td>
                    <td class="wrap">@(string.IsNullOrWhiteSpace(p.Description)?"-":p.Description)</td>
                </tr>
            }
            @if(_loading)
            {
                <tr><td colspan="6" style="opacity:.6;">@Localizer["Loading"]</td></tr>
            }
        </tbody>
    </table>
    <div style="margin-top:.5rem;">
        @if(_canLoadMore)
        {
            <div @ref="_sentinel" class="infinite-sentinel" aria-hidden="true"></div>
        }
        else if(_items.Count==0 && !_loading)
        {
            <span style="opacity:.6;font-size:.75rem;">@Localizer["NoItems"]</span>
        }
        else if(!_canLoadMore)
        {
            <div class="end-of-list" style="opacity:.6;font-size:.65rem;">@Localizer["EndOfList"]</div>
        }
    </div>
}

@if (_showAttachments && _attachmentPostingId != null)
{
    <div class="split-center" @onclick="(()=> _showAttachments = false)">
        <div class="split-dialog" style="max-width:90vH;" @onclick:stopPropagation="true">
            <div style="display:flex;align-items:center;justify-content:space-between;margin-bottom:.5rem;">
                <h3 style="margin:0;font-size:1rem;">@Localizer["Attachments_Title"]</h3>
                <button class="icon-btn" title='@Localizer["Btn_Close"]' @onclick="(()=> _showAttachments=false)"><svg><use href="/icons/sprite.svg#clear" /></svg></button>
            </div>
            <AttachmentsPanel ParentKind="@AttachmentEntityKind.Posting" ParentId="@_attachmentPostingId.Value" />
        </div>
    </div>
}

@code {
    [Parameter] public Guid AccountId { get; set; }
    [SupplyParameterFromQuery(Name="back")] public string? BackNav { get; set; }
    private const int PageSize = 50;
    private bool _loading; private bool _canLoadMore = true; private int _skip;
    private List<PostingDto> _items = new();

    private ElementReference _sentinel;
    private DotNetObjectReference<PostingsAccount>? _selfRef;
    private bool _observerAttached;
    private string _search = string.Empty;
    private CancellationTokenSource? _searchCts;
    private DateTime? _from; private DateTime? _to;

    // Attachments overlay state
    private bool _showAttachments;
    private Guid? _attachmentPostingId;

    // Row selection state
    private Guid? _selectedPostingId;

    // Resolved links for the selected posting (from GroupId API)
    private Guid? _linkedAccountId, _linkedContactId, _linkedPlanId, _linkedSecurityId;
    private bool _linksLoading;

    private bool _exporting;

    private static bool HasId(Guid? id) => id.HasValue && id.Value != Guid.Empty;
    private string BuildBackValue() => Uri.EscapeDataString("/" + Nav.ToBaseRelativePath(Nav.Uri));

    private async Task SelectRowAsync(Guid id)
    {
        if (_selectedPostingId == id)
        {
            _selectedPostingId = null;
            _linkedAccountId = _linkedContactId = _linkedPlanId = _linkedSecurityId = null;
            BuildRibbon();
            return;
        }
        _selectedPostingId = id;
        await ResolveSelectedLinksAsync();
        BuildRibbon();
    }

    private async Task ResolveSelectedLinksAsync()
    {
        _linkedAccountId = _linkedContactId = _linkedPlanId = _linkedSecurityId = null;
        var sel = _items.FirstOrDefault(i => i.Id == _selectedPostingId);
        if (sel == null) { return; }
        // Fallback to own ids if no group
        if (sel.GroupId == Guid.Empty)
        {
            _linkedAccountId = sel.AccountId; _linkedContactId = sel.ContactId; _linkedPlanId = sel.SavingsPlanId; _linkedSecurityId = sel.SecurityId;
            return;
        }
        try
        {
            _linksLoading = true;
            var dto = await Http.GetFromJsonAsync<GroupLinksResponse>($"/api/postings/group/{sel.GroupId}");
            _linkedAccountId = dto?.AccountId; _linkedContactId = dto?.ContactId; _linkedPlanId = dto?.SavingsPlanId; _linkedSecurityId = dto?.SecurityId;
        }
        catch { /* ignore and keep nulls */ }
        finally { _linksLoading = false; }
    }

    private void OpenAttachmentsFromRibbon()
    {
        if (_selectedPostingId == null) { return; }
        _attachmentPostingId = _selectedPostingId;
        _showAttachments = true;
        StateHasChanged();
    }

    private void OpenLinkedAccount()
    {
        if (!HasId(_linkedAccountId)) { return; }
        var back = BuildBackValue();
        Nav.NavigateTo($"/accounts/{_linkedAccountId}?back={back}");
    }
    private void OpenLinkedContact()
    {
        if (!HasId(_linkedContactId)) { return; }
        var back = BuildBackValue();
        Nav.NavigateTo($"/contacts/{_linkedContactId}?back={back}");
    }
    private void OpenLinkedPlan()
    {
        if (!HasId(_linkedPlanId)) { return; }
        var back = BuildBackValue();
        Nav.NavigateTo($"/savings-plans/{_linkedPlanId}?back={back}");
    }
    private void OpenLinkedSecurity()
    {
        if (!HasId(_linkedSecurityId)) { return; }
        var back = BuildBackValue();
        Nav.NavigateTo($"/securities/{_linkedSecurityId}?back={back}");
    }

    private async Task ExportAsync(string format)
    {
        if (_exporting) { return; }
        _exporting = true; StateHasChanged();
        try
        {
            var parts = new List<string>();
            parts.Add($"format={Uri.EscapeDataString(format)}");
            if (!string.IsNullOrWhiteSpace(_search)) { parts.Add($"q={Uri.EscapeDataString(_search)}"); }
            if (_from.HasValue) { parts.Add($"from={_from:yyyy-MM-dd}"); }
            if (_to.HasValue) { parts.Add($"to={_to:yyyy-MM-dd}"); }
            var qs = parts.Count > 0 ? ("?" + string.Join('&', parts)) : string.Empty;
            var url = $"/api/postings/account/{AccountId}/export{qs}";
            var js = $@"(async function(){{
                try{{
                    const resp = await fetch({System.Text.Json.JsonSerializer.Serialize(url)}, {{ method:'GET', credentials:'same-origin' }});
                    if(!resp.ok){{ throw new Error(await resp.text()); }}
                    const blob = await resp.blob();
                    let fileName = 'export';
                    const cd = resp.headers.get('content-disposition');
                    if(cd){{
                        const m = cd.match(/filename\*=UTF-8''([^;]+)|filename=""?([^"";]+)""?/i);
                        if(m){{ fileName = decodeURIComponent(m[1]||m[2]); }}
                    }}
                    const a = document.createElement('a');
                    a.href = URL.createObjectURL(blob);
                    a.download = fileName; a.style.display='none';
                    document.body.appendChild(a); a.click();
                    setTimeout(()=>{{ URL.revokeObjectURL(a.href); document.body.removeChild(a); }}, 200);
                    return true;
                }}catch(e){{ console.error(e); return false; }}
            }})()";
            await JS.InvokeAsync<object>("eval", js);
        }
        finally { _exporting = false; StateHasChanged(); }
    }

    // Ribbon state
    private enum TabId { Postings }
    private List<Ribbon<TabId>.RibbonTab<TabId>> _tabs = new();
    private TabId _activeTab = TabId.Postings;
    private Task OnActiveTabChanged(TabId id){ _activeTab = id; return Task.CompletedTask; }

    private void BuildRibbon()
    {
        var nav = new Ribbon<TabId>.RibbonGroup
        {
            Title = Localizer["Ribbon_Group_Navigation"],
            Items = new()
            {
                new Ribbon<TabId>.RibbonItem
                {
                    Label = Localizer["Ribbon_Back"],
                    IconSvg = "<svg><use href='/icons/sprite.svg#back'/></svg>",
                    Size = Ribbon<TabId>.RibbonItemSize.Large,
                    Callback = () => { Back(); return Task.CompletedTask; }
                }
            }
        };
        var filterItems = new List<Ribbon<TabId>.RibbonItem>
        {
            new Ribbon<TabId>.RibbonItem
            {
                Label = Localizer["Ribbon_ClearSearch"],
                IconSvg = "<svg><use href='/icons/sprite.svg#clear'/></svg>",
                Disabled = string.IsNullOrWhiteSpace(_search),
                Callback = () => { ClearSearch(); return Task.CompletedTask; }
            }
        };
        if (_from.HasValue || _to.HasValue)
        {
            filterItems.Add(new Ribbon<TabId>.RibbonItem
            {
                Label = Localizer["Ribbon_ClearRange"],
                IconSvg = "<svg><use href='/icons/sprite.svg#clear'/></svg>",
                Callback = () => { ClearRange(); return Task.CompletedTask; }
            });
        }
        var filter = new Ribbon<TabId>.RibbonGroup { Title = Localizer["Ribbon_Group_Filter"], Items = filterItems };

        var related = new Ribbon<TabId>.RibbonGroup
        {
            Title = Localizer["Ribbon_Group_Related"],
            Items = new()
            {
                new Ribbon<TabId>.RibbonItem
                {
                    Label = Localizer["Ribbon_Attachments"],
                    IconSvg = "<svg><use href='/icons/sprite.svg#attachment'/></svg>",
                    Disabled = _selectedPostingId == null,
                    Callback = () => { OpenAttachmentsFromRibbon(); return Task.CompletedTask; }
                }
            }
        };

        var export = new Ribbon<TabId>.RibbonGroup
        {
            Title = Localizer["Ribbon_Group_Export"],
            Items = new()
            {
                new Ribbon<TabId>.RibbonItem
                {
                    Label = Localizer["Ribbon_ExportCsv"],
                    IconSvg = "<svg><use href='/icons/sprite.svg#download'/></svg>",
                    Disabled = _loading || _exporting,
                    Callback = () => ExportAsync("csv")
                },
                new Ribbon<TabId>.RibbonItem
                {
                    Label = Localizer["Ribbon_ExportExcel"],
                    IconSvg = "<svg><use href='/icons/sprite.svg#download'/></svg>",
                    Disabled = _loading || _exporting,
                    Callback = () => ExportAsync("xlsx")
                }
            }
        };

        var linked = new Ribbon<TabId>.RibbonGroup
        {
            Title = Localizer["Ribbon_Group_Linked"],
            Items = new()
            {
                new Ribbon<TabId>.RibbonItem
                {
                    Label = Localizer["Ribbon_OpenAccount"],
                    IconSvg = "<svg><use href='/icons/sprite.svg#external'/></svg>",
                    Disabled = _selectedPostingId == null || _linksLoading || !HasId(_linkedAccountId),
                    Callback = () => { OpenLinkedAccount(); return Task.CompletedTask; }
                },
                new Ribbon<TabId>.RibbonItem
                {
                    Label = Localizer["Ribbon_OpenContact"],
                    IconSvg = "<svg><use href='/icons/sprite.svg#external'/></svg>",
                    Disabled = _selectedPostingId == null || _linksLoading || !HasId(_linkedContactId),
                    Callback = () => { OpenLinkedContact(); return Task.CompletedTask; }
                },
                new Ribbon<TabId>.RibbonItem
                {
                    Label = Localizer["Ribbon_OpenSavingsPlan"],
                    IconSvg = "<svg><use href='/icons/sprite.svg#external'/></svg>",
                    Disabled = _selectedPostingId == null || _linksLoading || !HasId(_linkedPlanId),
                    Callback = () => { OpenLinkedPlan(); return Task.CompletedTask; }
                },
                new Ribbon<TabId>.RibbonItem
                {
                    Label = Localizer["Ribbon_OpenSecurity"],
                    IconSvg = "<svg><use href='/icons/sprite.svg#external'/></svg>",
                    Disabled = _selectedPostingId == null || _linksLoading || !HasId(_linkedSecurityId),
                    Callback = () => { OpenLinkedSecurity(); return Task.CompletedTask; }
                }
            }
        };

        _tabs = new(){ new Ribbon<TabId>.RibbonTab<TabId>{ Id = TabId.Postings, Title = Localizer["Ribbon_Tab_Postings"], Groups = new(){ nav, filter, related, export, linked } } };
        StateHasChanged();
    }

    private enum PostingKind { Bank=0, Contact=1, SavingsPlan=2, Security=3 }
    private enum SecurityPostingSubType { Trade=0, Fee=1, Tax=2, Dividend=3 }
    private sealed record PostingDto(Guid Id, DateTime BookingDate, decimal Amount, PostingKind Kind, Guid? AccountId, Guid? ContactId, Guid? SavingsPlanId, Guid? SecurityId, Guid? GroupId, Guid SourceId, string? Subject, string? RecipientName, string? Description, SecurityPostingSubType? SecuritySubType);
    private sealed record GroupLinksResponse(Guid? AccountId, Guid? ContactId, Guid? SavingsPlanId, Guid? SecurityId);

    protected override async Task OnParametersSetAsync()
    {
        if(_items.Count==0)
        {
            await LoadMoreAsync();
        }
        BuildRibbon();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_observerAttached || !_canLoadMore || _loading) { return; }
        if (_sentinel.Context is null) { return; }
        try
        {
            _selfRef ??= DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("fmInfinite.observe", _sentinel, _selfRef, null);
            _observerAttached = true;
        }
        catch (JSException)
        {
            await Task.Yield();
            StateHasChanged();
        }
    }

    private void OnSearchChanged()
    {
        _searchCts?.Cancel();
        var cts = new CancellationTokenSource();
        _searchCts = cts;
        _ = Task.Run(async () =>
        {
            try
            {
                await Task.Delay(350, cts.Token); // debounce
                if (cts.IsCancellationRequested) { return; }
                await InvokeAsync(async () =>
                {
                    ResetAndSearch();
                    await LoadMoreAsync();
                    BuildRibbon();
                });
            }
            catch (TaskCanceledException) { }
        });
    }

    private void OnRangeChanged()
    {
        ResetAndSearch();
        _ = LoadMoreAsync();
        BuildRibbon();
    }

    private void ClearRange()
    {
        _from = null; _to = null; OnRangeChanged();
    }

    private void ClearSearch()
    {
        if (string.IsNullOrWhiteSpace(_search)) { return; }
        _search = string.Empty;
        ResetAndSearch();
        _ = LoadMoreAsync();
        BuildRibbon();
    }

    private void ResetAndSearch()
    {
        _items.Clear();
        _skip = 0;
        _canLoadMore = true;
        _observerAttached = false; // reattach for new sentinel
        _selectedPostingId = null;
        _linkedAccountId = _linkedContactId = _linkedPlanId = _linkedSecurityId = null;
    }

    [JSInvokable]
    public async Task LoadMoreFromJs()
    {
        await LoadMoreAsync();
        if (_canLoadMore) { await JS.InvokeVoidAsync("fmInfinite.refresh"); }
        else { StateHasChanged(); }
    }

    private async Task LoadMoreAsync()
    {
        if(_loading || !_canLoadMore) return;
        _loading = true;
        try
        {
            var query = new List<string>();
            query.Add($"skip={_skip}");
            query.Add($"take={PageSize}");
            if(!string.IsNullOrWhiteSpace(_search)) query.Add($"q={Uri.EscapeDataString(_search)}");
            if(_from.HasValue) query.Add($"from={_from:yyyy-MM-dd}");
            if(_to.HasValue) query.Add($"to={_to:yyyy-MM-dd}");
            var qs = string.Join('&', query);
            var resp = await Http.GetAsync($"/api/postings/account/{AccountId}?{qs}");
            if(resp.IsSuccessStatusCode)
            {
                var chunk = await resp.Content.ReadFromJsonAsync<List<PostingDto>>() ?? new();
                _items.AddRange(chunk);
                _skip += chunk.Count;
                if(chunk.Count < PageSize) _canLoadMore = false;
            }
        }
        finally { _loading=false; StateHasChanged(); }
    }

    private void Back()
    {
        if (!string.IsNullOrWhiteSpace(BackNav))
        {
            Nav.NavigateTo(BackNav!);
            return;
        }
        Nav.NavigateTo($"/accounts/{AccountId}");
    }
}
