@using System.Net.Http.Json
@using FinanceManager.Shared.Dtos
@inject IHttpClientFactory ClientFactory
@inject IJSRuntime JS
@inject Microsoft.Extensions.Localization.IStringLocalizer<FinanceManager.Web.Components.Pages.SetupProfileTab> Localizer
@inject IServiceProvider Services
@using FinanceManager.Web.ViewModels
@using Microsoft.Extensions.DependencyInjection

<div>
  <h4 style="margin-top:0;">@Localizer["TabTitle"]</h4>

  @if (_vm!.Loading)
  {
      <div>@Localizer["Msg_Loading"]</div>
  }
  else if (!string.IsNullOrWhiteSpace(_vm!.Error))
  {
      <div class="error">@_vm!.Error</div>
      <button class="icon-btn" @onclick="(()=> _vm!.LoadAsync())" title="@Localizer["Btn_Retry"]">
          <svg class="icon"><use href="icons/sprite.svg#refresh" /></svg>
      </button>
  }
  else
  {
      <div class="form-grid">
          <div class="form-row">
              <label for="lang">@Localizer["Label_Language"]</label>
              <select id="lang" @bind="_vm!.Model.PreferredLanguage" @bind:after="(()=> _vm!.OnChanged())">
                  <option value="">@Localizer["Language_Auto"]</option>
                  <option value="de">Deutsch (de)</option>
                  <option value="en">English (en)</option>
              </select>
              <label for="lang" style="opacity:.8;">@Localizer["Help_Language"]</label>
          </div>
          <div class="form-row">
              <label for="tz">@Localizer["Label_TimeZone"]</label>
              <input id="tz" type="text" @bind="_vm!.Model.TimeZoneId" @bind:after="(()=> _vm!.OnChanged())" placeholder="Europe/Berlin" />
              <div style="display:flex;gap:.5rem;align-items:center;">
                  <small style="opacity:.8;">@Localizer["Help_TimeZone"]</small>
                  <button type="button" class="icon-btn" @onclick="DetectFromBrowserAsync" title="@Localizer["Btn_Detect"]">
                      <svg class="icon"><use href="icons/sprite.svg#refresh" /></svg>
                  </button>
              </div>
          </div>

          <div class="form-row">
              <label>@Localizer["Label_AlphaVantageKey"]</label>
              <div style="display:flex;gap:.5rem;align-items:center;flex-wrap:wrap;">
                  <input type="password" placeholder="@Localizer["Placeholder_AlphaVantageKey"]" @bind="_vm!.KeyInput" @bind:after="(()=> _vm!.OnChanged())" style="min-width:280px;" />
                  <small style="opacity:.8;">@(_vm!.HasKey ? Localizer["Msg_KeyPresent"] : Localizer["Msg_KeyMissing"])</small>
                  <button type="button" class="icon-btn" @onclick="(()=> _vm!.ClearKey())" title="@Localizer["Btn_ClearKey"]">
                      <svg class="icon"><use href="icons/sprite.svg#clear" /></svg>
                  </button>
              </div>
          </div>
          <div class="form-row">
              <label>@Localizer["Label_ShareKey"]</label>
              <div style="display:flex;gap:.5rem;align-items:center;">
                  <input id="share-key" type="checkbox" @bind="_vm!.ShareKey" @bind:after="(()=> _vm!.OnChanged())" />
                  <label for="share-key" style="opacity:.8;">@Localizer["Help_ShareKey"]</label>
              </div>
          </div>
      </div>

      <div style="margin-top:1rem;display:flex;gap:.5rem;">
          <button type="button" class="icon-btn" disabled="@(!_vm!.Dirty || _vm!.Saving)" @onclick="SaveAsync" title="@Localizer["Btn_Save"]">
              <svg class="icon"><use href="icons/sprite.svg#save" /></svg>
          </button>
          <button type="button" class="icon-btn" disabled="@(!_vm!.Dirty || _vm!.Saving)" title="@Localizer["Btn_Reset"]" @onclick="Reset">
              <svg class="icon"><use href="icons/sprite.svg#undo" /></svg>
          </button>
      </div>

      @if (_vm!.SavedOk)
      {
          <div class="success" style="margin-top:.5rem;">@Localizer["SaveSuccess"]</div>
      }
      else if (!string.IsNullOrWhiteSpace(_vm!.SaveError))
      {
          <div class="error" style="margin-top:.5rem;">@_vm!.SaveError</div>
      }
  }
</div>

@code {
    private SetupProfileViewModel? _vm;
    private IJSObjectReference? _module;

    protected override async Task OnInitializedAsync()
    {
        _vm = ActivatorUtilities.CreateInstance<SetupProfileViewModel>(Services);
        _vm.StateChanged += (_, __) => { _ = InvokeAsync(StateHasChanged); };
        await _vm.InitializeAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await JS.InvokeAsync<IJSObjectReference>("import", "/js/profile.js");
        }
    }

    private async Task DetectFromBrowserAsync()
    {
        try
        {
            if (_module != null)
            {
                var lang = await _module.InvokeAsync<string>("getLocale");
                var tz = await _module.InvokeAsync<string>("getTimeZone");
                _vm!.SetDetected(lang, tz);
             }
         }
         catch { }
     }

    private Task SaveAsync() => _vm!.SaveAsync();

    private void ClearKey() => _vm!.ClearKey();

    private void Reset() => _vm!.Reset();
}
