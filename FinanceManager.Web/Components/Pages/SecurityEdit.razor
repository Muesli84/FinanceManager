@page "/securities/new"
@page "/securities/{Id:guid}"
@rendermode InteractiveServer
@inject IHttpClientFactory ClientFactory
@inject NavigationManager Nav
@using FinanceManager.Shared.Dtos
@using System.ComponentModel.DataAnnotations
@using Microsoft.Extensions.Localization
@using FinanceManager.Web.Components.Shared
@inject IStringLocalizer<Components.Pages.SecurityEdit> Localizer
<PageTitle>@Localizer["PageTitle"]</PageTitle>

<Ribbon TTabEnum="SecurityEdit.TabId" Tabs="_tabs" ActiveTab="_activeTab" ActiveTabChanged="OnActiveTabChanged" />

<h3>@(IsEdit? Localizer["TitleEdit"] : Localizer["TitleNew"])</h3>

<EditForm Model="_edit" OnValidSubmit="SaveAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div style="display:grid;grid-template-columns:repeat(auto-fit,minmax(240px,1fr));gap:1rem;max-width:860px;">
        <div>
            <label>@Localizer["LabelName"]</label>
            <InputText @bind-Value="_edit.Name" @bind-Value:after="(()=>BuildRibbon())" />
            <ValidationMessage For="()=>_edit.Name" />
        </div>
        <div>
            <label>@Localizer["LabelIdentifier"]</label>
            <InputText @bind-Value="_edit.Identifier" @bind-Value:after="(()=>BuildRibbon())" />
            <ValidationMessage For="()=>_edit.Identifier" />
        </div>
        <div>
            <label>@Localizer["LabelCurrencyCode"]</label>
            <InputText @bind-Value="_edit.CurrencyCode" />
            <ValidationMessage For="() => _edit.CurrencyCode" />
        </div>
        <div>
            <label>@Localizer["LabelAlphaVantage"]</label>
            <InputText @bind-Value="_edit.AlphaVantageCode" />
        </div>
        <div>
            <label>@Localizer["LabelCategory"]</label>
            <InputSelect @bind-Value="_edit.CategoryId">
                <option value="">--</option>
                @foreach(var c in _categories)
                {
                    <option value="@c.Id">@c.Name</option>
                }
            </InputSelect>
        </div>
        <div style="grid-column:1/-1;">
            <label>@Localizer["LabelDescription"]</label>
            <textarea rows="4" style="width:100%;" @bind="_edit.Description"></textarea>
        </div>
        <div style="grid-column:1/-1;font-size:.8rem;opacity:.6;">
            @Localizer["LabelStatus"]: @(_model.IsActive? Localizer["StatusActive"] : Localizer["StatusArchived"]) 
        </div>
        @if(!string.IsNullOrEmpty(_error))
        {
            <div style="grid-column:1/-1;color:#e66;font-size:.8rem;">@_error</div>
        }
    </div>
</EditForm>

@if (IsEdit)
{
    <div style="margin-top:1.2rem;">
        <AggregateBarChart Endpoint="@($"/api/securities/{Id}/aggregates")" Title="@Localizer["Chart_Title_Security"]" />
    </div>
}

@code {
    [Parameter] public Guid? Id { get; set; }
    private bool IsEdit => Id.HasValue;
    private SecurityVm _model = new();
    private SecurityEditModel _edit = new();
    private string? _error; private bool _loaded;
    private List<SecurityCategoryDto> _categories = new();
    private Guid? _prefillDraftId; private Guid? _prefillEntryId; private string? _pendingPrefillName;

    // Ribbon state
    private enum TabId { Security }
    private List<Ribbon<TabId>.RibbonTab<TabId>> _tabs = new();
    private TabId _activeTab = TabId.Security;
    private Task OnActiveTabChanged(TabId id){ _activeTab = id; return Task.CompletedTask; }

    private void BuildRibbon()
    {
        var navGroup = new Ribbon<TabId>.RibbonGroup
        {
            Title = Localizer["Ribbon_Group_Navigation"],
            Items = new()
            {
                new Ribbon<TabId>.RibbonItem
                {
                    Label = Localizer["Ribbon_Back"],
                    IconSvg = "<svg><use href='/icons/sprite.svg#back'/></svg>",
                    Size = Ribbon<TabId>.RibbonItemSize.Large,
                    Callback = () => { Back(); return Task.CompletedTask; }
                }
            }
        };
        var editItems = new List<Ribbon<TabId>.RibbonItem>
        {
            new Ribbon<TabId>.RibbonItem
            {
                Label = Localizer["Ribbon_Save"],
                IconSvg = "<svg><use href='/icons/sprite.svg#save'/></svg>",
                Size = Ribbon<TabId>.RibbonItemSize.Large,
                Disabled = string.IsNullOrWhiteSpace(_edit.Name) || _edit.Name.Trim().Length < 2 || string.IsNullOrWhiteSpace(_edit.Identifier) || _edit.Identifier.Trim().Length < 3,
                Callback = () => { _ = SaveAsync(); return Task.CompletedTask; }
            }
        };
        if (IsEdit)
        {
            editItems.Add(new Ribbon<TabId>.RibbonItem
            {
                Label = Localizer["Ribbon_Archive"],
                IconSvg = "<svg><use href='/icons/sprite.svg#archive'/></svg>",
                Disabled = !_loaded || !_model.IsActive,
                Callback = () => { _ = ArchiveAsync(); return Task.CompletedTask; }
            });
            editItems.Add(new Ribbon<TabId>.RibbonItem
            {
                Label = Localizer["Ribbon_Delete"],
                IconSvg = "<svg><use href='/icons/sprite.svg#delete'/></svg>",
                Disabled = !_loaded || _model.IsActive,
                Callback = () => { _ = DeleteAsync(); return Task.CompletedTask; }
            });
        }
        var editGroup = new Ribbon<TabId>.RibbonGroup { Title = Localizer["Ribbon_Group_Edit"], Items = editItems };

        Ribbon<TabId>.RibbonGroup? relatedGroup = null;
        if (IsEdit)
        {
            relatedGroup = new Ribbon<TabId>.RibbonGroup
            {
                Title = Localizer["Ribbon_Group_Related"],
                Items = new()
                {
                    new Ribbon<TabId>.RibbonItem
                    {
                        Label = Localizer["Ribbon_Postings"],
                        IconSvg = "<svg><use href='/icons/sprite.svg#postings'/></svg>",
                        Disabled = !_loaded,
                        Callback = () => { OpenPostings(); return Task.CompletedTask; }
                    },
                    new Ribbon<TabId>.RibbonItem
                    {
                        Label = Localizer["Ribbon_Prices"],
                        IconSvg = "<svg><use href='/icons/sprite.svg#postings'/></svg>",
                        Disabled = !_loaded,
                        Callback = () => { OpenPrices(); return Task.CompletedTask; }
                    }
                }
            };
        }

        var groups = new List<Ribbon<TabId>.RibbonGroup>{ navGroup, editGroup };
        if (relatedGroup != null) groups.Add(relatedGroup);

        _tabs = new()
        {
            new Ribbon<TabId>.RibbonTab<TabId>
            {
                Id = TabId.Security,
                Title = Localizer["Ribbon_Tab_Security"],
                Groups = groups
            }
        };
        StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {
        ParseQueryParams();
        await LoadCategoriesAsync();
        if (IsEdit)
        {
            var http = ClientFactory.CreateClient("Api");
            var resp = await http.GetAsync($"/api/securities/{Id}");
            if (resp.IsSuccessStatusCode)
            {
                var dto = await resp.Content.ReadFromJsonAsync<SecurityDto>();
                if (dto != null)
                {
                    _model = new SecurityVm(dto);
                    _edit.Name = dto.Name; _edit.Identifier = dto.Identifier; _edit.Description = dto.Description; _edit.AlphaVantageCode = dto.AlphaVantageCode; _edit.CurrencyCode = dto.CurrencyCode; _edit.CategoryId = dto.CategoryId;
                    _loaded = true;
                }
            }
            else
            {
                _error = Localizer["ErrorNotFound"]; _loaded = false;
            }
        }
        else
        {
            _model = new SecurityVm(); _loaded = true;
            if (!string.IsNullOrWhiteSpace(_pendingPrefillName)) { _edit.Name = _pendingPrefillName!; }
        }
        BuildRibbon();
    }

    private void ParseQueryParams()
    {
        var uri = Nav.ToAbsoluteUri(Nav.Uri);
        if (!string.IsNullOrEmpty(uri.Query))
        {
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
            if (Guid.TryParse(query.Get("draftId"), out var did)) { _prefillDraftId = did; }
            if (Guid.TryParse(query.Get("entryId"), out var eid)) { _prefillEntryId = eid; }
            var prefillName = query.Get("prefillName");
            if (!string.IsNullOrWhiteSpace(prefillName)) { _pendingPrefillName = prefillName; }
        }
    }

    private async Task LoadCategoriesAsync()
    {
        var http = ClientFactory.CreateClient("Api");
        var resp = await http.GetAsync("/api/security-categories");
        if (resp.IsSuccessStatusCode)
        {
            _categories = await resp.Content.ReadFromJsonAsync<List<SecurityCategoryDto>>() ?? new();
        }
    }

    private async Task SaveAsync()
    {
        _error = null; var http = ClientFactory.CreateClient("Api");
        if (IsEdit)
        {
            var resp = await http.PutAsJsonAsync($"/api/securities/{Id}", _edit);
            if (!resp.IsSuccessStatusCode)
            {
                _error = await resp.Content.ReadAsStringAsync();
            }
            else
            {
                Reload();
            }
        }
        else
        {
            var resp = await http.PostAsJsonAsync("/api/securities", _edit);
            if (!resp.IsSuccessStatusCode)
            {
                _error = await resp.Content.ReadAsStringAsync();
            }
            else
            {
                var created = await resp.Content.ReadFromJsonAsync<SecurityDto>();
                if (created != null)
                {
                    await AssignToDraftEntryIfRequestedAsync(created.Id);
                }
                else
                {
                    Nav.NavigateTo("/securities", true);
                }
            }
        }
        BuildRibbon();
    }

    private async Task AssignToDraftEntryIfRequestedAsync(Guid securityId)
    {
        if (_prefillDraftId.HasValue && _prefillEntryId.HasValue)
        {
            try
            {
                var http = ClientFactory.CreateClient("Api");
                var payload = new { SecurityId = (Guid?)securityId, TransactionType = (string?)null, Quantity = (decimal?)null, FeeAmount = (decimal?)null, TaxAmount = (decimal?)null };
                await http.PostAsJsonAsync($"/api/statement-drafts/{_prefillDraftId}/entries/{_prefillEntryId}/security", payload);
            }
            catch { }
            Back();
        }
        else
        {
            Nav.NavigateTo("/securities", true);
        }
    }

    private async Task ArchiveAsync()
    {
        if (!IsEdit || !_model.IsActive || Id==null) { return; }
        var http = ClientFactory.CreateClient("Api");
        var resp = await http.PostAsync($"/api/securities/{Id}/archive", null);
        if (resp.IsSuccessStatusCode) { Reload(); }
        else { _error = await resp.Content.ReadAsStringAsync(); }
        BuildRibbon();
    }

    private async Task DeleteAsync()
    {
        if (!IsEdit || _model.IsActive || Id==null) { return; }
        var http = ClientFactory.CreateClient("Api");
        var resp = await http.DeleteAsync($"/api/securities/{Id}");
        if (resp.IsSuccessStatusCode) { Nav.NavigateTo("/securities", true); }
        else { _error = await resp.Content.ReadAsStringAsync(); }
        BuildRibbon();
    }

    private void Back()
    {
        if (_prefillDraftId.HasValue && _prefillEntryId.HasValue)
            Nav.NavigateTo($"/statement-drafts/{_prefillDraftId}/entries/{_prefillEntryId}", forceLoad: true);
        else
            Nav.NavigateTo("/securities", true);
    }

    private void Reload()
    {
        if (_prefillDraftId.HasValue && _prefillEntryId.HasValue)
            Nav.NavigateTo($"/securities/{Id}?draftId={_prefillDraftId}&entryId={_prefillEntryId}", true);
        else
            Nav.NavigateTo($"/securities/{Id}", true);
    }

    private void OpenPostings(){ if (Id.HasValue){ Nav.NavigateTo($"/postings/security/{Id}"); } }
    private void OpenPrices(){ if (Id.HasValue){ Nav.NavigateTo($"/securities/{Id}/prices"); } }

    private sealed class SecurityEditModel
    {
        [Required, MinLength(2)] public string Name { get; set; } = string.Empty;
        [Required, MinLength(3)] public string Identifier { get; set; } = string.Empty;
        public string? Description { get; set; }
        public string? AlphaVantageCode { get; set; }
        public string CurrencyCode { get; set; } = "EUR";
        public Guid? CategoryId { get; set; }
    }
    private sealed class SecurityVm
    {
        public SecurityVm() { }
        public SecurityVm(SecurityDto dto)
        {
            Id = dto.Id; Name = dto.Name; Description = dto.Description; Identifier = dto.Identifier;
            AlphaVantageCode = dto.AlphaVantageCode; IsActive = dto.IsActive; CurrencyCode = dto.CurrencyCode;
            CategoryId = dto.CategoryId; CategoryName = dto.CategoryName;
        }
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string? Description { get; set; }
        public string Identifier { get; set; } = string.Empty;
        public string? AlphaVantageCode { get; set; }
        public string CurrencyCode { get; set; } = "EUR";
        public bool IsActive { get; set; } = true;
        public Guid? CategoryId { get; set; }
        public string? CategoryName { get; set; }
    }
}
