@page "/securities/new"
@page "/securities/{Id:guid}"
@rendermode InteractiveServer
@inject IHttpClientFactory ClientFactory
@inject NavigationManager Nav
@inject IServiceProvider Services
@using FinanceManager.Shared.Dtos
@using System.ComponentModel.DataAnnotations
@using Microsoft.Extensions.Localization
@using FinanceManager.Web.Components.Shared
@using FinanceManager.Domain.Attachments
@using FinanceManager.Web.ViewModels
@using Microsoft.Extensions.DependencyInjection
@inject IStringLocalizer<Components.Pages.SecurityEdit> Localizer
<PageTitle>@Localizer["PageTitle"]</PageTitle>

<Ribbon TTabEnum="SecurityEdit.TabId" Tabs="_tabs" ActiveTab="_activeTab" ActiveTabChanged="OnActiveTabChanged" />

<h3>@((_vm?.IsEdit ?? false)? Localizer["TitleEdit"] : Localizer["TitleNew"])</h3>

<EditForm Model="_vm!.Model" OnValidSubmit="SaveAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div style="display:grid;grid-template-columns:repeat(auto-fit,minmax(240px,1fr));gap:1rem;max-width:860px;">
        <div>
            <label>@Localizer["LabelName"]</label>
            <InputText @bind-Value="_vm!.Model.Name" @bind-Value:after="(()=>RebuildRibbon())" />
            <ValidationMessage For="()=>_vm!.Model.Name" />
        </div>
        <div>
            <label>@Localizer["LabelIdentifier"]</label>
            <InputText @bind-Value="_vm!.Model.Identifier" @bind-Value:after="(()=>RebuildRibbon())" />
            <ValidationMessage For="()=>_vm!.Model.Identifier" />
        </div>
        <div>
            <label>@Localizer["LabelCurrencyCode"]</label>
            <InputText @bind-Value="_vm!.Model.CurrencyCode" />
            <ValidationMessage For="() => _vm!.Model.CurrencyCode" />
        </div>
        <div>
            <label>@Localizer["LabelAlphaVantage"]</label>
            <InputText @bind-Value="_vm!.Model.AlphaVantageCode" />
        </div>
        <div>
            <label>@Localizer["LabelCategory"]</label>
            <InputSelect @bind-Value="_vm!.Model.CategoryId">
                <option value="">--</option>
                @foreach(var c in _vm!.Categories)
                {
                    <option value="@c.Id">@c.Name</option>
                }
            </InputSelect>
        </div>
        <div style="grid-column:1/-1;">
            <label>@Localizer["LabelDescription"]</label>
            <textarea rows="4" style="width:100%;" @bind="_vm!.Model.Description"></textarea>
        </div>
        <div style="grid-column:1/-1;font-size:.8rem;opacity:.6;">
            @Localizer["LabelStatus"]: @((_vm?.Display.IsActive ?? false)? Localizer["StatusActive"] : Localizer["StatusArchived"]) 
        </div>
        @if(!string.IsNullOrEmpty(_vm?.Error))
        {
            <div style="grid-column:1/-1;color:#e66;font-size:.8rem;">@_vm!.Error</div>
        }
    </div>
</EditForm>

@if (_vm?.IsEdit == true)
{
    <div style="margin-top:1.2rem;">
        <AggregateBarChart Endpoint="@($"/api/securities/{_vm!.Id}/aggregates")" Title="@Localizer["Chart_Title_Security"]" />
    </div>
}

@if (_showAttachments && _vm?.Id != null)
{
    <div class="split-center" @onclick="(()=> _showAttachments = false)">
        <div class="split-dialog" style="max-width:90vH;" @onclick:stopPropagation="true">
            <div style="display:flex;align-items:center;justify-content:space-between;margin-bottom:.5rem;">
                <h3 style="margin:0;font-size:1rem;">@Localizer["Attachments_Title"]</h3>
                <button class="icon-btn" title='@Localizer["Btn_Close"]' @onclick="(()=> _showAttachments=false)"><svg><use href="/icons/sprite.svg#clear" /></svg></button>
            </div>
            <AttachmentsPanel ParentKind="@AttachmentEntityKind.Security" ParentId="@_vm!.Id!.Value" />
        </div>
    </div>
}

@code {
    [Parameter] public Guid? Id { get; set; }
    [SupplyParameterFromQuery(Name="back")] public string? BackNav { get; set; }
    [SupplyParameterFromQuery(Name="draftId")] public Guid? DraftId { get; set; }
    [SupplyParameterFromQuery(Name="entryId")] public Guid? EntryId { get; set; }
    [SupplyParameterFromQuery(Name="prefillName")] public string? PrefillName { get; set; }
    private SecurityEditViewModel? _vm;
    private bool _showAttachments;

    // Ribbon state
    private enum TabId { Security }
    private List<Ribbon<TabId>.RibbonTab<TabId>> _tabs = new();
    private TabId _activeTab = TabId.Security;
    private Task OnActiveTabChanged(TabId id){ _activeTab = id; return Task.CompletedTask; }

    private void RebuildRibbon()
    {
        var groupsDto = _vm?.GetRibbon(Localizer) ?? new List<UiRibbonGroup>();
        var groups = new List<Ribbon<TabId>.RibbonGroup>();
        foreach (var g in groupsDto)
        {
            var items = new List<Ribbon<TabId>.RibbonItem>();
            foreach (var it in g.Items)
            {
                var size = it.Size == UiRibbonItemSize.Large ? Ribbon<TabId>.RibbonItemSize.Large : Ribbon<TabId>.RibbonItemSize.Small;
                items.Add(new Ribbon<TabId>.RibbonItem
                {
                    Label = it.Label,
                    IconSvg = it.IconSvg,
                    Size = size,
                    Disabled = it.Disabled,
                    Callback = () => { HandleRibbonAction(it.Action); return Task.CompletedTask; }
                });
            }
            groups.Add(new Ribbon<TabId>.RibbonGroup { Title = g.Title, Items = items });
        }
        _tabs = new()
        {
            new Ribbon<TabId>.RibbonTab<TabId>
            {
                Id = TabId.Security,
                Title = Localizer["Ribbon_Tab_Security"],
                Groups = groups
            }
        };
        StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (_vm is null)
        {
            _vm = ActivatorUtilities.CreateInstance<SecurityEditViewModel>(Services);
            _vm.StateChanged += (_, __) => { RebuildRibbon(); _ = InvokeAsync(StateHasChanged); };
        }
        await _vm.InitializeAsync(Id, BackNav, DraftId, EntryId, PrefillName);
        RebuildRibbon();
    }

    private async Task SaveAsync()
    {
        var dto = await _vm!.SaveAsync();
        if (dto is null)
        {
            RebuildRibbon();
            return;
        }
        if (_vm!.IsEdit)
        {
            Reload();
        }
        else
        {
            await AssignToDraftEntryIfRequestedAsync(dto.Id);
            if (!(_vm!.ReturnDraftId.HasValue && _vm!.ReturnEntryId.HasValue))
            {
                var q = BuildQuery(("back", BackNav));
                Nav.NavigateTo($"/securities/{dto.Id}{q}", true);
            }
        }
        RebuildRibbon();
    }

    private async Task AssignToDraftEntryIfRequestedAsync(Guid securityId)
    {
        if (_vm!.ReturnDraftId.HasValue && _vm.ReturnEntryId.HasValue)
        {
            try
            {
                var http = ClientFactory.CreateClient("Api");
                var payload = new { SecurityId = (Guid?)securityId, TransactionType = (string?)null, Quantity = (decimal?)null, FeeAmount = (decimal?)null, TaxAmount = (decimal?)null };
                await http.PostAsJsonAsync($"/api/statement-drafts/{_vm!.ReturnDraftId}/entries/{_vm!.ReturnEntryId}/security", payload);
            }
            catch { }
            Back();
        }
        else
        {
            Nav.NavigateTo("/securities", true);
        }
    }

    private async Task ArchiveAsync()
    {
        var ok = await _vm!.ArchiveAsync();
        if (ok) { Reload(); }
        RebuildRibbon();
    }

    private async Task DeleteAsync()
    {
        var ok = await _vm!.DeleteAsync();
        if (ok) { Nav.NavigateTo("/securities", true); }
        RebuildRibbon();
    }

    private void Back()
    {
        if (!string.IsNullOrWhiteSpace(BackNav))
        {
            Nav.NavigateTo(Uri.UnescapeDataString(BackNav!), forceLoad: true);
            return;
        }
        if (_vm!.ReturnDraftId.HasValue && _vm.ReturnEntryId.HasValue)
            Nav.NavigateTo($"/statement-drafts/{_vm.ReturnDraftId}/entries/{_vm.ReturnEntryId}", forceLoad: true);
        else
            Nav.NavigateTo("/securities", true);
    }

    private void Reload()
    {
        var q = BuildQuery(
            ("draftId", _vm!.ReturnDraftId?.ToString()),
            ("entryId", _vm!.ReturnEntryId?.ToString()),
            ("back", BackNav)
        );
        Nav.NavigateTo($"/securities/{_vm!.Id}{q}", true);
    }

    private void OpenPostings()
    {
        if (_vm!.Id.HasValue)
        {
            var q = BuildQuery(("back", BackNav));
            Nav.NavigateTo($"/postings/security/{_vm!.Id}{q}");
        }
    }

    private void OpenPrices()
    {
        if (_vm!.Id.HasValue)
        {
            var q = BuildQuery(("back", BackNav));
            Nav.NavigateTo($"/securities/{_vm!.Id}/prices{q}");
        }
    }

    private void OpenAttachments(){ if (_vm!.Id.HasValue){ _showAttachments = true; StateHasChanged(); } }

    private void HandleRibbonAction(string action)
    {
        switch (action)
        {
            case "Back":
                Back();
                break;
            case "Save":
                _ = SaveAsync();
                break;
            case "Archive":
                _ = ArchiveAsync();
                break;
            case "Delete":
                _ = DeleteAsync();
                break;
            case "Postings":
                OpenPostings();
                break;
            case "Prices":
                OpenPrices();
                break;
            case "Attachments":
                OpenAttachments();
                break;
        }
    }

    private string BuildQuery(params (string key, string? value)[] parts)
    {
        var qs = new List<string>();
        foreach (var (key, value) in parts)
        {
            if (!string.IsNullOrWhiteSpace(value))
            {
                qs.Add($"{key}={Uri.EscapeDataString(value)}");
            }
        }
        return qs.Count > 0 ? "?" + string.Join("&", qs) : string.Empty;
    }
}
