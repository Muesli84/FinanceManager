@using System.Net.Http.Json
@inject FinanceManager.Application.ICurrentUserService CurrentUser
@inject Microsoft.Extensions.Localization.IStringLocalizer<FinanceManager.Web.Components.Pages.SetupIpBlockTab> L
@inject IServiceProvider Services
@using FinanceManager.Web.ViewModels
@using Microsoft.Extensions.DependencyInjection

@if (!CurrentUser.IsAuthenticated || !CurrentUser.IsAdmin)
{
    <p>@L["Access_AdminOnly"]</p>
}
else
{
    <h4 style="margin-top:0;">@L["Heading_IpBlocks"]</h4>

    <div class="create-ip-form" style="display:flex;gap:.5rem;align-items:center;flex-wrap:wrap;margin:.5rem 0 1rem 0;">
        <input placeholder="@L["Ip_Placeholder"]" @bind="_vm!.Ip" style="min-width:14rem;" />
        <input placeholder="@L["Reason_Placeholder"]" @bind="_vm!.Reason" style="min-width:18rem;" />
        <label style="display:inline-flex;align-items:center;gap:.4rem;">
            <input type="checkbox" @bind="_vm!.BlockOnCreate" /> @L["BlockOnCreate"]
        </label>
        <button @onclick="(()=> _vm!.CreateAsync())" disabled="@_vm!.Busy">@L["Add"]</button>
    </div>

    @if (!string.IsNullOrEmpty(_vm?.Error))
    {
        <div class="error">@_vm!.Error</div>
    }

    <div class="table-responsive">
        <table class="fm-table">
            <thead>
                <tr>
                    <th>@L["IpAddress"]</th>
                    <th>@L["Blocked"]</th>
                    <th>@L["BlockedAt"]</th>
                    <th>@L["Reason"]</th>
                    <th>@L["UnknownFails"]</th>
                    <th>@L["LastFail"]</th>
                    <th>@L["Actions"]</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var b in _vm!.Items)
                {
                    <tr>
                        <td>@b.IpAddress</td>
                        <td>@(b.IsBlocked?"✓":"-")</td>
                        <td>@(b.BlockedAtUtc?.ToString("u") ?? "-")</td>
                        <td>@(b.BlockReason ?? "-")</td>
                        <td>@b.UnknownUserFailedAttempts</td>
                        <td>@(b.UnknownUserLastFailedUtc?.ToString("u") ?? "-")</td>
                        <td style="white-space:nowrap;">
                            @if (!b.IsBlocked)
                            {
                                <button @onclick="(()=>_vm!.BlockAsync(b.Id))">@L["Action_Block"]</button>
                            }
                            else
                            {
                                <button @onclick="(()=>_vm!.UnblockAsync(b.Id))">@L["Action_Unblock"]</button>
                            }
                            <button @onclick="(()=>_vm!.ResetCountersAsync(b.Id))">@L["Action_Reset"]</button>
                            <button class="danger" @onclick="(()=>_vm!.DeleteAsync(b.Id))">@L["Action_Delete"]</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private SetupIpBlocksViewModel? _vm;

    protected override async Task OnInitializedAsync()
    {
        _vm = ActivatorUtilities.CreateInstance<SetupIpBlocksViewModel>(Services);
        _vm.StateChanged += (_, __) => { _ = InvokeAsync(StateHasChanged); };
        await _vm.InitializeAsync();
    }
}
