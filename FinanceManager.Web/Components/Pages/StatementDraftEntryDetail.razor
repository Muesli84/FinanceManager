@page "/statement-drafts/{DraftId:guid}/entries/{EntryId:guid}"
@rendermode InteractiveServer
@inject HttpClient Http
@inject NavigationManager Nav
@using FinanceManager.Domain.Statements

@code { enum StatementDraftStatus { Draft=0, Committed=1, Expired=2 } }

<h3>Statement Draft Entry</h3>
@if (_vm == null)
{
    <p>Loading...</p>
}
else
{
    <div class="action-bar" style="margin-bottom:1rem;display:flex;gap:.4rem;flex-wrap:wrap;align-items:center;">
        <div style="margin-left:1rem;display:flex;gap:.25rem;align-items:center;">
            <button class="icon-btn" @onclick="Back" title="Back" aria-label="Back"><svg><use href="/icons/sprite.svg#back" /></svg></button>
        </div>
        <div style="margin-left:1rem;display:flex;gap:.25rem;align-items:center;">
            <button class="icon-btn" disabled="@(_pendingSave)" @onclick="SaveAll" title="Save Changes" aria-label="Save Changes"><svg><use href="/icons/sprite.svg#save" /></svg></button>
            <button class="icon-btn" @onclick="Reclassify" title="Reclassify Draft" aria-label="Reclassify Draft"><svg><use href="/icons/sprite.svg#refresh" /></svg></button>
            <button class="icon-btn" @onclick="ValidateEntry" title="Eintrag prüfen" aria-label="Eintrag prüfen">
                <svg><use href="/icons/sprite.svg#check" /></svg>
            </button>
            <button class="icon-btn" @onclick="OpenSplitDialog" title="Split-Auszug zuordnen" aria-label="Split-Auszug zuordnen">
                <svg><use href="/icons/sprite.svg#link" /></svg>
            </button>
        </div>
        <div style="margin-left:1rem;display:flex;gap:.25rem;align-items:center;">
            <button class="icon-btn" disabled="@(_selectedContactId==null)" @onclick="OpenContactDetail" title="Kontakt anzeigen" aria-label="Kontakt anzeigen">
                <svg><use href="/icons/sprite.svg#groups" /></svg>
            </button>
            <button class="icon-btn" disabled="@(_selectedSecurityId == null)" title="Wertpapier anzeigen" aria-label="Wertpapier anzeigen" @onclick="OpenSecurityDetail">
                <svg><use href="/icons/sprite.svg#security" /></svg>
            </button>
            <button class="icon-btn" disabled="@(_selectedSavingsPlanId == null)" title="Sparplan anzeigen" aria-label="Sparplan anzeigen" @onclick="OpenSavingsPlanDetail">
                <svg><use href="/icons/sprite.svg#external" /></svg>
            </button>
            @if(_vm?.Entry.SplitDraftId != null)
            {
                <button class="icon-btn" @onclick="OpenAssignedSplitDraft" title="Verknüpften Auszug öffnen" aria-label="Verknüpften Auszug öffnen">
                    <svg><use href="/icons/sprite.svg#external" /></svg>
                </button>
                <button class="icon-btn" @onclick="RemoveSplit" title="Zuordnung entfernen" aria-label="Zuordnung entfernen">
                    <svg><use href="/icons/sprite.svg#unlink" /></svg>
                </button>
            }
        </div>
        <div style="margin-left:1rem;display:flex;gap:.25rem;align-items:center;">
            <button class="icon-btn" disabled="@(_vm?.PrevEntryId==null)" @onclick="GoPrev" title="Previous Entry" aria-label="Previous Entry"><svg><use href="/icons/sprite.svg#back" /></svg></button>
            <button class="icon-btn" disabled="@(_vm?.NextOpenEntryId==null)" @onclick="GoNextOpen" title="Nächster offener Eintrag" aria-label="Nächster offener Eintrag">
                <svg><use href="/icons/sprite.svg#arrow-right" /></svg>
            </button>
        </div>
    </div>
    <p><strong>Draft File:</strong> @_vm.OriginalFileName</p>
    @if(_entryValidation != null)
    {
        <div style="margin-bottom:1rem;padding:.5rem .75rem;border:1px solid #444;border-radius:4px;background:#181818;max-width:960px;">
            <h4 style="margin:.2rem 0 .4rem 0;font-size:.8rem;">Prüfung Eintrag</h4>
            @if(!_entryValidation.Messages.Any())
            {
                <p style="margin:0;font-size:.7rem;color:#6c6;">Keine Hinweise oder Fehler.</p>
            }
            else
            {
                <ul style="margin:.25rem 0 0 1rem;padding:0;font-size:.65rem;">
                    @foreach(var m in _entryValidation.Messages)
                    {
                        var c = m.Severity=="Error"?"#e66":"#cc6";
                        <li style="margin:.2rem 0;color:@c;">@m.Message</li>
                    }
                </ul>
            }
        </div>
    }
    <div style="margin-bottom:1rem;">
        <label><input type="checkbox" @bind="_editMode" /> Editiermodus</label>
        @if (_editMode && _vm != null)
        {
            <div class="edit-core" style="display:grid;grid-template-columns:repeat(auto-fit,minmax(220px,1fr));gap:.75rem;margin-top:.5rem;max-width:960px;">
                <div>
                    <label>Buchungsdatum</label>
                    <InputDate @bind-Value="_editBookingDate" />
                </div>
                <div>
                    <label>Valuta</label>
                    <InputDate @bind-Value="_editValutaDate" />
                </div>
                <div>
                    <label>Betrag</label>
                    <InputNumber @bind-Value="_editAmount" />
                </div>
                <div>
                    <label>Währung</label>
                    <InputText @bind-Value="_editCurrency" />
                </div>
                <div style="grid-column:1/-1;">
                    <label>Betreff</label>
                    <InputText @bind-Value="_editSubject" style="width:100%;" />
                </div>
                <div style="grid-column:1/-1;">
                    <label>Empfänger</label>
                    <InputText @bind-Value="_editRecipient" style="width:100%;" />
                </div>
                <div style="grid-column:1/-1;">
                    <label>Beschreibung</label>
                    <textarea @bind="_editDescription" rows="3" style="width:100%;"></textarea>
                </div>
                <div style="grid-column:1/-1;display:flex;gap:.5rem;">
                    <button class="icon-btn" disabled="@_savingCore" @onclick="SaveCoreAsync"><svg><use href="/icons/sprite.svg#save" /></svg>&nbsp;Speichern</button>
                    <button type="button" class="icon-btn" disabled="@_savingCore" @onclick="ResetCoreEdits">Zurücksetzen</button>
                </div>
                @if(!string.IsNullOrEmpty(_coreError))
                {
                    <div style="grid-column:1/-1;color:#f77;font-size:.8rem;">@_coreError</div>
                }
            </div>
        }
    </div>
    <table class="fm-table" style="max-width:960px;">
        <tbody>
            <tr><th style="width:180px;">Booking Date</th><td>@_vm.Entry.BookingDate.ToShortDateString()</td></tr>
            <tr><th>Valuta Date</th><td>@(_vm.Entry.ValutaDate?.ToShortDateString() ?? "-")</td></tr>
            <tr>
                <th>Amount</th>
                <td>
                    @_vm.Entry.Amount @_vm.Entry.CurrencyCode
                    @if(_vm.SplitSum != null)
                    {
                        <span style="opacity:.7;"> (Summe Aufteilung: @_vm.SplitSum
                            @if(_vm.Difference is decimal d && d != 0)
                            {
                                <text>; Diff: @d</text>
                            }
                            )</span>
                    }
                </td>
            </tr>
            <tr><th>Subject</th><td class="wrap">@_vm.Entry.Subject</td></tr>
            <tr><th>Recipient</th><td class="wrap">@(_vm.Entry.RecipientName ?? "-")</td></tr>
            <tr><th>Description</th><td class="wrap">@(_vm.Entry.BookingDescription ?? "-")</td></tr>
            <tr><th>Announced</th><td>@(_vm.Entry.IsAnnounced ? "Yes" : "No")</td></tr>
            <tr><th>Status</th><td>@_vm.Entry.Status</td></tr>
            <tr>
                <th>Contact</th>
                <td>
                    <div class="contact-combobox" style="display:grid;grid-template-columns:1fr auto;align-items:start;gap:.5rem;max-width:420px;margin-bottom:1rem;">
                        <div style="position:relative;min-width:0;">
                            <input type="text" style="width:95%;" @bind="_contactFilter" @bind:event="oninput" @bind:after="(()=>OnContactFilterAfterChanged())" placeholder="Type to filter contacts" @onfocus="ShowDropdown" />
                            <input type="hidden" value="@_selectedContactId" />
                            @if (_dropdownVisible)
                            {
                                <ul class="combo-list" style="list-style:none;margin:0;padding:.25rem .25rem;position:absolute;z-index:10;left:0;right:0;max-height:9.5rem;overflow:auto;background:#222;border:1px solid #444;border-radius:4px;box-shadow:0 3px 12px #0005;">
                                    <li style="padding:.3rem .4rem;cursor:pointer;" @onclick="(()=>SelectContact(null))" class="@( _selectedContactId==null?"active":string.Empty)">-- none --</li>
                                    @foreach(var c in FilteredContacts)
                                    {
                                        <li style="padding:.3rem .4rem;cursor:pointer;" @onclick="(()=>SelectContact(c.Id))" class="@( _selectedContactId==c.Id?"active":string.Empty)" title="@c.Name">@c.Name</li>
                                    }
                                    @if(!FilteredContacts.Any())
                                    {
                                        <li style="padding:.3rem .4rem;opacity:.6;">No matches</li>
                                    }
                                </ul>
                            }
                            @if(!string.IsNullOrEmpty(_contactError))
                            {
                                <div style="color:#e66;font-size:.8rem;margin-top:.3rem;">@_contactError</div>
                            }
                        </div>
                        <div>
                            <button class="icon-btn" title="New Contact" aria-label="New Contact" @onclick="OpenCreateContact"><svg><use href="/icons/sprite.svg#plus" /></svg></button>
                        </div>
                    </div>
                </td>
            </tr>
            <tr>
                <th>Cost Neutral</th>
                <td><InputCheckbox @bind-Value="IsCostNeutral" /></td>
            </tr>
            <tr>
                <th>Sparplan</th>
                <td>
                    <div class="savingsplan-combobox" style="display:grid;grid-template-columns:1fr auto;align-items:start;gap:.5rem;max-width:420px;margin-bottom:1rem;">
                        <div style="position:relative;min-width:0;">
                            <input type="text" style="width:95%;" @bind="_savingsPlanFilter" @bind:event="oninput" @bind:after="(()=>OnSavingsPlanFilterAfterChanged())" placeholder="Sparplan suchen..." @onfocus="ShowSavingsPlanDropdown" />
                            <input type="hidden" value="@_selectedSavingsPlanId" />
                            @if (_savingsPlanDropdownVisible)
                            {
                                <ul class="combo-list" style="list-style:none;margin:0;padding:.25rem .25rem;position:absolute;z-index:10;left:0;right:0;max-height:9.5rem;overflow:auto;background:#222;border:1px solid #444;border-radius:4px;box-shadow:0 3px 12px #0005;">
                                    <li style="padding:.3rem .4rem;cursor:pointer;" @onclick="(()=>SelectSavingsPlan(null))" class="@( _selectedSavingsPlanId==null?"active":string.Empty)">-- none --</li>
                                    @foreach(var plan in FilteredSavingsPlans)
                                    {
                                        <li style="padding:.3rem .4rem;cursor:pointer;" @onclick="(()=>SelectSavingsPlan(plan.Id))" class="@( _selectedSavingsPlanId==plan.Id?"active":string.Empty)" title="@plan.Name">@plan.Name</li>
                                    }
                                    @if(!FilteredSavingsPlans.Any())
                                    {
                                        <li style="padding:.3rem .4rem;opacity:.6;">No matches</li>
                                    }
                                </ul>
                            }
                        </div>
                        <div style="display:flex;gap:.35rem;">
                            <button class="icon-btn" title="Neuen Sparplan anlegen" aria-label="Neuen Sparplan anlegen" @onclick="OpenCreateSavingsPlan" disabled="@(!CanCreateSavingsPlan)"><svg><use href="/icons/sprite.svg#plus" /></svg></button>
                        </div>
                    </div>
                    @if(_selectedSavingsPlanId != null)
                    {
                        <div style="display:flex;align-items:center;gap:.5rem;margin:.25rem 0 .5rem 0;max-width:420px;">
                            <InputCheckbox @bind-Value="_archiveSavingsPlanOnBooking" />
                            <span>Sparplan nach Buchung archivieren</span>
                        </div>
                    }
                </td>
            </tr>
            @if(ShowSecuritySection)
            {
                <tr>
                    <th>Wertpapier</th>
                    <td>
                        <div style="display:grid;grid-template-columns:1fr auto;align-items:start;gap:.5rem;max-width:480px;margin-bottom:.75rem;">
                            <div style="position:relative;min-width:0;">
                                <input type="text"
                                       style="width:95%;"
                                       @bind="_securityFilter"
                                       @bind:event="oninput"
                                       @bind:after="(()=>OnSecurityFilterChanged())"
                                       placeholder="Wertpapier suchen..."
                                       @onfocus="ShowSecurityDropdown" />
                                <input type="hidden" value="@_selectedSecurityId" />
                                @if (_securityDropdownVisible)
                                {
                                    <ul class="combo-list" style="list-style:none;margin:0;padding:.25rem .25rem;position:absolute;z-index:10;left:0;right:0;max-height:9.5rem;overflow:auto;background:#222;border:1px solid #444;border-radius:4px;box-shadow:0 3px 12px #0005;">
                                        <li style="padding:.3rem .4rem;cursor:pointer;"
                                            @onclick="(()=>SelectSecurity(null))"
                                            class="@(_selectedSecurityId==null?"active":string.Empty)">-- none --</li>
                                        @foreach(var s in FilteredSecurities)
                                        {
                                            <li style="padding:.3rem .4rem;cursor:pointer;"
                                                @onclick="(()=>SelectSecurity(s.Id))"
                                                class="@(_selectedSecurityId==s.Id?"active":string.Empty)"
                                                title="@s.Name">@s.Name (@s.Identifier)</li>
                                        }
                                        @if(!FilteredSecurities.Any())
                                        {
                                            <li style="padding:.3rem .4rem;opacity:.6;">Keine Treffer</li>
                                        }
                                    </ul>
                                }
                                @if(!string.IsNullOrEmpty(_securityError))
                                {
                                    <div style="margin-top:.3rem;color:#e66;font-size:.75rem;">@_securityError</div>
                                }
                            </div>
                            <div>
                                <button class="icon-btn" title="Neues Wertpapier" aria-label="Neues Wertpapier" @onclick="OpenCreateSecurity"><svg><use href="/icons/sprite.svg#plus" /></svg></button>                                
                            </div>
                        </div>
                        @if (_selectedSecurityId != null)
                        {
                            <div style="display:grid;grid-template-columns:repeat(auto-fit,minmax(150px,1fr));gap:.6rem;max-width:720px;margin-top:.25rem;">
                                <div>
                                    <label>Art</label>
                                    <select @bind="_securityTxType">
                                        <option value="">--</option>
                                        <option value="Buy">Kauf</option>
                                        <option value="Sell">Verkauf</option>
                                        <option value="DividendOrInterest">Zins/Dividende</option>
                                    </select>
                                </div>
                                <div>
                                    <label>Menge</label>
                                    <InputNumber @bind-Value="_securityQuantity" />
                                </div>
                                <div>
                                    <label>Gebühr (enthalten)</label>
                                    <InputNumber @bind-Value="_securityFee" />
                                </div>
                                <div>
                                    <label>Steuer (enthalten)</label>
                                    <InputNumber @bind-Value="_securityTax" />
                                </div>
                            </div>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @if (_showSplitDialog)
    {
        <div class="modal-backdrop split-center">
            <div class="modal split-dialog" role="dialog" aria-modal="true" aria-label="Split-Auszug auswählen">
                <h3 style="margin-top:0;">Split-Auszug auswählen</h3>
                @if(_vm?.Entry.SplitDraftId != null)
                {
                    <p style="margin:.15rem 0 .4rem 0;font-size:.7rem;opacity:.7;">Aktuell verknüpft mit Draft <strong>@_vm.Entry.SplitDraftId</strong>. Wähle einen anderen Auszug oder Abbrechen.</p>
                }
                <p style="margin-top:.2rem;opacity:.8;font-size:.85rem;">Wähle einen unzugeordneten Auszug ohne Konto.</p>
                <input type="text" @bind="_splitFilter" placeholder="Filter..." style="width:100%;margin:.5rem 0 .75rem 0;" />
                <div class="split-scroll">
                    @if(_loadingSplits)
                    {
                        <div class="split-hint">Lade...</div>
                    }
                    else
                    {
                        @foreach(var d in FilteredSplitDrafts)
                        {
                            <div class="split-row @(d.DraftId==_selectedSplitDraftId? "active" : string.Empty)" @onclick="(()=>SelectSplit(d.DraftId))">
                                <div class="name">@d.OriginalFileName</div>
                                <div class="meta">@d.EntriesCount Einträge · Summe @d.TotalAmount</div>
                            </div>
                        }
                        @if(!FilteredSplitDrafts.Any())
                        {
                            <div class="split-hint">Keine Treffer</div>
                        }
                    }
                </div>
                @if(!string.IsNullOrEmpty(_splitError))
                {
                    <div class="split-error">@_splitError</div>
                }
                <div class="split-actions">
                    <button class="icon-btn" disabled="@(_selectedSplitDraftId==null)" @onclick="ConfirmSplit" title="Übernehmen" aria-label="Übernehmen"><svg><use href="/icons/sprite.svg#check" /></svg></button>
                    <button class="icon-btn" @onclick="CloseSplitDialog" title="Abbrechen" aria-label="Abbrechen"><svg><use href="/icons/sprite.svg#clear" /></svg></button>
                </div>
            </div>
        </div>
    }
}

@code {
    [Parameter] public Guid DraftId { get; set; }
    [Parameter] public Guid EntryId { get; set; }

    private EntryDetailVm? _vm;
    private List<ContactVm> _allContacts = new();
    private string _contactFilter = string.Empty;
    private Guid? _selectedContactId;
    private Guid? _selfContactId;
    private string? _contactError;
    private bool _dropdownVisible;
    private bool _pendingSave;
    private bool _IsCostNeutral;
    private bool IsCostNeutral { get => _IsCostNeutral; set { _IsCostNeutral = value; } }

    private IEnumerable<ContactVm> FilteredContacts => string.IsNullOrWhiteSpace(_contactFilter)
        ? _allContacts
        : _allContacts.Where(c => c.Name.Contains(_contactFilter, StringComparison.OrdinalIgnoreCase));

    private Guid? _selectedSavingsPlanId;
    private string _savingsPlanFilter = string.Empty;
    private bool _savingsPlanDropdownVisible;
    private List<SavingsPlanDto> _userSavingsPlans = new();
    private bool _archiveSavingsPlanOnBooking;

    private IEnumerable<SavingsPlanDto> FilteredSavingsPlans => string.IsNullOrWhiteSpace(_savingsPlanFilter)
         ? _userSavingsPlans
         : _userSavingsPlans.Where(p => p.Name.Contains(_savingsPlanFilter, StringComparison.OrdinalIgnoreCase));

    // Split UI
    private bool _showSplitDialog;
    private bool _loadingSplits;
    private string _splitFilter = string.Empty;
    private Guid? _selectedSplitDraftId;
    private string? _splitError;
    private List<SplitDraftOption> _candidateSplits = new();

    private IEnumerable<SplitDraftOption> FilteredSplitDrafts => string.IsNullOrWhiteSpace(_splitFilter)
        ? _candidateSplits
        : _candidateSplits.Where(d => d.OriginalFileName.Contains(_splitFilter, StringComparison.OrdinalIgnoreCase));

    private sealed record SplitDraftOption(Guid DraftId, string OriginalFileName, int EntriesCount, decimal TotalAmount);

    // Core edit
    private bool _editMode; private bool _savingCore; private string? _coreError;
    private DateTime _editBookingDate; private DateTime? _editValutaDate; private decimal _editAmount; private string _editSubject=""; private string? _editRecipient; private string? _editDescription; private string _editCurrency="EUR";

    // Securities UI State
    private List<SecurityVm> _securities = new();
    private string _securityFilter = string.Empty;
    private bool _securityDropdownVisible;
    private Guid? _selectedSecurityId;
    private string? _securityError;
    private SecurityTransactionType? _securityTxType;
    private decimal? _securityQuantity;
    private decimal? _securityFee;
    private decimal? _securityTax;

    private IEnumerable<SecurityVm> FilteredSecurities => string.IsNullOrWhiteSpace(_securityFilter)
        ? _securities
        : _securities.Where(s => s.Name.Contains(_securityFilter, StringComparison.OrdinalIgnoreCase) || s.Identifier.Contains(_securityFilter, StringComparison.OrdinalIgnoreCase));

    // Sichtbar wenn:
    // - Bankkontakt = Empfänger (ursprüngliche Bedingung) ODER
    // - bereits ein Wertpapier zugeordnet ist (sonst würde es beim erneuten Öffnen verschwinden)
    private bool ShowSecuritySection =>
        _vm != null &&
        (
            _vm.Entry.SecurityId != null ||
            (_vm.BankContactId != null &&
             _vm.Entry.ContactId != null &&
             _vm.Entry.ContactId == _vm.BankContactId)
        );

    private void InitCoreEdit()
    {
        if (_vm == null) { return; }
        _editBookingDate = _vm.Entry.BookingDate;
        _editValutaDate = _vm.Entry.ValutaDate;
        _editAmount = _vm.Entry.Amount;
        _editSubject = _vm.Entry.Subject;
        _editRecipient = _vm.Entry.RecipientName;
        _editDescription = _vm.Entry.BookingDescription;
        _editCurrency = _vm.Entry.CurrencyCode;
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadEntryAsync();
        await LoadContactsAsync();
        await LoadUserSavingsPlansAsync();

        _selectedContactId = _vm?.Entry.ContactId;
        _contactFilter = _vm?.Entry.ContactId != null ? _allContacts.FirstOrDefault(c=>c.Id==_vm.Entry.ContactId)?.Name ?? string.Empty : string.Empty;

        _selectedSavingsPlanId = _vm?.Entry.SavingsPlanId;
        _savingsPlanFilter = _selectedSavingsPlanId != null
            ? _userSavingsPlans.FirstOrDefault(p=>p.Id==_selectedSavingsPlanId)?.Name ?? string.Empty
            : string.Empty;
        _archiveSavingsPlanOnBooking = _vm?.Entry.ArchiveSavingsPlanOnBooking ?? false;

        // Securities initialisieren
        if (_vm?.Entry != null)
        {
            _selectedSecurityId = _vm.Entry.SecurityId;
            _securityTxType = _vm.Entry.SecurityTransactionType;
            _securityQuantity = _vm.Entry.SecurityQuantity;
            _securityFee = _vm.Entry.SecurityFeeAmount;
            _securityTax = _vm.Entry.SecurityTaxAmount;
        }

        // Securities laden falls nötig (jetzt auch falls bereits SecurityId gesetzt, selbst wenn Bankkontakt-Bedingung nicht erfüllt)
        await LoadSecuritiesIfNeededAsync();

        // Eingabefeld vorbefüllen wenn Security bekannt (erst nach Laden der Liste sinnvoll)
        if (_selectedSecurityId != null && string.IsNullOrEmpty(_securityFilter))
        {
            _securityFilter = _securities.FirstOrDefault(s => s.Id == _selectedSecurityId)?.Name ?? string.Empty;
        }

        InitCoreEdit();
    }

    private async Task LoadEntryAsync()
    {
        var resp = await Http.GetAsync($"/api/statement-drafts/{DraftId}/entries/{EntryId}");
        if (resp.IsSuccessStatusCode)
        {
            _vm = await resp.Content.ReadFromJsonAsync<EntryDetailVm>();
            _IsCostNeutral = _vm!.Entry.IsCostNeutral;
            _selectedSavingsPlanId = _vm.Entry.SavingsPlanId;
            _selectedContactId = _vm.Entry.ContactId;
            _savingsPlanFilter = _selectedSavingsPlanId != null
                ? _userSavingsPlans.FirstOrDefault(p => p.Id == _selectedSavingsPlanId)?.Name ?? string.Empty
                : string.Empty;
            _archiveSavingsPlanOnBooking = _vm.Entry.ArchiveSavingsPlanOnBooking;
        }
    }

    private async Task LoadContactsAsync()
    {
        var resp = await Http.GetAsync("/api/contacts?skip=0&take=500");
        if (resp.IsSuccessStatusCode)
        {
            var list = await resp.Content.ReadFromJsonAsync<List<ContactDto>>() ?? new();
            _allContacts = list.Select(c => new ContactVm { Id = c.Id, Name = c.Name }).OrderBy(c => c.Name).ToList();
            _selfContactId = list.FirstOrDefault(c => c.Type == ContactType.Self)?.Id;
        }
    }

    private async Task LoadUserSavingsPlansAsync()
    {
        var resp = await Http.GetAsync("/api/savings-plans?onlyActive=true");
        if (resp.IsSuccessStatusCode)
        {
            _userSavingsPlans = await resp.Content.ReadFromJsonAsync<List<SavingsPlanDto>>() ?? new();
        }
    }

    private async Task LoadSecuritiesIfNeededAsync()
    {
        // Laden wenn Section gezeigt werden soll ODER wenn bereits SecurityId gesetzt (damit Anzeige möglich)
        if (!ShowSecuritySection && _vm?.Entry.SecurityId == null) { return; }
        if (_securities.Count > 0) { return; }

        var resp = await Http.GetAsync("/api/securities?onlyActive=true");
        if (!resp.IsSuccessStatusCode)
        {
            _securityError = await resp.Content.ReadAsStringAsync();
            return;
        }
        var list = await resp.Content.ReadFromJsonAsync<List<SecurityDto>>() ?? new();
        _securities = list
            .Select(s => new SecurityVm { Id = s.Id, Name = s.Name, Identifier = s.Identifier })
            .OrderBy(s => s.Name)
            .ToList();
    }

    private void ShowSavingsPlanDropdown(FocusEventArgs _) => _savingsPlanDropdownVisible = true;
    private void SelectSavingsPlan(Guid? id)
    {
        if (_selectedSavingsPlanId != id) { _selectedSavingsPlanId = id; }
        _savingsPlanFilter = id == null ? string.Empty : _userSavingsPlans.FirstOrDefault(p => p.Id == id)?.Name ?? string.Empty;
        _savingsPlanDropdownVisible = false;
        if (id == null) { _archiveSavingsPlanOnBooking = false; }
    }
    private void OnSavingsPlanFilterAfterChanged()
    {
        _savingsPlanDropdownVisible = true;
        if (_selectedSavingsPlanId != null && !_userSavingsPlans.Any(p => string.Equals(p.Name, _savingsPlanFilter, StringComparison.OrdinalIgnoreCase)))
        {
            _selectedSavingsPlanId = null;
        }
    }

    private bool CanCreateSavingsPlan =>
        _vm != null &&
        _selfContactId != null &&
        _vm.Entry.ContactId != null &&
        _vm.Entry.ContactId == _selfContactId &&
        _vm.Entry.Amount < 0 &&
        _selectedSavingsPlanId == null;

    private void OpenCreateSavingsPlan()
    {
        if (_vm == null) { return; }
        var name = string.IsNullOrWhiteSpace(_savingsPlanFilter) ? _vm.Entry.Subject : _savingsPlanFilter;
        name ??= string.Empty;
        var url = $"/savings-plans/new?prefillName={Uri.EscapeDataString(name)}&draftId={DraftId}&entryId={EntryId}";
        Nav.NavigateTo(url);
    }

    private void Back() => Nav.NavigateTo($"/statement-drafts/{DraftId}");
    private void OpenCreateContact()
    {
        var name = _vm?.Entry.RecipientName;
        if (string.IsNullOrWhiteSpace(name)) { name = string.IsNullOrWhiteSpace(_contactFilter) ? _vm?.Entry.Subject : _contactFilter; }
        name ??= string.Empty;
        var url = $"/contacts/new?prefillName={Uri.EscapeDataString(name)}&draftId={DraftId}&entryId={EntryId}";
        Nav.NavigateTo(url);
    }
    private void OpenContactDetail()
    {
        if (_selectedContactId != null) { Nav.NavigateTo($"/contacts/{_selectedContactId}"); }
    }
    private void OpenSavingsPlanDetail()
    {
        if (_selectedSavingsPlanId != null) { Nav.NavigateTo($"/savings-plans/{_selectedSavingsPlanId}"); }
    }
    private void GoPrev()
    {
        if (_vm?.PrevEntryId != null)
        {
            Nav.NavigateTo($"/statement-drafts/{DraftId}/entries/{_vm.PrevEntryId}");
        }
    }
    private void GoNextOpen()
    {
        if (_vm?.NextOpenEntryId != null)
        {
            Nav.NavigateTo($"/statement-drafts/{DraftId}/entries/{_vm.NextOpenEntryId}");
        }
    }

    // Split
    private void OpenSplitDialog()
    {
        _splitError = null;
        _selectedSplitDraftId = null;
        _showSplitDialog = true;
        _ = LoadSplitCandidates();
    }
    private void CloseSplitDialog() => _showSplitDialog = false;
    private async Task LoadSplitCandidates()
    {
        _loadingSplits = true;
        try
        {
            var list = await Http.GetFromJsonAsync<List<StatementDraftListDto>>("/api/statement-drafts");
            if (list != null)
            {
                _candidateSplits = list
                    .Where(d => d.DraftId != DraftId && d.DetectedAccountId == null && !d.IsSplitDraft && d.Status == StatementDraftStatus.Draft)
                    .Select(d => new SplitDraftOption(d.DraftId, d.OriginalFileName, d.Entries.Count, d.TotalAmount))
                    .OrderBy(d => d.OriginalFileName)
                    .ToList();
            }
        }
        finally
        {
            _loadingSplits = false;
            StateHasChanged();
        }
    }
    private void SelectSplit(Guid id) => _selectedSplitDraftId = id;
    private async Task ConfirmSplit()
    {
        if (_selectedSplitDraftId == null) { return; }
        try
        {
            var resp = await Http.PostAsJsonAsync($"/api/statement-drafts/{DraftId}/entries/{EntryId}/split", new { SplitDraftId = _selectedSplitDraftId });
            if (!resp.IsSuccessStatusCode)
            {
                _splitError = await resp.Content.ReadAsStringAsync();
                return;
            }
            _showSplitDialog = false;
            await LoadEntryAsync();
        }
        catch (Exception ex)
        {
            _splitError = ex.Message;
        }
    }
    private async Task RemoveSplit()
    {
        var resp = await Http.PostAsJsonAsync($"/api/statement-drafts/{DraftId}/entries/{EntryId}/split", new { SplitDraftId = (Guid?)null });
        if (resp.IsSuccessStatusCode) { await LoadEntryAsync(); }
    }
    private void OpenAssignedSplitDraft()
    {
        if (_vm?.Entry.SplitDraftId != null)
        {
            Nav.NavigateTo($"/statement-drafts/{_vm.Entry.SplitDraftId}");
        }
    }

    // Core save
    private async Task SaveCoreAsync()
    {
        if (_vm == null) { return; }
        _savingCore = true; _coreError = null;
        try
        {
            var payload = new { BookingDate = _editBookingDate, ValutaDate = _editValutaDate, Amount = _editAmount, Subject = _editSubject, RecipientName = _editRecipient, CurrencyCode = _editCurrency, BookingDescription = _editDescription };
            var resp = await Http.PostAsJsonAsync($"/api/statement-drafts/{DraftId}/entries/{EntryId}/edit-core", payload);
            if (!resp.IsSuccessStatusCode)
            {
                _coreError = await resp.Content.ReadAsStringAsync();
            }
            else
            {
                await LoadEntryAsync();
                InitCoreEdit();
            }
        }
        catch(Exception ex)
        {
            _coreError = ex.Message;
        }
        _savingCore = false;
    }
    private void ResetCoreEdits() => InitCoreEdit();

    // Records / DTO shapes
    private sealed record EntryDto(
        Guid Id,
        DateTime BookingDate,
        DateTime? ValutaDate,
        decimal Amount,
        string CurrencyCode,
        string Subject,
        string? RecipientName,
        string? BookingDescription,
        bool IsAnnounced,
        bool IsCostNeutral,
        StatementDraftEntryStatus Status,
        Guid? ContactId,
        Guid? SavingsPlanId,
        bool ArchiveSavingsPlanOnBooking,
        Guid? SplitDraftId,
        Guid? SecurityId,
        SecurityTransactionType? SecurityTransactionType,
        decimal? SecurityQuantity,
        decimal? SecurityFeeAmount,
        decimal? SecurityTaxAmount
    );

    private sealed record EntryDetailVm(
        Guid DraftId,
        string OriginalFileName,
        EntryDto Entry,
        Guid? PrevEntryId,
        Guid? NextEntryId,
        Guid? NextOpenEntryId,
        decimal? SplitSum,
        decimal? Difference,
        Guid? BankContactId
    );

    private sealed record ContactDto(Guid Id, string Name, ContactType Type, Guid? CategoryId);
    private enum ContactType { Self, Bank, Person, Organization, Other }
    private sealed class ContactVm { public Guid Id { get; set; } public string Name { get; set; } = string.Empty; }
    private sealed record SavingsPlanDto(Guid Id, string Name);
    private sealed record StatementDraftListDto(Guid DraftId, string OriginalFileName, Guid? DetectedAccountId, StatementDraftStatus Status, decimal TotalAmount, bool IsSplitDraft, IReadOnlyList<EntryDto> Entries);

    private sealed record SecurityDto(Guid Id, string Name, string Identifier);
    private sealed class SecurityVm { public Guid Id { get; set; } public string Name { get; set; } = string.Empty; public string Identifier { get; set; } = string.Empty; }
    private enum SecurityTransactionType { Buy=0, Sell=1, DividendOrInterest=2 }

    private DraftValidationResultDto? _entryValidation;

    private async Task ValidateEntry()
    {
        _entryValidation = await Http.GetFromJsonAsync<DraftValidationResultDto>($"/api/statement-drafts/{DraftId}/entries/{EntryId}/validate");
        StateHasChanged();
    }

    private sealed record DraftValidationMessageDto(string Code, string Severity, string Message, Guid DraftId, Guid? EntryId);
    private sealed record DraftValidationResultDto(Guid DraftId, bool IsValid, IReadOnlyList<DraftValidationMessageDto> Messages);

    // Handlers reintroduced after refactor
    private async Task SaveAll()
    {
        if (_vm == null) { return; }
        _pendingSave = true; _contactError = null;
        try
        {
            var payload = new
            {
                ContactId = _selectedContactId,
                IsCostNeutral = _IsCostNeutral,
                SavingsPlanId = _selectedSavingsPlanId,
                ArchiveOnBooking = _archiveSavingsPlanOnBooking,
                SecurityId = _selectedSecurityId,
                TransactionType = _securityTxType,
                Quantity = _securityQuantity,
                FeeAmount = _securityFee,
                TaxAmount = _securityTax
            };

            var resp = await Http.PostAsJsonAsync($"/api/statement-drafts/{DraftId}/entries/{EntryId}/save-all", payload);
            if (!resp.IsSuccessStatusCode)
            {
                _contactError = await resp.Content.ReadAsStringAsync();
            }
            else
            {
                await LoadEntryAsync();
            }
        }
        catch (Exception ex)
        {
            _contactError = ex.Message;
        }
        _pendingSave = false;
    }

    private async Task Reclassify()
    {
        var resp = await Http.PostAsync($"/api/statement-drafts/{DraftId}/classify/{_vm?.Entry.Id}", null);
        if (resp.IsSuccessStatusCode)
        {
            await LoadEntryAsync();
            _selectedContactId = _vm?.Entry.ContactId;
            _contactFilter = _selectedContactId == null ? string.Empty : _allContacts.FirstOrDefault(c=>c.Id==_vm.Entry.ContactId)?.Name ?? string.Empty;
            StateHasChanged();
        }
    }

    private void OpenSecurityDetail()
    {
        if (_selectedSecurityId != null)
        {
            Nav.NavigateTo($"/securities/{_selectedSecurityId}?draftId={DraftId}&entryId={EntryId}");
        }
    }

    private void ShowDropdown(FocusEventArgs _) => _dropdownVisible = true;
    private void SelectContact(Guid? id)
    {
        if (_selectedContactId != id) { _selectedContactId = id; }
        _contactFilter = id == null ? string.Empty : _allContacts.FirstOrDefault(c=>c.Id==id)?.Name ?? string.Empty;
        _dropdownVisible = false;
    }
    private void OnContactFilterAfterChanged()
    {
        _dropdownVisible = true;
        if (_selectedContactId != null && !_allContacts.Any(c => string.Equals(c.Name, _contactFilter, StringComparison.OrdinalIgnoreCase)))
        {
            _selectedContactId = null;
        }
    }

    private void ShowSecurityDropdown(FocusEventArgs _) => _securityDropdownVisible = true;
    private void OnSecurityFilterChanged()
    {
        _securityDropdownVisible = true;
        if (_selectedSecurityId != null &&
            !_securities.Any(s => string.Equals(s.Name, _securityFilter, StringComparison.OrdinalIgnoreCase)))
        {
            _selectedSecurityId = null;
        }
    }
    private void SelectSecurity(Guid? id)
    {
        if (_selectedSecurityId != id) { _selectedSecurityId = id; }
        _securityFilter = id == null ? string.Empty : _securities.FirstOrDefault(s => s.Id == id)?.Name ?? string.Empty;
        _securityDropdownVisible = false;
    }

    private void OpenCreateSecurity()
    {
        var name = _securityFilter;
        if (string.IsNullOrWhiteSpace(name))
        {
            name = _vm?.Entry.Subject;
        }
        name ??= string.Empty;
        var url = $"/securities/new?prefillName={Uri.EscapeDataString(name)}&draftId={DraftId}&entryId={EntryId}";
        Nav.NavigateTo(url);
    }

    private async Task PersistSecurityChangesIfNeededAsync()
    {
        if (_vm == null) { return; }
        if (!ShowSecuritySection && _vm.Entry.SecurityId == null)
        {
            return;
        }
        var e = _vm.Entry;
        var changed =
            e.SecurityId != _selectedSecurityId ||
            e.SecurityTransactionType != _securityTxType ||
            e.SecurityQuantity != _securityQuantity ||
            e.SecurityFeeAmount != _securityFee ||
            e.SecurityTaxAmount != _securityTax;

        if (!changed) { return; }

        var payload = new
        {
            SecurityId = _selectedSecurityId,
            TransactionType = _securityTxType,
            Quantity = _securityQuantity,
            FeeAmount = _securityFee,
            TaxAmount = _securityTax
        };

        var resp = await Http.PostAsJsonAsync($"/api/statement-drafts/{DraftId}/entries/{EntryId}/security", payload);
        if (!resp.IsSuccessStatusCode)
        {
            _securityError = await resp.Content.ReadAsStringAsync();
        }
        else
        {
            await LoadEntryAsync();
        }
    }

    private bool GetArchiveFlagFromEntryVm()
    {
        try
        {
            return _vm?.Entry.ArchiveSavingsPlanOnBooking ?? false;
        }
        catch { return false; }
    }
}
