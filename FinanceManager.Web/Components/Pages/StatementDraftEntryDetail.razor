@page "/statement-drafts/{DraftId:guid}/entries/{EntryId:guid}"
@rendermode InteractiveServer
@inject HttpClient Http
@inject NavigationManager Nav
@using FinanceManager.Domain.Statements

@code { enum StatementDraftStatus { Draft=0, Committed=1, Expired=2 } }

<h3>Statement Draft Entry</h3>
@if (_vm == null)
{
    <p>Loading...</p>
}
else
{
    <div class="action-bar" style="margin-bottom:1rem;display:flex;gap:.4rem;flex-wrap:wrap;align-items:center;">
        <button class="icon-btn" @onclick="Back" title="Back" aria-label="Back"><svg><use href="/icons/sprite.svg#back" /></svg></button>
        <button class="icon-btn" disabled="@(_pendingSave)" @onclick="SaveAll" title="Save Changes" aria-label="Save Changes"><svg><use href="/icons/sprite.svg#save" /></svg></button>
        <button class="icon-btn" @onclick="Reclassify" title="Reclassify Draft" aria-label="Reclassify Draft"><svg><use href="/icons/sprite.svg#refresh" /></svg></button>
        <button class="icon-btn" disabled="@(_selectedContactId==null)" @onclick="OpenContactDetail" title="Kontakt anzeigen" aria-label="Kontakt anzeigen">
            <svg><use href="/icons/sprite.svg#groups" /></svg>
        </button>
        <div style="margin-left:1rem;display:flex;gap:.25rem;align-items:center;">
            <button class="icon-btn" disabled="@(_vm?.PrevEntryId==null)" @onclick="GoPrev" title="Previous Entry" aria-label="Previous Entry"><svg><use href="/icons/sprite.svg#back" /></svg></button>
            <button class="icon-btn" disabled="@(_vm?.NextOpenEntryId==null)" @onclick="GoNextOpen" title="Nächster offener Eintrag" aria-label="Nächster offener Eintrag">
                <svg><use href="/icons/sprite.svg#arrow-right" /></svg>
            </button>
        </div>
        <!-- Neue Buttons für Split-Funktionalität -->
        <button class="icon-btn" @onclick="OpenSplitDialog" title="Split-Auszug zuordnen" aria-label="Split-Auszug zuordnen">
            <svg><use href="/icons/sprite.svg#link" /></svg>
        </button>
        @if(_vm?.Entry.SplitDraftId != null)
        {
            <button class="icon-btn" @onclick="OpenAssignedSplitDraft" title="Verknüpften Auszug öffnen" aria-label="Verknüpften Auszug öffnen">
                <svg><use href="/icons/sprite.svg#external" /></svg>
            </button>
            <button class="icon-btn" @onclick="RemoveSplit" title="Zuordnung entfernen" aria-label="Zuordnung entfernen">
                <svg><use href="/icons/sprite.svg#unlink" /></svg>
            </button>
        }
    </div>
    <p><strong>Draft File:</strong> @_vm.OriginalFileName</p>
    <table class="fm-table" style="max-width:960px;">
        <tbody>
            <tr><th style="width:180px;">Booking Date</th><td>@_vm.Entry.BookingDate.ToShortDateString()</td></tr>
            <tr><th>Valuta Date</th><td>@(_vm.Entry.ValutaDate?.ToShortDateString() ?? "-")</td></tr>
            <tr><th>Amount</th><td>@_vm.Entry.Amount @_vm.Entry.CurrencyCode</td></tr>
            <tr><th>Subject</th><td class="wrap">@_vm.Entry.Subject</td></tr>
            <tr><th>Recipient</th><td class="wrap">@(_vm.Entry.RecipientName ?? "-")</td></tr>
            <tr><th>Description</th><td class="wrap">@(_vm.Entry.BookingDescription ?? "-")</td></tr>
            <tr><th>Announced</th><td>@(_vm.Entry.IsAnnounced ? "Yes" : "No")</td></tr>
            <tr><th>Status</th><td>@_vm.Entry.Status</td></tr>
            <tr>
                <th>Contact</th>
                <td>
                    <div class="contact-combobox" style="display:grid;grid-template-columns:1fr auto;align-items:start;gap:.5rem;max-width:420px;margin-bottom:1rem;">
                        <div style="position:relative;min-width:0;">
                            <input type="text" style="width:95%;" @bind="_contactFilter" @bind:event="oninput" @bind:after="(()=>OnContactFilterAfterChanged())" placeholder="Type to filter contacts" @onfocus="ShowDropdown" />
                            <input type="hidden" value="@_selectedContactId" />
                            @if (_dropdownVisible)
                            {
                                <ul class="combo-list" style="list-style:none;margin:0;padding:.25rem .25rem;position:absolute;z-index:10;left:0;right:0;max-height:9.5rem;overflow:auto;background:#222;border:1px solid #444;border-radius:4px;box-shadow:0 3px 12px #0005;">
                                    <li style="padding:.3rem .4rem;cursor:pointer;" @onclick="(()=>SelectContact(null))" class="@( _selectedContactId==null?"active":string.Empty)">-- none --</li>
                                    @foreach(var c in FilteredContacts)
                                    {
                                        <li style="padding:.3rem .4rem;cursor:pointer;" @onclick="(()=>SelectContact(c.Id))" class="@( _selectedContactId==c.Id?"active":string.Empty)" title="@c.Name">@c.Name</li>
                                    }
                                    @if(!FilteredContacts.Any())
                                    {
                                        <li style="padding:.3rem .4rem;opacity:.6;">No matches</li>
                                    }
                                </ul>
                            }
                            @if(!string.IsNullOrEmpty(_contactError))
                            {
                                <div style="color:#e66;font-size:.8rem;margin-top:.3rem;">@_contactError</div>
                            }
                        </div>
                        <div>
                            <button class="icon-btn" title="New Contact" aria-label="New Contact" @onclick="OpenCreateContact"><svg><use href="/icons/sprite.svg#plus" /></svg></button>
                        </div>
                    </div>
                </td>
            </tr>
            <tr>
                <th>Cost Neutral</th>
                <td><InputCheckbox @bind-Value="IsCostNeutral" /></td>
            </tr>
            <tr>
                <th>Sparplan</th>
                <td>
                    <div class="savingsplan-combobox" style="display:grid;grid-template-columns:1fr auto;align-items:start;gap:.5rem;max-width:420px;margin-bottom:1rem;">
                        <div style="position:relative;min-width:0;">
                            <input type="text" style="width:95%;" @bind="_savingsPlanFilter" @bind:event="oninput" @bind:after="(()=>OnSavingsPlanFilterAfterChanged())" placeholder="Sparplan suchen..." @onfocus="ShowSavingsPlanDropdown" />
                            <input type="hidden" value="@_selectedSavingsPlanId" />
                            @if (_savingsPlanDropdownVisible)
                            {
                                <ul class="combo-list" style="list-style:none;margin:0;padding:.25rem .25rem;position:absolute;z-index:10;left:0;right:0;max-height:9.5rem;overflow:auto;background:#222;border:1px solid #444;border-radius:4px;box-shadow:0 3px 12px #0005;">
                                    <li style="padding:.3rem .4rem;cursor:pointer;" @onclick="(()=>SelectSavingsPlan(null))" class="@( _selectedSavingsPlanId==null?"active":string.Empty)">-- none --</li>
                                    @foreach(var plan in FilteredSavingsPlans)
                                    {
                                        <li style="padding:.3rem .4rem;cursor:pointer;" @onclick="(()=>SelectSavingsPlan(plan.Id))" class="@( _selectedSavingsPlanId==plan.Id?"active":string.Empty)" title="@plan.Name">@plan.Name</li>
                                    }
                                    @if(!FilteredSavingsPlans.Any())
                                    {
                                        <li style="padding:.3rem .4rem;opacity:.6;">No matches</li>
                                    }
                                </ul>
                            }
                        </div>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>   

    @if (_showSplitDialog)
    {
        <div class="modal-backdrop split-center">
            <div class="modal split-dialog" role="dialog" aria-modal="true" aria-label="Split-Auszug auswählen">
                <h3 style="margin-top:0;">Split-Auszug auswählen</h3>
                @if(_vm?.Entry.SplitDraftId != null)
                {
                    <p style="margin:.15rem 0 .4rem 0;font-size:.7rem;opacity:.7;">Aktuell verknüpft mit Draft <strong>@_vm.Entry.SplitDraftId</strong>. Wähle einen anderen Auszug um die Verknüpfung zu ändern oder klicke auf Abbrechen.</p>
                }
                <p style="margin-top:.2rem;opacity:.8;font-size:.85rem;">Wähle einen unzugeordneten Auszug ohne Konto.</p>
                <input type="text" @bind="_splitFilter" placeholder="Filter..." style="width:100%;margin:.5rem 0  .75rem 0;" />
                <div class="split-scroll">
                    @if(_loadingSplits)
                    {
                        <div class="split-hint">Lade...</div>
                    }
                    else
                    {
                        @foreach(var d in FilteredSplitDrafts)
                        {
                            <div class="split-row @(d.DraftId==_selectedSplitDraftId? "active" : string.Empty)" @onclick="(()=>SelectSplit(d.DraftId))">
                                <div class="name">@d.OriginalFileName</div>
                                <div class="meta">@d.EntriesCount Einträge · Summe @d.TotalAmount</div>
                            </div>
                        }
                        @if(!FilteredSplitDrafts.Any())
                        {
                            <div class="split-hint">Keine Treffer</div>
                        }
                    }
                </div>
                @if(!string.IsNullOrEmpty(_splitError))
                {
                    <div class="split-error">@_splitError</div>
                }
                <div class="split-actions">
                    <button class="icon-btn" disabled="@(_selectedSplitDraftId==null)" @onclick="ConfirmSplit" title="Übernehmen" aria-label="Übernehmen"><svg><use href="/icons/sprite.svg#check" /></svg></button>
                    <button class="icon-btn" @onclick="CloseSplitDialog" title="Abbrechen" aria-label="Abbrechen"><svg><use href="/icons/sprite.svg#clear" /></svg></button>
                </div>
            </div>
        </div>
    }
}

@code {
    [Parameter] public Guid DraftId { get; set; }
    [Parameter] public Guid EntryId { get; set; }

    private EntryDetailVm? _vm;
    private List<ContactVm> _allContacts = new();
    private string _contactFilter = string.Empty;
    private Guid? _selectedContactId;
    private string? _contactError;
    private bool _dropdownVisible;
    private bool _pendingSave;
    private bool _IsCostNeutral;
    private bool IsCostNeutral { get => _IsCostNeutral; set { _IsCostNeutral = value; } }

    private IEnumerable<ContactVm> FilteredContacts => string.IsNullOrWhiteSpace(_contactFilter)
        ? _allContacts
        : _allContacts.Where(c => c.Name.Contains(_contactFilter, StringComparison.OrdinalIgnoreCase));

    private Guid? _selectedSavingsPlanId;
    private string _savingsPlanFilter = string.Empty;
    private bool _savingsPlanDropdownVisible;
    private List<SavingsPlanDto> _userSavingsPlans = new();

    private IEnumerable<SavingsPlanDto> FilteredSavingsPlans => string.IsNullOrWhiteSpace(_savingsPlanFilter)
        ? _userSavingsPlans
        : _userSavingsPlans.Where(p => p.Name.Contains(_savingsPlanFilter, StringComparison.OrdinalIgnoreCase));

    // Split UI State
    private bool _showSplitDialog;
    private bool _loadingSplits;
    private string _splitFilter = string.Empty;
    private Guid? _selectedSplitDraftId;
    private string? _splitError;
    private List<SplitDraftOption> _candidateSplits = new();

    private IEnumerable<SplitDraftOption> FilteredSplitDrafts => string.IsNullOrWhiteSpace(_splitFilter)
        ? _candidateSplits
        : _candidateSplits.Where(d => d.OriginalFileName.Contains(_splitFilter, StringComparison.OrdinalIgnoreCase));

    private sealed record SplitDraftOption(Guid DraftId, string OriginalFileName, int EntriesCount, decimal TotalAmount);

    protected override async Task OnParametersSetAsync()
    {
        await LoadEntryAsync();
        await LoadContactsAsync();
        await LoadUserSavingsPlansAsync();
        _selectedContactId = _vm?.Entry.ContactId;
        _contactFilter = _vm?.Entry.ContactId != null ? _allContacts.FirstOrDefault(c=>c.Id==_vm.Entry.ContactId)?.Name ?? string.Empty : string.Empty;
        _selectedSavingsPlanId = _vm?.Entry.SavingsPlanId;
        _savingsPlanFilter = _selectedSavingsPlanId != null ? _userSavingsPlans.FirstOrDefault(p=>p.Id==_selectedSavingsPlanId)?.Name ?? string.Empty : string.Empty;
    }

    private void ShowSavingsPlanDropdown(FocusEventArgs _) => _savingsPlanDropdownVisible = true;

    private void SelectSavingsPlan(Guid? id)
    {
        if (_selectedSavingsPlanId != id)
        {
            _selectedSavingsPlanId = id;
        }
        _savingsPlanFilter = id == null ? string.Empty : _userSavingsPlans.FirstOrDefault(p => p.Id == id)?.Name ?? string.Empty;
        _savingsPlanDropdownVisible = false;
    }

    private void OnSavingsPlanFilterAfterChanged()
    {
        _savingsPlanDropdownVisible = true;
        if (_selectedSavingsPlanId != null && !_userSavingsPlans.Any(p => string.Equals(p.Name, _savingsPlanFilter, StringComparison.OrdinalIgnoreCase)))
        {
            _selectedSavingsPlanId = null;
        }
    }

    private async Task LoadEntryAsync()
    {
        var resp = await Http.GetAsync($"/api/statement-drafts/{DraftId}/entries/{EntryId}");
        if (resp.IsSuccessStatusCode)
        {
            _vm = await resp.Content.ReadFromJsonAsync<EntryDetailVm>();
            _IsCostNeutral = _vm.Entry.IsCostNeutral;
            _selectedSavingsPlanId = _vm.Entry.SavingsPlanId;
            _selectedContactId = _vm.Entry.ContactId;
        }
    }

    private async Task LoadContactsAsync()
    {
        var resp = await Http.GetAsync("/api/contacts?skip=0&take=500");
        if (resp.IsSuccessStatusCode)
        {
            var list = await resp.Content.ReadFromJsonAsync<List<ContactDto>>() ?? new();
            _allContacts = list.Select(c => new ContactVm { Id = c.Id, Name = c.Name }).OrderBy(c => c.Name).ToList();
        }
    }

    private async Task LoadUserSavingsPlansAsync()
    {
        var resp = await Http.GetAsync("/api/savings-plans?onlyActive=true");
        if (resp.IsSuccessStatusCode)
        {
            _userSavingsPlans = await resp.Content.ReadFromJsonAsync<List<SavingsPlanDto>>() ?? new();
        }
    }

    private void ShowDropdown(FocusEventArgs _) => _dropdownVisible = true;

    private void SelectContact(Guid? id)
    {
        if (_selectedContactId != id)
        {
            _selectedContactId = id;
        }
        _contactFilter = id == null ? string.Empty : _allContacts.FirstOrDefault(c=>c.Id==id)?.Name ?? string.Empty;
        _dropdownVisible = false;
    }

    private void OnContactFilterAfterChanged()
    {
        _dropdownVisible = true;
        if (_selectedContactId != null && !_allContacts.Any(c => string.Equals(c.Name, _contactFilter, StringComparison.OrdinalIgnoreCase)))
        {
            _selectedContactId = null;
        }
    }

    private async Task SaveAll()
    {
        if (_vm == null) { return; }
        _pendingSave = true; _contactError = null;
        try
        {
            _contactError = string.Empty;
            var payload = new { ContactId = _selectedContactId };
            var resp = await Http.PostAsJsonAsync($"/api/statement-drafts/{DraftId}/entries/{EntryId}/contact", payload);
            if (!resp.IsSuccessStatusCode)
            {
                throw new ApplicationException(await resp.Content.ReadAsStringAsync());
            }

            if (_vm.Entry.IsCostNeutral != _IsCostNeutral)
            {
                var payload2 = new { IsCostNeutral = _IsCostNeutral };
                resp = await Http.PostAsJsonAsync($"/api/statement-drafts/{DraftId}/entries/{EntryId}/costneutral", payload2);
                if (!resp.IsSuccessStatusCode)
                {
                    throw new ApplicationException(await resp.Content.ReadAsStringAsync());
                }
            }

            if (_vm.Entry.SavingsPlanId != _selectedSavingsPlanId)
            {
                var payload3 = new { SavingsPlanId = _selectedSavingsPlanId };
                resp = await Http.PostAsJsonAsync($"/api/statement-drafts/{DraftId}/entries/{EntryId}/savingsplan", payload3);
                if (!resp.IsSuccessStatusCode)
                {
                    throw new ApplicationException(await resp.Content.ReadAsStringAsync());
                }
            }

            await LoadEntryAsync();
            _selectedContactId = _vm?.Entry.ContactId;
            _contactFilter = _selectedContactId == null ? string.Empty : _allContacts.FirstOrDefault(c => c.Id == _selectedContactId)?.Name ?? string.Empty;
        }
        catch (Exception ex)
        {
            _contactError = ex.Message;
        }
        _pendingSave = false;
    }

    private async Task Reclassify()
    {
        var resp = await Http.PostAsync($"/api/statement-drafts/{DraftId}/classify", null);
        if (resp.IsSuccessStatusCode)
        {
            await LoadEntryAsync();
            _selectedContactId = _vm?.Entry.ContactId;
            _contactFilter = _selectedContactId == null ? string.Empty : _allContacts.FirstOrDefault(c=>c.Id==_selectedContactId)?.Name ?? string.Empty;
            StateHasChanged();
        }
    }

    private void Back() => Nav.NavigateTo($"/statement-drafts/{DraftId}");
    private void OpenCreateContact()
    {
        var name = _vm?.Entry.RecipientName;
        if (string.IsNullOrWhiteSpace(name)) { name = string.IsNullOrWhiteSpace(_contactFilter) ? _vm?.Entry.Subject : _contactFilter; }
        name ??= string.Empty;
        var url = $"/contacts/new?prefillName={Uri.EscapeDataString(name)}&draftId={DraftId}&entryId={EntryId}";
        Nav.NavigateTo(url);
    }

    private void OpenContactDetail()
    {
        if (_selectedContactId != null)
        {
            Nav.NavigateTo($"/contacts/{_selectedContactId}");
        }
    }

    private void GoPrev()
    {
        if (_vm?.PrevEntryId != null)
        {
            Nav.NavigateTo($"/statement-drafts/{DraftId}/entries/{_vm.PrevEntryId}");
        }
    }
    private void GoNextOpen()
    {
        if (_vm?.NextOpenEntryId != null)
        {
            Nav.NavigateTo($"/statement-drafts/{DraftId}/entries/{_vm.NextOpenEntryId}");
        }
    }

    // Split Handling
    private void OpenSplitDialog()
    {
        _splitError = null;
        _selectedSplitDraftId = null;
        _showSplitDialog = true;
        _ = LoadSplitCandidates();
    }

    private void CloseSplitDialog() => _showSplitDialog = false;

    private async Task LoadSplitCandidates()
    {
        _loadingSplits = true;
        try
        {
            var list = await Http.GetFromJsonAsync<List<StatementDraftListDto>>("/api/statement-drafts");
            if (list != null)
            {
                _candidateSplits = list
                    .Where(d => d.DraftId != DraftId && d.DetectedAccountId == null && !d.IsSplitDraft && d.Status == StatementDraftStatus.Draft)
                    .Select(d => new SplitDraftOption(d.DraftId, d.OriginalFileName, d.Entries.Count, d.TotalAmount))
                    .OrderBy(d => d.OriginalFileName)
                    .ToList();
            }
        }
        finally
        {
            _loadingSplits = false;
            StateHasChanged();
        }
    }

    private void SelectSplit(Guid id) => _selectedSplitDraftId = id;

    private async Task ConfirmSplit()
    {
        if (_selectedSplitDraftId == null) { return; }
        try
        {
            var resp = await Http.PostAsJsonAsync($"/api/statement-drafts/{DraftId}/entries/{EntryId}/split", new { SplitDraftId = _selectedSplitDraftId });
            if (!resp.IsSuccessStatusCode)
            {
                _splitError = await resp.Content.ReadAsStringAsync();
                return;
            }
            _showSplitDialog = false;
            await LoadEntryAsync();
        }
        catch (Exception ex)
        {
            _splitError = ex.Message;
        }
    }

    private async Task RemoveSplit()
    {
        var resp = await Http.PostAsJsonAsync($"/api/statement-drafts/{DraftId}/entries/{EntryId}/split", new { SplitDraftId = (Guid?)null });
        if (resp.IsSuccessStatusCode)
        {
            await LoadEntryAsync();
        }
    }

    private void OpenAssignedSplitDraft()
    {
        if (_vm?.Entry.SplitDraftId != null)
        {
            Nav.NavigateTo($"/statement-drafts/{_vm.Entry.SplitDraftId}");
        }
    }

    private sealed record EntryDto(Guid Id, DateTime BookingDate, DateTime? ValutaDate, decimal Amount, string CurrencyCode, string Subject, string? RecipientName, string? BookingDescription, bool IsAnnounced, bool IsCostNeutral, StatementDraftEntryStatus Status, Guid? ContactId, Guid? SavingsPlanId, Guid? SplitDraftId);
    private sealed record EntryDetailVm(Guid DraftId, string OriginalFileName, EntryDto Entry, Guid? PrevEntryId, Guid? NextEntryId, Guid? NextOpenEntryId);
    private sealed record ContactDto(Guid Id, string Name, ContactType Type, Guid? CategoryId);
    private enum ContactType { Self, Bank, Person, Organization, Other }
    private sealed class ContactVm { public Guid Id { get; set; } public string Name { get; set; } = string.Empty; }
    private sealed record SavingsPlanDto(Guid Id, string Name);
    private sealed record StatementDraftListDto(Guid DraftId, string OriginalFileName, Guid? DetectedAccountId, StatementDraftStatus Status, decimal TotalAmount, bool IsSplitDraft, IReadOnlyList<EntryDto> Entries);
}
