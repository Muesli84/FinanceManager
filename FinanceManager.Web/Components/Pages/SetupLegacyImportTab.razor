@inject IHttpClientFactory ClientFactory
@inject NavigationManager Navigation
@inject Microsoft.Extensions.Localization.IStringLocalizer<FinanceManager.Web.Components.Pages.Setup> Localizer

<div>
    <h4 style="margin-top:0;">Legacy</h4>
    <p>@Localizer["Legacy_Import_Hint"]</p>
    <div class="icon-btn" title="@Localizer["Legacy_ChooseFile"]" style="padding:.3rem .6rem;">
        <InputFile OnChange="OnFileSelected" />
    </div>
    @if (_fileName != null)
    {
        <div style="margin-top:1rem;">
            <p>@Localizer["Legacy_File"]: @_fileName</p>
            <label style="display:flex;align-items:center;gap:.4rem;font-size:.8rem;">
                <input type="checkbox" @bind="_replaceExisting" />
                @Localizer["Legacy_ReplaceExisting"]
            </label>
            <button class="icon-btn" @onclick="UploadAsync" disabled="@_busy" title="@Localizer["Legacy_Import"]">
                <svg class="icon"><use href="icons/sprite.svg#save"></use></svg>
            </button>
        </div>
    }
    @if (!string.IsNullOrWhiteSpace(_error))
    {
        <div class="error" style="margin-top:.5rem;">@_error</div>
    }
</div>

@code {
    private IBrowserFile? _file;
    private string? _fileName;
    private bool _replaceExisting;
    private bool _busy;
    private string? _error;

    private void OnFileSelected(InputFileChangeEventArgs e)
    {
        _file = e.File;
        _fileName = _file?.Name;
    }

    private async Task UploadAsync()
    {
        if (_file == null) { return; }
        _busy = true; _error = null;
        try
        {
            var http = ClientFactory.CreateClient("Api");
            using var content = new MultipartFormDataContent();
            await using var stream = _file.OpenReadStream(1024L * 1024L * 1024L);
            content.Add(new StreamContent(stream), "file", _file.Name);
            content.Add(new StringContent(_replaceExisting.ToString()), "replaceExisting");
            var resp = await http.PostAsync("/api/setup/import", content);
            if (resp.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/", true);
            }
            else
            {
                _error = await resp.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        _busy = false;
    }
}
