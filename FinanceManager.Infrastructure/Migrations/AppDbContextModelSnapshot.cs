// <auto-generated />
using System;
using FinanceManager.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FinanceManager.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0-rc.1.24451.1");

            modelBuilder.Entity("FinanceManager.Domain.Accounts.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BankContactId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CurrentBalance")
                        .HasColumnType("TEXT");

                    b.Property<string>("Iban")
                        .HasMaxLength(34)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OwnerUserId", "Name")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("FinanceManager.Domain.Accounts.AccountShare", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("GrantedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RevokedUtc")
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AccountShares");
                });

            modelBuilder.Entity("FinanceManager.Domain.Attachments.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Content")
                        .HasColumnType("BLOB");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("TEXT");

                    b.Property<short>("EntityKind")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ReferenceAttachmentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sha256")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<long>("SizeBytes")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UploadedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ReferenceAttachmentId");

                    b.HasIndex("Sha256", "OwnerUserId");

                    b.HasIndex("OwnerUserId", "EntityKind", "EntityId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("FinanceManager.Domain.Attachments.AttachmentCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OwnerUserId", "Name")
                        .IsUnique();

                    b.ToTable("AttachmentCategories");
                });

            modelBuilder.Entity("FinanceManager.Domain.Contacts.AliasName", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pattern")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ContactId", "Pattern")
                        .IsUnique();

                    b.ToTable("AliasNames");
                });

            modelBuilder.Entity("FinanceManager.Domain.Contacts.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPaymentIntermediary")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OwnerUserId", "Name");

                    b.HasIndex("OwnerUserId", "Type")
                        .IsUnique()
                        .HasFilter("[Type] = 0");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("FinanceManager.Domain.Contacts.ContactCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OwnerUserId", "Name")
                        .IsUnique();

                    b.ToTable("ContactCategories");
                });

            modelBuilder.Entity("FinanceManager.Domain.Notifications.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDismissed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("OwnerUserId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ScheduledDateUtc")
                        .HasColumnType("TEXT");

                    b.Property<int>("Target")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("TEXT");

                    b.Property<string>("TriggerEventKey")
                        .HasMaxLength(120)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OwnerUserId", "Type", "ScheduledDateUtc");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("FinanceManager.Domain.Postings.Posting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Kind")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("TEXT");

                    b.Property<string>("RecipientName")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SavingsPlanId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SecurityId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SecuritySubType")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Subject")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId", "BookingDate");

                    b.ToTable("Postings");
                });

            modelBuilder.Entity("FinanceManager.Domain.Postings.PostingAggregate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<int>("Kind")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<int>("Period")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PeriodStart")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SavingsPlanId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SecurityId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Kind", "AccountId", "Period", "PeriodStart")
                        .IsUnique()
                        .HasFilter("[AccountId] IS NOT NULL AND [ContactId] IS NULL AND [SavingsPlanId] IS NULL AND [SecurityId] IS NULL");

                    b.HasIndex("Kind", "ContactId", "Period", "PeriodStart")
                        .IsUnique()
                        .HasFilter("[ContactId] IS NOT NULL AND [AccountId] IS NULL AND [SavingsPlanId] IS NULL AND [SecurityId] IS NULL");

                    b.HasIndex("Kind", "SavingsPlanId", "Period", "PeriodStart")
                        .IsUnique()
                        .HasFilter("[SavingsPlanId] IS NOT NULL AND [AccountId] IS NULL AND [ContactId] IS NULL AND [SecurityId] IS NULL");

                    b.HasIndex("Kind", "SecurityId", "Period", "PeriodStart")
                        .IsUnique()
                        .HasFilter("[SecurityId] IS NOT NULL AND [AccountId] IS NULL AND [ContactId] IS NULL AND [SavingsPlanId] IS NULL");

                    b.HasIndex("Kind", "AccountId", "ContactId", "SavingsPlanId", "SecurityId", "Period", "PeriodStart")
                        .IsUnique();

                    b.ToTable("PostingAggregates");
                });

            modelBuilder.Entity("FinanceManager.Domain.Reports.HomeKpi", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<int>("DisplayMode")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Kind")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PredefinedType")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ReportFavoriteId")
                        .HasColumnType("TEXT");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasMaxLength(120)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ReportFavoriteId");

                    b.HasIndex("OwnerUserId", "SortOrder");

                    b.ToTable("HomeKpis");
                });

            modelBuilder.Entity("FinanceManager.Domain.Reports.ReportFavorite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountIdsCsv")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ComparePrevious")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CompareYear")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContactCategoryIdsCsv")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactIdsCsv")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Expandable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IncludeCategory")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Interval")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("PostingKind")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PostingKindsCsv")
                        .HasColumnType("TEXT");

                    b.Property<string>("SavingsPlanCategoryIdsCsv")
                        .HasColumnType("TEXT");

                    b.Property<string>("SavingsPlanIdsCsv")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityCategoryIdsCsv")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityIdsCsv")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ShowChart")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Take")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OwnerUserId", "Name")
                        .IsUnique();

                    b.ToTable("ReportFavorites");
                });

            modelBuilder.Entity("FinanceManager.Domain.Savings.SavingsPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ArchivedUtc")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContractNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Interval")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("TargetAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("TargetDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OwnerUserId", "Name")
                        .IsUnique();

                    b.ToTable("SavingsPlans");
                });

            modelBuilder.Entity("FinanceManager.Domain.Savings.SavingsPlanCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SavingsPlanCategories");
                });

            modelBuilder.Entity("FinanceManager.Domain.Securities.Security", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AlphaVantageCode")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ArchivedUtc")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasPriceError")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PriceErrorMessage")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PriceErrorSinceUtc")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OwnerUserId", "Identifier");

                    b.HasIndex("OwnerUserId", "Name")
                        .IsUnique();

                    b.ToTable("Securities");
                });

            modelBuilder.Entity("FinanceManager.Domain.Securities.SecurityCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OwnerUserId", "Name")
                        .IsUnique();

                    b.ToTable("SecurityCategories");
                });

            modelBuilder.Entity("FinanceManager.Domain.Securities.SecurityPrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Close")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SecurityId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SecurityId", "Date")
                        .IsUnique();

                    b.ToTable("SecurityPrices");
                });

            modelBuilder.Entity("FinanceManager.Domain.Security.IpBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("BlockReason")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("BlockedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<int>("UnknownUserFailedAttempts")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UnknownUserLastFailedUtc")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IpAddress")
                        .IsUnique();

                    b.ToTable("IpBlocks");
                });

            modelBuilder.Entity("FinanceManager.Domain.Statements.StatementDraft", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DetectedAccountId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("UploadGroupId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UploadGroupId");

                    b.HasIndex("OwnerUserId", "CreatedUtc");

                    b.ToTable("StatementDrafts");
                });

            modelBuilder.Entity("FinanceManager.Domain.Statements.StatementDraftEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ArchiveSavingsPlanOnBooking")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("BookingDescription")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DraftId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAnnounced")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCostNeutral")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("RecipientName")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SavingsPlanId")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("SecurityFeeAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SecurityId")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("SecurityQuantity")
                        .HasPrecision(18, 6)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("SecurityTaxAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<int?>("SecurityTransactionType")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("SplitDraftId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ValutaDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SecurityId");

                    b.HasIndex("SplitDraftId")
                        .IsUnique()
                        .HasFilter("[SplitDraftId] IS NOT NULL");

                    b.HasIndex("DraftId", "BookingDate");

                    b.ToTable("StatementDraftEntries");
                });

            modelBuilder.Entity("FinanceManager.Domain.Statements.StatementEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("BookingDescription")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAnnounced")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCostNeutral")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("RawHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("RecipientName")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SavingsPlanId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SecurityTransactionId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StatementImportId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ValutaDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RawHash")
                        .IsUnique();

                    b.HasIndex("SavingsPlanId");

                    b.ToTable("StatementEntries");
                });

            modelBuilder.Entity("FinanceManager.Domain.Statements.StatementImport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<int>("Format")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ImportedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalEntries")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AccountId", "ImportedAtUtc");

                    b.ToTable("StatementImports");
                });

            modelBuilder.Entity("FinanceManager.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AlphaVantageApiKey")
                        .HasMaxLength(120)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HolidayCountryCode")
                        .HasColumnType("TEXT");

                    b.Property<int>("HolidayProviderKind")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HolidaySubdivisionCode")
                        .HasColumnType("TEXT");

                    b.Property<int>("ImportMaxEntriesPerDraft")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ImportMinEntriesPerDraft")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ImportMonthlySplitThreshold")
                        .HasColumnType("INTEGER");

                    b.Property<short>("ImportSplitMode")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastFailedLoginUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastLoginUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LockedUntilUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<bool>("MonthlyReminderEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MonthlyReminderHour")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MonthlyReminderMinute")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PreferredLanguage")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ShareAlphaVantageApiKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("TimeZoneId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FinanceManager.Infrastructure.Backups.BackupRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("TEXT");

                    b.Property<long>("SizeBytes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.Property<string>("StoragePath")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OwnerUserId", "CreatedUtc");

                    b.ToTable("Backups");
                });

            modelBuilder.Entity("FinanceManager.Domain.Attachments.Attachment", b =>
                {
                    b.HasOne("FinanceManager.Domain.Attachments.AttachmentCategory", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FinanceManager.Domain.Attachments.Attachment", null)
                        .WithMany()
                        .HasForeignKey("ReferenceAttachmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FinanceManager.Domain.Contacts.Contact", b =>
                {
                    b.HasOne("FinanceManager.Domain.Contacts.ContactCategory", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("FinanceManager.Domain.Reports.HomeKpi", b =>
                {
                    b.HasOne("FinanceManager.Domain.Reports.ReportFavorite", null)
                        .WithMany()
                        .HasForeignKey("ReportFavoriteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FinanceManager.Domain.Savings.SavingsPlan", b =>
                {
                    b.HasOne("FinanceManager.Domain.Savings.SavingsPlanCategory", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("FinanceManager.Domain.Securities.Security", b =>
                {
                    b.HasOne("FinanceManager.Domain.Securities.SecurityCategory", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("FinanceManager.Domain.Statements.StatementDraftEntry", b =>
                {
                    b.HasOne("FinanceManager.Domain.Statements.StatementDraft", null)
                        .WithMany("Entries")
                        .HasForeignKey("DraftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinanceManager.Domain.Statements.StatementDraft", null)
                        .WithMany()
                        .HasForeignKey("SplitDraftId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FinanceManager.Domain.Statements.StatementEntry", b =>
                {
                    b.HasOne("FinanceManager.Domain.Savings.SavingsPlan", null)
                        .WithMany()
                        .HasForeignKey("SavingsPlanId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("FinanceManager.Domain.Statements.StatementDraft", b =>
                {
                    b.Navigation("Entries");
                });
#pragma warning restore 612, 618
        }
    }
}
